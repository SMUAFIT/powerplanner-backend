import { Assignment, Course, CourseConfig, CourseRun, CourseSegment, Prisma, Programme } from "@prisma/client";
import { Workbook } from "exceljs";
import { FiscalYearService } from "src/fiscal-year/fiscal-year.service";
import { NotificationsService } from "src/notifications/notifications.service";
import { FilterDto, fyDto } from "src/scheduler/dto";
import { TrainerService } from "src/trainer/trainer.service";
import { PrismaService } from "src/prisma/prisma.service";
import { CourseRunDto, UpdateCourseSegmentDto, GetCourseConfigDto, GetProgrammeDto, CourseDto, CreateNewCourseDto, ProgrammeDto, EditCourseSegmentDto, CourseFilterDto } from "./dto";
import { AssignmentDto } from "./dto/get-assignment.dto";
export declare class CourseService {
    private prisma;
    private fiscalYearService;
    private trainerService;
    private notificationsService;
    constructor(prisma: PrismaService, fiscalYearService: FiscalYearService, trainerService: TrainerService, notificationsService: NotificationsService);
    getCourses(fy: fyDto): Promise<any[]>;
    getCourseDetails(courseConfigDto: GetCourseConfigDto): Promise<CourseConfig & {
        Course: Course;
    }>;
    removeCourse(courseConfig: GetCourseConfigDto): Promise<any>;
    editScheduledCourseRun(editCourseSegmentDto: EditCourseSegmentDto): Promise<any>;
    getAllDatesBetween(dates: string[]): string[];
    getCourseRunClashes(courseSegmentsOnSameDays: Map<string, CourseSegment[]>, courseName: string): Date[];
    getLowManpowerDateClashes(courseSegmentsOnSameDays: Map<string, CourseSegment[]>, lowManpowerDates: Object): Map<string, Date>;
    getDayLimitClashes(courseSegmentsOnSameDays: Map<string, CourseSegment[]>, day_limit: number): Date[];
    getCourseSegmentsOnSameDays(course_name: string, run: number, segment: number, dates: Array<string>, allCourseSegmentsInFy: Array<CourseSegment>): Map<string, CourseSegment[]>;
    createCourse(course: CourseDto): Promise<Course>;
    createCourseRun(courseRun: CourseRun): Promise<any>;
    createManyCourses(coursesArr: Array<Course>): Promise<any>;
    getProgrammes(): Promise<Programme[]>;
    getProgramme(body: GetProgrammeDto): Promise<Programme>;
    createProgramme(programme: ProgrammeDto): Promise<any>;
    createManyProgrammes(programmeNameArr: Array<Programme>): Promise<any>;
    getCourseConfig(body: GetCourseConfigDto): Promise<CourseConfig>;
    getCourseConfigsOfFy(fy: string): Promise<CourseConfig[]>;
    createManyCourseConfigs(courseConfigsArr: Array<CourseConfig>): Promise<any>;
    createManyCourseRuns(courseRunsArr: Array<CourseRun>): Promise<any>;
    getCourseRunsOfFyAndCourse(fy: string, courseName: string): Promise<CourseRun[]>;
    getCourseSegmentsOfFyAndCourse(fy: string, courseName: string): Promise<CourseSegment[]>;
    getCourseSegmentsOfFy(fy: string): Promise<CourseSegment[]>;
    createManyCourseSegments(courseSegmentsArr: Array<CourseSegment>): Promise<Prisma.BatchPayload>;
    createAssignment(assignment: Assignment): Promise<any>;
    createManyAssignments(assignmentsArr: Array<Assignment>): Promise<Prisma.BatchPayload>;
    updateCourseSegmentStatus(courseSegmentArr: UpdateCourseSegmentDto[]): Promise<any>;
    updateAssignmentStatus(AssignmentArr: AssignmentDto[]): Promise<any>;
    removeScheduledCourseRun(courseRun: CourseRunDto): Promise<any>;
    exportCourseSegment(dto: FilterDto): Promise<CourseSegment[]>;
    formatFilterResults(courseSegments: CourseSegment[]): CourseSegment[];
    createNewCourse(body: CreateNewCourseDto): Promise<any>;
    getFilterResults(dto: FilterDto): Promise<any[]>;
    filterCourses(dto: CourseFilterDto): Promise<any[]>;
    exportCourseSegmentToExcel(courseSegments: CourseSegment[]): Workbook;
    dayOfWeekAsString(dayIndex: number): string;
    arraysEqual(a: Array<any>, b: Array<any>): boolean;
    formatTime(timeString: null | string): Date | null;
}
