
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model FiscalYear
 * 
 */
export type FiscalYear = {
  fy: string
  revenue_target: number | null
  day_limit: number | null
  blackout_dates: Prisma.JsonValue | null
  low_manpower_dates: Prisma.JsonValue | null
}

/**
 * Model Programme
 * 
 */
export type Programme = {
  programme_name: string
  createdAt: Date | null
  updatedAt: Date | null
}

/**
 * Model Course
 * 
 */
export type Course = {
  course_name: string
  programme_name: string
  course_code: string
  delivery_mode: DeliveryMode
  createdAt: Date
  updatedAt: Date
}

/**
 * Model CourseConfig
 * 
 */
export type CourseConfig = {
  course_name: string
  fy: string
  days_per_run: number
  runs_per_year: number
  course_fees: number | null
  start_time: Date | null
  end_time: Date | null
  days_to_avoid: number[]
  avoid_month_start: boolean
  avoid_month_end: boolean
  split: number[]
  trainers: Prisma.JsonValue
  createdAt: Date
  updatedAt: Date
}

/**
 * Model CourseRun
 * 
 */
export type CourseRun = {
  run: number
  course_name: string
  fy: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model CourseSegment
 * 
 */
export type CourseSegment = {
  segment: number
  course_name: string
  fy: string
  run: number
  dates: Date[]
  status: Status
  createdAt: Date
  updatedAt: Date
}

/**
 * Model User
 * 
 */
export type User = {
  user_name: string
  password: string
  email: string
  role: Role
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Assignment
 * 
 */
export type Assignment = {
  user_name: string
  segment: number
  course_name: string
  fy: string
  run: number
  assignment_status: Status
  decline_reason: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Notification
 * 
 */
export type Notification = {
  time_sent: Date
  user_name: string
  segment: number
  course_name: string
  fy: string
  run: number
  createdAt: Date
  updatedAt: Date
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const DeliveryMode: {
  F2F: 'F2F',
  ONLINE: 'ONLINE'
};

export type DeliveryMode = (typeof DeliveryMode)[keyof typeof DeliveryMode]


export const Status: {
  GENERATED: 'GENERATED',
  REVIEWED: 'REVIEWED',
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  DECLINED: 'DECLINED',
  CONFIRMED: 'CONFIRMED',
  CANCELLED: 'CANCELLED'
};

export type Status = (typeof Status)[keyof typeof Status]


export const Role: {
  PM: 'PM',
  TRAINER: 'TRAINER'
};

export type Role = (typeof Role)[keyof typeof Role]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more FiscalYears
 * const fiscalYears = await prisma.fiscalYear.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more FiscalYears
   * const fiscalYears = await prisma.fiscalYear.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.fiscalYear`: Exposes CRUD operations for the **FiscalYear** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FiscalYears
    * const fiscalYears = await prisma.fiscalYear.findMany()
    * ```
    */
  get fiscalYear(): Prisma.FiscalYearDelegate<GlobalReject>;

  /**
   * `prisma.programme`: Exposes CRUD operations for the **Programme** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Programmes
    * const programmes = await prisma.programme.findMany()
    * ```
    */
  get programme(): Prisma.ProgrammeDelegate<GlobalReject>;

  /**
   * `prisma.course`: Exposes CRUD operations for the **Course** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.course.findMany()
    * ```
    */
  get course(): Prisma.CourseDelegate<GlobalReject>;

  /**
   * `prisma.courseConfig`: Exposes CRUD operations for the **CourseConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CourseConfigs
    * const courseConfigs = await prisma.courseConfig.findMany()
    * ```
    */
  get courseConfig(): Prisma.CourseConfigDelegate<GlobalReject>;

  /**
   * `prisma.courseRun`: Exposes CRUD operations for the **CourseRun** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CourseRuns
    * const courseRuns = await prisma.courseRun.findMany()
    * ```
    */
  get courseRun(): Prisma.CourseRunDelegate<GlobalReject>;

  /**
   * `prisma.courseSegment`: Exposes CRUD operations for the **CourseSegment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CourseSegments
    * const courseSegments = await prisma.courseSegment.findMany()
    * ```
    */
  get courseSegment(): Prisma.CourseSegmentDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.assignment`: Exposes CRUD operations for the **Assignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Assignments
    * const assignments = await prisma.assignment.findMany()
    * ```
    */
  get assignment(): Prisma.AssignmentDelegate<GlobalReject>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Prisma Client JS version: 3.15.2
   * Query Engine version: 461d6a05159055555eb7dfb337c9fb271cbd4d7e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    FiscalYear: 'FiscalYear',
    Programme: 'Programme',
    Course: 'Course',
    CourseConfig: 'CourseConfig',
    CourseRun: 'CourseRun',
    CourseSegment: 'CourseSegment',
    User: 'User',
    Assignment: 'Assignment',
    Notification: 'Notification'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type FiscalYearCountOutputType
   */


  export type FiscalYearCountOutputType = {
    CourseConfig: number
  }

  export type FiscalYearCountOutputTypeSelect = {
    CourseConfig?: boolean
  }

  export type FiscalYearCountOutputTypeGetPayload<
    S extends boolean | null | undefined | FiscalYearCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? FiscalYearCountOutputType
    : S extends undefined
    ? never
    : S extends FiscalYearCountOutputTypeArgs
    ?'include' extends U
    ? FiscalYearCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof FiscalYearCountOutputType ? FiscalYearCountOutputType[P] : never
  } 
    : FiscalYearCountOutputType
  : FiscalYearCountOutputType




  // Custom InputTypes

  /**
   * FiscalYearCountOutputType without action
   */
  export type FiscalYearCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the FiscalYearCountOutputType
     * 
    **/
    select?: FiscalYearCountOutputTypeSelect | null
  }



  /**
   * Count Type ProgrammeCountOutputType
   */


  export type ProgrammeCountOutputType = {
    Course: number
  }

  export type ProgrammeCountOutputTypeSelect = {
    Course?: boolean
  }

  export type ProgrammeCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ProgrammeCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ProgrammeCountOutputType
    : S extends undefined
    ? never
    : S extends ProgrammeCountOutputTypeArgs
    ?'include' extends U
    ? ProgrammeCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ProgrammeCountOutputType ? ProgrammeCountOutputType[P] : never
  } 
    : ProgrammeCountOutputType
  : ProgrammeCountOutputType




  // Custom InputTypes

  /**
   * ProgrammeCountOutputType without action
   */
  export type ProgrammeCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProgrammeCountOutputType
     * 
    **/
    select?: ProgrammeCountOutputTypeSelect | null
  }



  /**
   * Count Type CourseCountOutputType
   */


  export type CourseCountOutputType = {
    CourseConfig: number
  }

  export type CourseCountOutputTypeSelect = {
    CourseConfig?: boolean
  }

  export type CourseCountOutputTypeGetPayload<
    S extends boolean | null | undefined | CourseCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? CourseCountOutputType
    : S extends undefined
    ? never
    : S extends CourseCountOutputTypeArgs
    ?'include' extends U
    ? CourseCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CourseCountOutputType ? CourseCountOutputType[P] : never
  } 
    : CourseCountOutputType
  : CourseCountOutputType




  // Custom InputTypes

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CourseCountOutputType
     * 
    **/
    select?: CourseCountOutputTypeSelect | null
  }



  /**
   * Count Type CourseConfigCountOutputType
   */


  export type CourseConfigCountOutputType = {
    CourseRun: number
  }

  export type CourseConfigCountOutputTypeSelect = {
    CourseRun?: boolean
  }

  export type CourseConfigCountOutputTypeGetPayload<
    S extends boolean | null | undefined | CourseConfigCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? CourseConfigCountOutputType
    : S extends undefined
    ? never
    : S extends CourseConfigCountOutputTypeArgs
    ?'include' extends U
    ? CourseConfigCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CourseConfigCountOutputType ? CourseConfigCountOutputType[P] : never
  } 
    : CourseConfigCountOutputType
  : CourseConfigCountOutputType




  // Custom InputTypes

  /**
   * CourseConfigCountOutputType without action
   */
  export type CourseConfigCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CourseConfigCountOutputType
     * 
    **/
    select?: CourseConfigCountOutputTypeSelect | null
  }



  /**
   * Count Type CourseRunCountOutputType
   */


  export type CourseRunCountOutputType = {
    CourseSegment: number
  }

  export type CourseRunCountOutputTypeSelect = {
    CourseSegment?: boolean
  }

  export type CourseRunCountOutputTypeGetPayload<
    S extends boolean | null | undefined | CourseRunCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? CourseRunCountOutputType
    : S extends undefined
    ? never
    : S extends CourseRunCountOutputTypeArgs
    ?'include' extends U
    ? CourseRunCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CourseRunCountOutputType ? CourseRunCountOutputType[P] : never
  } 
    : CourseRunCountOutputType
  : CourseRunCountOutputType




  // Custom InputTypes

  /**
   * CourseRunCountOutputType without action
   */
  export type CourseRunCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CourseRunCountOutputType
     * 
    **/
    select?: CourseRunCountOutputTypeSelect | null
  }



  /**
   * Count Type CourseSegmentCountOutputType
   */


  export type CourseSegmentCountOutputType = {
    Assignment: number
  }

  export type CourseSegmentCountOutputTypeSelect = {
    Assignment?: boolean
  }

  export type CourseSegmentCountOutputTypeGetPayload<
    S extends boolean | null | undefined | CourseSegmentCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? CourseSegmentCountOutputType
    : S extends undefined
    ? never
    : S extends CourseSegmentCountOutputTypeArgs
    ?'include' extends U
    ? CourseSegmentCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CourseSegmentCountOutputType ? CourseSegmentCountOutputType[P] : never
  } 
    : CourseSegmentCountOutputType
  : CourseSegmentCountOutputType




  // Custom InputTypes

  /**
   * CourseSegmentCountOutputType without action
   */
  export type CourseSegmentCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CourseSegmentCountOutputType
     * 
    **/
    select?: CourseSegmentCountOutputTypeSelect | null
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    Assignment: number
  }

  export type UserCountOutputTypeSelect = {
    Assignment?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type AssignmentCountOutputType
   */


  export type AssignmentCountOutputType = {
    Notification: number
  }

  export type AssignmentCountOutputTypeSelect = {
    Notification?: boolean
  }

  export type AssignmentCountOutputTypeGetPayload<
    S extends boolean | null | undefined | AssignmentCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? AssignmentCountOutputType
    : S extends undefined
    ? never
    : S extends AssignmentCountOutputTypeArgs
    ?'include' extends U
    ? AssignmentCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof AssignmentCountOutputType ? AssignmentCountOutputType[P] : never
  } 
    : AssignmentCountOutputType
  : AssignmentCountOutputType




  // Custom InputTypes

  /**
   * AssignmentCountOutputType without action
   */
  export type AssignmentCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AssignmentCountOutputType
     * 
    **/
    select?: AssignmentCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model FiscalYear
   */


  export type AggregateFiscalYear = {
    _count: FiscalYearCountAggregateOutputType | null
    _avg: FiscalYearAvgAggregateOutputType | null
    _sum: FiscalYearSumAggregateOutputType | null
    _min: FiscalYearMinAggregateOutputType | null
    _max: FiscalYearMaxAggregateOutputType | null
  }

  export type FiscalYearAvgAggregateOutputType = {
    revenue_target: number | null
    day_limit: number | null
  }

  export type FiscalYearSumAggregateOutputType = {
    revenue_target: number | null
    day_limit: number | null
  }

  export type FiscalYearMinAggregateOutputType = {
    fy: string | null
    revenue_target: number | null
    day_limit: number | null
  }

  export type FiscalYearMaxAggregateOutputType = {
    fy: string | null
    revenue_target: number | null
    day_limit: number | null
  }

  export type FiscalYearCountAggregateOutputType = {
    fy: number
    revenue_target: number
    day_limit: number
    blackout_dates: number
    low_manpower_dates: number
    _all: number
  }


  export type FiscalYearAvgAggregateInputType = {
    revenue_target?: true
    day_limit?: true
  }

  export type FiscalYearSumAggregateInputType = {
    revenue_target?: true
    day_limit?: true
  }

  export type FiscalYearMinAggregateInputType = {
    fy?: true
    revenue_target?: true
    day_limit?: true
  }

  export type FiscalYearMaxAggregateInputType = {
    fy?: true
    revenue_target?: true
    day_limit?: true
  }

  export type FiscalYearCountAggregateInputType = {
    fy?: true
    revenue_target?: true
    day_limit?: true
    blackout_dates?: true
    low_manpower_dates?: true
    _all?: true
  }

  export type FiscalYearAggregateArgs = {
    /**
     * Filter which FiscalYear to aggregate.
     * 
    **/
    where?: FiscalYearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FiscalYears to fetch.
     * 
    **/
    orderBy?: Enumerable<FiscalYearOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: FiscalYearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FiscalYears from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FiscalYears.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FiscalYears
    **/
    _count?: true | FiscalYearCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FiscalYearAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FiscalYearSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FiscalYearMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FiscalYearMaxAggregateInputType
  }

  export type GetFiscalYearAggregateType<T extends FiscalYearAggregateArgs> = {
        [P in keyof T & keyof AggregateFiscalYear]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFiscalYear[P]>
      : GetScalarType<T[P], AggregateFiscalYear[P]>
  }




  export type FiscalYearGroupByArgs = {
    where?: FiscalYearWhereInput
    orderBy?: Enumerable<FiscalYearOrderByWithAggregationInput>
    by: Array<FiscalYearScalarFieldEnum>
    having?: FiscalYearScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FiscalYearCountAggregateInputType | true
    _avg?: FiscalYearAvgAggregateInputType
    _sum?: FiscalYearSumAggregateInputType
    _min?: FiscalYearMinAggregateInputType
    _max?: FiscalYearMaxAggregateInputType
  }


  export type FiscalYearGroupByOutputType = {
    fy: string
    revenue_target: number | null
    day_limit: number | null
    blackout_dates: JsonValue | null
    low_manpower_dates: JsonValue | null
    _count: FiscalYearCountAggregateOutputType | null
    _avg: FiscalYearAvgAggregateOutputType | null
    _sum: FiscalYearSumAggregateOutputType | null
    _min: FiscalYearMinAggregateOutputType | null
    _max: FiscalYearMaxAggregateOutputType | null
  }

  type GetFiscalYearGroupByPayload<T extends FiscalYearGroupByArgs> = PrismaPromise<
    Array<
      PickArray<FiscalYearGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FiscalYearGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FiscalYearGroupByOutputType[P]>
            : GetScalarType<T[P], FiscalYearGroupByOutputType[P]>
        }
      >
    >


  export type FiscalYearSelect = {
    fy?: boolean
    revenue_target?: boolean
    day_limit?: boolean
    blackout_dates?: boolean
    low_manpower_dates?: boolean
    CourseConfig?: boolean | CourseConfigFindManyArgs
    _count?: boolean | FiscalYearCountOutputTypeArgs
  }

  export type FiscalYearInclude = {
    CourseConfig?: boolean | CourseConfigFindManyArgs
    _count?: boolean | FiscalYearCountOutputTypeArgs
  }

  export type FiscalYearGetPayload<
    S extends boolean | null | undefined | FiscalYearArgs,
    U = keyof S
      > = S extends true
        ? FiscalYear
    : S extends undefined
    ? never
    : S extends FiscalYearArgs | FiscalYearFindManyArgs
    ?'include' extends U
    ? FiscalYear  & {
    [P in TrueKeys<S['include']>]:
        P extends 'CourseConfig' ? Array < CourseConfigGetPayload<S['include'][P]>>  :
        P extends '_count' ? FiscalYearCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'CourseConfig' ? Array < CourseConfigGetPayload<S['select'][P]>>  :
        P extends '_count' ? FiscalYearCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof FiscalYear ? FiscalYear[P] : never
  } 
    : FiscalYear
  : FiscalYear


  type FiscalYearCountArgs = Merge<
    Omit<FiscalYearFindManyArgs, 'select' | 'include'> & {
      select?: FiscalYearCountAggregateInputType | true
    }
  >

  export interface FiscalYearDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one FiscalYear that matches the filter.
     * @param {FiscalYearFindUniqueArgs} args - Arguments to find a FiscalYear
     * @example
     * // Get one FiscalYear
     * const fiscalYear = await prisma.fiscalYear.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FiscalYearFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FiscalYearFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FiscalYear'> extends True ? CheckSelect<T, Prisma__FiscalYearClient<FiscalYear>, Prisma__FiscalYearClient<FiscalYearGetPayload<T>>> : CheckSelect<T, Prisma__FiscalYearClient<FiscalYear | null >, Prisma__FiscalYearClient<FiscalYearGetPayload<T> | null >>

    /**
     * Find the first FiscalYear that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FiscalYearFindFirstArgs} args - Arguments to find a FiscalYear
     * @example
     * // Get one FiscalYear
     * const fiscalYear = await prisma.fiscalYear.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FiscalYearFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FiscalYearFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FiscalYear'> extends True ? CheckSelect<T, Prisma__FiscalYearClient<FiscalYear>, Prisma__FiscalYearClient<FiscalYearGetPayload<T>>> : CheckSelect<T, Prisma__FiscalYearClient<FiscalYear | null >, Prisma__FiscalYearClient<FiscalYearGetPayload<T> | null >>

    /**
     * Find zero or more FiscalYears that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FiscalYearFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FiscalYears
     * const fiscalYears = await prisma.fiscalYear.findMany()
     * 
     * // Get first 10 FiscalYears
     * const fiscalYears = await prisma.fiscalYear.findMany({ take: 10 })
     * 
     * // Only select the `fy`
     * const fiscalYearWithFyOnly = await prisma.fiscalYear.findMany({ select: { fy: true } })
     * 
    **/
    findMany<T extends FiscalYearFindManyArgs>(
      args?: SelectSubset<T, FiscalYearFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<FiscalYear>>, PrismaPromise<Array<FiscalYearGetPayload<T>>>>

    /**
     * Create a FiscalYear.
     * @param {FiscalYearCreateArgs} args - Arguments to create a FiscalYear.
     * @example
     * // Create one FiscalYear
     * const FiscalYear = await prisma.fiscalYear.create({
     *   data: {
     *     // ... data to create a FiscalYear
     *   }
     * })
     * 
    **/
    create<T extends FiscalYearCreateArgs>(
      args: SelectSubset<T, FiscalYearCreateArgs>
    ): CheckSelect<T, Prisma__FiscalYearClient<FiscalYear>, Prisma__FiscalYearClient<FiscalYearGetPayload<T>>>

    /**
     * Create many FiscalYears.
     *     @param {FiscalYearCreateManyArgs} args - Arguments to create many FiscalYears.
     *     @example
     *     // Create many FiscalYears
     *     const fiscalYear = await prisma.fiscalYear.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FiscalYearCreateManyArgs>(
      args?: SelectSubset<T, FiscalYearCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a FiscalYear.
     * @param {FiscalYearDeleteArgs} args - Arguments to delete one FiscalYear.
     * @example
     * // Delete one FiscalYear
     * const FiscalYear = await prisma.fiscalYear.delete({
     *   where: {
     *     // ... filter to delete one FiscalYear
     *   }
     * })
     * 
    **/
    delete<T extends FiscalYearDeleteArgs>(
      args: SelectSubset<T, FiscalYearDeleteArgs>
    ): CheckSelect<T, Prisma__FiscalYearClient<FiscalYear>, Prisma__FiscalYearClient<FiscalYearGetPayload<T>>>

    /**
     * Update one FiscalYear.
     * @param {FiscalYearUpdateArgs} args - Arguments to update one FiscalYear.
     * @example
     * // Update one FiscalYear
     * const fiscalYear = await prisma.fiscalYear.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FiscalYearUpdateArgs>(
      args: SelectSubset<T, FiscalYearUpdateArgs>
    ): CheckSelect<T, Prisma__FiscalYearClient<FiscalYear>, Prisma__FiscalYearClient<FiscalYearGetPayload<T>>>

    /**
     * Delete zero or more FiscalYears.
     * @param {FiscalYearDeleteManyArgs} args - Arguments to filter FiscalYears to delete.
     * @example
     * // Delete a few FiscalYears
     * const { count } = await prisma.fiscalYear.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FiscalYearDeleteManyArgs>(
      args?: SelectSubset<T, FiscalYearDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more FiscalYears.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FiscalYearUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FiscalYears
     * const fiscalYear = await prisma.fiscalYear.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FiscalYearUpdateManyArgs>(
      args: SelectSubset<T, FiscalYearUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one FiscalYear.
     * @param {FiscalYearUpsertArgs} args - Arguments to update or create a FiscalYear.
     * @example
     * // Update or create a FiscalYear
     * const fiscalYear = await prisma.fiscalYear.upsert({
     *   create: {
     *     // ... data to create a FiscalYear
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FiscalYear we want to update
     *   }
     * })
    **/
    upsert<T extends FiscalYearUpsertArgs>(
      args: SelectSubset<T, FiscalYearUpsertArgs>
    ): CheckSelect<T, Prisma__FiscalYearClient<FiscalYear>, Prisma__FiscalYearClient<FiscalYearGetPayload<T>>>

    /**
     * Count the number of FiscalYears.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FiscalYearCountArgs} args - Arguments to filter FiscalYears to count.
     * @example
     * // Count the number of FiscalYears
     * const count = await prisma.fiscalYear.count({
     *   where: {
     *     // ... the filter for the FiscalYears we want to count
     *   }
     * })
    **/
    count<T extends FiscalYearCountArgs>(
      args?: Subset<T, FiscalYearCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FiscalYearCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FiscalYear.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FiscalYearAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FiscalYearAggregateArgs>(args: Subset<T, FiscalYearAggregateArgs>): PrismaPromise<GetFiscalYearAggregateType<T>>

    /**
     * Group by FiscalYear.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FiscalYearGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FiscalYearGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FiscalYearGroupByArgs['orderBy'] }
        : { orderBy?: FiscalYearGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FiscalYearGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFiscalYearGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for FiscalYear.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FiscalYearClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    CourseConfig<T extends CourseConfigFindManyArgs = {}>(args?: Subset<T, CourseConfigFindManyArgs>): CheckSelect<T, PrismaPromise<Array<CourseConfig>>, PrismaPromise<Array<CourseConfigGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * FiscalYear findUnique
   */
  export type FiscalYearFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the FiscalYear
     * 
    **/
    select?: FiscalYearSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FiscalYearInclude | null
    /**
     * Throw an Error if a FiscalYear can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which FiscalYear to fetch.
     * 
    **/
    where: FiscalYearWhereUniqueInput
  }


  /**
   * FiscalYear findFirst
   */
  export type FiscalYearFindFirstArgs = {
    /**
     * Select specific fields to fetch from the FiscalYear
     * 
    **/
    select?: FiscalYearSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FiscalYearInclude | null
    /**
     * Throw an Error if a FiscalYear can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which FiscalYear to fetch.
     * 
    **/
    where?: FiscalYearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FiscalYears to fetch.
     * 
    **/
    orderBy?: Enumerable<FiscalYearOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FiscalYears.
     * 
    **/
    cursor?: FiscalYearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FiscalYears from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FiscalYears.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FiscalYears.
     * 
    **/
    distinct?: Enumerable<FiscalYearScalarFieldEnum>
  }


  /**
   * FiscalYear findMany
   */
  export type FiscalYearFindManyArgs = {
    /**
     * Select specific fields to fetch from the FiscalYear
     * 
    **/
    select?: FiscalYearSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FiscalYearInclude | null
    /**
     * Filter, which FiscalYears to fetch.
     * 
    **/
    where?: FiscalYearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FiscalYears to fetch.
     * 
    **/
    orderBy?: Enumerable<FiscalYearOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FiscalYears.
     * 
    **/
    cursor?: FiscalYearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FiscalYears from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FiscalYears.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FiscalYearScalarFieldEnum>
  }


  /**
   * FiscalYear create
   */
  export type FiscalYearCreateArgs = {
    /**
     * Select specific fields to fetch from the FiscalYear
     * 
    **/
    select?: FiscalYearSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FiscalYearInclude | null
    /**
     * The data needed to create a FiscalYear.
     * 
    **/
    data: XOR<FiscalYearCreateInput, FiscalYearUncheckedCreateInput>
  }


  /**
   * FiscalYear createMany
   */
  export type FiscalYearCreateManyArgs = {
    /**
     * The data used to create many FiscalYears.
     * 
    **/
    data: Enumerable<FiscalYearCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FiscalYear update
   */
  export type FiscalYearUpdateArgs = {
    /**
     * Select specific fields to fetch from the FiscalYear
     * 
    **/
    select?: FiscalYearSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FiscalYearInclude | null
    /**
     * The data needed to update a FiscalYear.
     * 
    **/
    data: XOR<FiscalYearUpdateInput, FiscalYearUncheckedUpdateInput>
    /**
     * Choose, which FiscalYear to update.
     * 
    **/
    where: FiscalYearWhereUniqueInput
  }


  /**
   * FiscalYear updateMany
   */
  export type FiscalYearUpdateManyArgs = {
    /**
     * The data used to update FiscalYears.
     * 
    **/
    data: XOR<FiscalYearUpdateManyMutationInput, FiscalYearUncheckedUpdateManyInput>
    /**
     * Filter which FiscalYears to update
     * 
    **/
    where?: FiscalYearWhereInput
  }


  /**
   * FiscalYear upsert
   */
  export type FiscalYearUpsertArgs = {
    /**
     * Select specific fields to fetch from the FiscalYear
     * 
    **/
    select?: FiscalYearSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FiscalYearInclude | null
    /**
     * The filter to search for the FiscalYear to update in case it exists.
     * 
    **/
    where: FiscalYearWhereUniqueInput
    /**
     * In case the FiscalYear found by the `where` argument doesn't exist, create a new FiscalYear with this data.
     * 
    **/
    create: XOR<FiscalYearCreateInput, FiscalYearUncheckedCreateInput>
    /**
     * In case the FiscalYear was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<FiscalYearUpdateInput, FiscalYearUncheckedUpdateInput>
  }


  /**
   * FiscalYear delete
   */
  export type FiscalYearDeleteArgs = {
    /**
     * Select specific fields to fetch from the FiscalYear
     * 
    **/
    select?: FiscalYearSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FiscalYearInclude | null
    /**
     * Filter which FiscalYear to delete.
     * 
    **/
    where: FiscalYearWhereUniqueInput
  }


  /**
   * FiscalYear deleteMany
   */
  export type FiscalYearDeleteManyArgs = {
    /**
     * Filter which FiscalYears to delete
     * 
    **/
    where?: FiscalYearWhereInput
  }


  /**
   * FiscalYear without action
   */
  export type FiscalYearArgs = {
    /**
     * Select specific fields to fetch from the FiscalYear
     * 
    **/
    select?: FiscalYearSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FiscalYearInclude | null
  }



  /**
   * Model Programme
   */


  export type AggregateProgramme = {
    _count: ProgrammeCountAggregateOutputType | null
    _min: ProgrammeMinAggregateOutputType | null
    _max: ProgrammeMaxAggregateOutputType | null
  }

  export type ProgrammeMinAggregateOutputType = {
    programme_name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProgrammeMaxAggregateOutputType = {
    programme_name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProgrammeCountAggregateOutputType = {
    programme_name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProgrammeMinAggregateInputType = {
    programme_name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProgrammeMaxAggregateInputType = {
    programme_name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProgrammeCountAggregateInputType = {
    programme_name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProgrammeAggregateArgs = {
    /**
     * Filter which Programme to aggregate.
     * 
    **/
    where?: ProgrammeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Programmes to fetch.
     * 
    **/
    orderBy?: Enumerable<ProgrammeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProgrammeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Programmes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Programmes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Programmes
    **/
    _count?: true | ProgrammeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProgrammeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProgrammeMaxAggregateInputType
  }

  export type GetProgrammeAggregateType<T extends ProgrammeAggregateArgs> = {
        [P in keyof T & keyof AggregateProgramme]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProgramme[P]>
      : GetScalarType<T[P], AggregateProgramme[P]>
  }




  export type ProgrammeGroupByArgs = {
    where?: ProgrammeWhereInput
    orderBy?: Enumerable<ProgrammeOrderByWithAggregationInput>
    by: Array<ProgrammeScalarFieldEnum>
    having?: ProgrammeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProgrammeCountAggregateInputType | true
    _min?: ProgrammeMinAggregateInputType
    _max?: ProgrammeMaxAggregateInputType
  }


  export type ProgrammeGroupByOutputType = {
    programme_name: string
    createdAt: Date | null
    updatedAt: Date | null
    _count: ProgrammeCountAggregateOutputType | null
    _min: ProgrammeMinAggregateOutputType | null
    _max: ProgrammeMaxAggregateOutputType | null
  }

  type GetProgrammeGroupByPayload<T extends ProgrammeGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProgrammeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProgrammeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProgrammeGroupByOutputType[P]>
            : GetScalarType<T[P], ProgrammeGroupByOutputType[P]>
        }
      >
    >


  export type ProgrammeSelect = {
    programme_name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Course?: boolean | CourseFindManyArgs
    _count?: boolean | ProgrammeCountOutputTypeArgs
  }

  export type ProgrammeInclude = {
    Course?: boolean | CourseFindManyArgs
    _count?: boolean | ProgrammeCountOutputTypeArgs
  }

  export type ProgrammeGetPayload<
    S extends boolean | null | undefined | ProgrammeArgs,
    U = keyof S
      > = S extends true
        ? Programme
    : S extends undefined
    ? never
    : S extends ProgrammeArgs | ProgrammeFindManyArgs
    ?'include' extends U
    ? Programme  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Course' ? Array < CourseGetPayload<S['include'][P]>>  :
        P extends '_count' ? ProgrammeCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Course' ? Array < CourseGetPayload<S['select'][P]>>  :
        P extends '_count' ? ProgrammeCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Programme ? Programme[P] : never
  } 
    : Programme
  : Programme


  type ProgrammeCountArgs = Merge<
    Omit<ProgrammeFindManyArgs, 'select' | 'include'> & {
      select?: ProgrammeCountAggregateInputType | true
    }
  >

  export interface ProgrammeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Programme that matches the filter.
     * @param {ProgrammeFindUniqueArgs} args - Arguments to find a Programme
     * @example
     * // Get one Programme
     * const programme = await prisma.programme.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProgrammeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProgrammeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Programme'> extends True ? CheckSelect<T, Prisma__ProgrammeClient<Programme>, Prisma__ProgrammeClient<ProgrammeGetPayload<T>>> : CheckSelect<T, Prisma__ProgrammeClient<Programme | null >, Prisma__ProgrammeClient<ProgrammeGetPayload<T> | null >>

    /**
     * Find the first Programme that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgrammeFindFirstArgs} args - Arguments to find a Programme
     * @example
     * // Get one Programme
     * const programme = await prisma.programme.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProgrammeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProgrammeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Programme'> extends True ? CheckSelect<T, Prisma__ProgrammeClient<Programme>, Prisma__ProgrammeClient<ProgrammeGetPayload<T>>> : CheckSelect<T, Prisma__ProgrammeClient<Programme | null >, Prisma__ProgrammeClient<ProgrammeGetPayload<T> | null >>

    /**
     * Find zero or more Programmes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgrammeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Programmes
     * const programmes = await prisma.programme.findMany()
     * 
     * // Get first 10 Programmes
     * const programmes = await prisma.programme.findMany({ take: 10 })
     * 
     * // Only select the `programme_name`
     * const programmeWithProgramme_nameOnly = await prisma.programme.findMany({ select: { programme_name: true } })
     * 
    **/
    findMany<T extends ProgrammeFindManyArgs>(
      args?: SelectSubset<T, ProgrammeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Programme>>, PrismaPromise<Array<ProgrammeGetPayload<T>>>>

    /**
     * Create a Programme.
     * @param {ProgrammeCreateArgs} args - Arguments to create a Programme.
     * @example
     * // Create one Programme
     * const Programme = await prisma.programme.create({
     *   data: {
     *     // ... data to create a Programme
     *   }
     * })
     * 
    **/
    create<T extends ProgrammeCreateArgs>(
      args: SelectSubset<T, ProgrammeCreateArgs>
    ): CheckSelect<T, Prisma__ProgrammeClient<Programme>, Prisma__ProgrammeClient<ProgrammeGetPayload<T>>>

    /**
     * Create many Programmes.
     *     @param {ProgrammeCreateManyArgs} args - Arguments to create many Programmes.
     *     @example
     *     // Create many Programmes
     *     const programme = await prisma.programme.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProgrammeCreateManyArgs>(
      args?: SelectSubset<T, ProgrammeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Programme.
     * @param {ProgrammeDeleteArgs} args - Arguments to delete one Programme.
     * @example
     * // Delete one Programme
     * const Programme = await prisma.programme.delete({
     *   where: {
     *     // ... filter to delete one Programme
     *   }
     * })
     * 
    **/
    delete<T extends ProgrammeDeleteArgs>(
      args: SelectSubset<T, ProgrammeDeleteArgs>
    ): CheckSelect<T, Prisma__ProgrammeClient<Programme>, Prisma__ProgrammeClient<ProgrammeGetPayload<T>>>

    /**
     * Update one Programme.
     * @param {ProgrammeUpdateArgs} args - Arguments to update one Programme.
     * @example
     * // Update one Programme
     * const programme = await prisma.programme.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProgrammeUpdateArgs>(
      args: SelectSubset<T, ProgrammeUpdateArgs>
    ): CheckSelect<T, Prisma__ProgrammeClient<Programme>, Prisma__ProgrammeClient<ProgrammeGetPayload<T>>>

    /**
     * Delete zero or more Programmes.
     * @param {ProgrammeDeleteManyArgs} args - Arguments to filter Programmes to delete.
     * @example
     * // Delete a few Programmes
     * const { count } = await prisma.programme.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProgrammeDeleteManyArgs>(
      args?: SelectSubset<T, ProgrammeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Programmes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgrammeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Programmes
     * const programme = await prisma.programme.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProgrammeUpdateManyArgs>(
      args: SelectSubset<T, ProgrammeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Programme.
     * @param {ProgrammeUpsertArgs} args - Arguments to update or create a Programme.
     * @example
     * // Update or create a Programme
     * const programme = await prisma.programme.upsert({
     *   create: {
     *     // ... data to create a Programme
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Programme we want to update
     *   }
     * })
    **/
    upsert<T extends ProgrammeUpsertArgs>(
      args: SelectSubset<T, ProgrammeUpsertArgs>
    ): CheckSelect<T, Prisma__ProgrammeClient<Programme>, Prisma__ProgrammeClient<ProgrammeGetPayload<T>>>

    /**
     * Count the number of Programmes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgrammeCountArgs} args - Arguments to filter Programmes to count.
     * @example
     * // Count the number of Programmes
     * const count = await prisma.programme.count({
     *   where: {
     *     // ... the filter for the Programmes we want to count
     *   }
     * })
    **/
    count<T extends ProgrammeCountArgs>(
      args?: Subset<T, ProgrammeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProgrammeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Programme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgrammeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProgrammeAggregateArgs>(args: Subset<T, ProgrammeAggregateArgs>): PrismaPromise<GetProgrammeAggregateType<T>>

    /**
     * Group by Programme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgrammeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProgrammeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProgrammeGroupByArgs['orderBy'] }
        : { orderBy?: ProgrammeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProgrammeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProgrammeGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Programme.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProgrammeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Course<T extends CourseFindManyArgs = {}>(args?: Subset<T, CourseFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Course>>, PrismaPromise<Array<CourseGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Programme findUnique
   */
  export type ProgrammeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Programme
     * 
    **/
    select?: ProgrammeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProgrammeInclude | null
    /**
     * Throw an Error if a Programme can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Programme to fetch.
     * 
    **/
    where: ProgrammeWhereUniqueInput
  }


  /**
   * Programme findFirst
   */
  export type ProgrammeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Programme
     * 
    **/
    select?: ProgrammeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProgrammeInclude | null
    /**
     * Throw an Error if a Programme can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Programme to fetch.
     * 
    **/
    where?: ProgrammeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Programmes to fetch.
     * 
    **/
    orderBy?: Enumerable<ProgrammeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Programmes.
     * 
    **/
    cursor?: ProgrammeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Programmes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Programmes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Programmes.
     * 
    **/
    distinct?: Enumerable<ProgrammeScalarFieldEnum>
  }


  /**
   * Programme findMany
   */
  export type ProgrammeFindManyArgs = {
    /**
     * Select specific fields to fetch from the Programme
     * 
    **/
    select?: ProgrammeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProgrammeInclude | null
    /**
     * Filter, which Programmes to fetch.
     * 
    **/
    where?: ProgrammeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Programmes to fetch.
     * 
    **/
    orderBy?: Enumerable<ProgrammeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Programmes.
     * 
    **/
    cursor?: ProgrammeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Programmes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Programmes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProgrammeScalarFieldEnum>
  }


  /**
   * Programme create
   */
  export type ProgrammeCreateArgs = {
    /**
     * Select specific fields to fetch from the Programme
     * 
    **/
    select?: ProgrammeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProgrammeInclude | null
    /**
     * The data needed to create a Programme.
     * 
    **/
    data: XOR<ProgrammeCreateInput, ProgrammeUncheckedCreateInput>
  }


  /**
   * Programme createMany
   */
  export type ProgrammeCreateManyArgs = {
    /**
     * The data used to create many Programmes.
     * 
    **/
    data: Enumerable<ProgrammeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Programme update
   */
  export type ProgrammeUpdateArgs = {
    /**
     * Select specific fields to fetch from the Programme
     * 
    **/
    select?: ProgrammeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProgrammeInclude | null
    /**
     * The data needed to update a Programme.
     * 
    **/
    data: XOR<ProgrammeUpdateInput, ProgrammeUncheckedUpdateInput>
    /**
     * Choose, which Programme to update.
     * 
    **/
    where: ProgrammeWhereUniqueInput
  }


  /**
   * Programme updateMany
   */
  export type ProgrammeUpdateManyArgs = {
    /**
     * The data used to update Programmes.
     * 
    **/
    data: XOR<ProgrammeUpdateManyMutationInput, ProgrammeUncheckedUpdateManyInput>
    /**
     * Filter which Programmes to update
     * 
    **/
    where?: ProgrammeWhereInput
  }


  /**
   * Programme upsert
   */
  export type ProgrammeUpsertArgs = {
    /**
     * Select specific fields to fetch from the Programme
     * 
    **/
    select?: ProgrammeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProgrammeInclude | null
    /**
     * The filter to search for the Programme to update in case it exists.
     * 
    **/
    where: ProgrammeWhereUniqueInput
    /**
     * In case the Programme found by the `where` argument doesn't exist, create a new Programme with this data.
     * 
    **/
    create: XOR<ProgrammeCreateInput, ProgrammeUncheckedCreateInput>
    /**
     * In case the Programme was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProgrammeUpdateInput, ProgrammeUncheckedUpdateInput>
  }


  /**
   * Programme delete
   */
  export type ProgrammeDeleteArgs = {
    /**
     * Select specific fields to fetch from the Programme
     * 
    **/
    select?: ProgrammeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProgrammeInclude | null
    /**
     * Filter which Programme to delete.
     * 
    **/
    where: ProgrammeWhereUniqueInput
  }


  /**
   * Programme deleteMany
   */
  export type ProgrammeDeleteManyArgs = {
    /**
     * Filter which Programmes to delete
     * 
    **/
    where?: ProgrammeWhereInput
  }


  /**
   * Programme without action
   */
  export type ProgrammeArgs = {
    /**
     * Select specific fields to fetch from the Programme
     * 
    **/
    select?: ProgrammeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProgrammeInclude | null
  }



  /**
   * Model Course
   */


  export type AggregateCourse = {
    _count: CourseCountAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  export type CourseMinAggregateOutputType = {
    course_name: string | null
    programme_name: string | null
    course_code: string | null
    delivery_mode: DeliveryMode | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CourseMaxAggregateOutputType = {
    course_name: string | null
    programme_name: string | null
    course_code: string | null
    delivery_mode: DeliveryMode | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CourseCountAggregateOutputType = {
    course_name: number
    programme_name: number
    course_code: number
    delivery_mode: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CourseMinAggregateInputType = {
    course_name?: true
    programme_name?: true
    course_code?: true
    delivery_mode?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CourseMaxAggregateInputType = {
    course_name?: true
    programme_name?: true
    course_code?: true
    delivery_mode?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CourseCountAggregateInputType = {
    course_name?: true
    programme_name?: true
    course_code?: true
    delivery_mode?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CourseAggregateArgs = {
    /**
     * Filter which Course to aggregate.
     * 
    **/
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     * 
    **/
    orderBy?: Enumerable<CourseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Courses
    **/
    _count?: true | CourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseMaxAggregateInputType
  }

  export type GetCourseAggregateType<T extends CourseAggregateArgs> = {
        [P in keyof T & keyof AggregateCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourse[P]>
      : GetScalarType<T[P], AggregateCourse[P]>
  }




  export type CourseGroupByArgs = {
    where?: CourseWhereInput
    orderBy?: Enumerable<CourseOrderByWithAggregationInput>
    by: Array<CourseScalarFieldEnum>
    having?: CourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseCountAggregateInputType | true
    _min?: CourseMinAggregateInputType
    _max?: CourseMaxAggregateInputType
  }


  export type CourseGroupByOutputType = {
    course_name: string
    programme_name: string
    course_code: string
    delivery_mode: DeliveryMode
    createdAt: Date
    updatedAt: Date
    _count: CourseCountAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  type GetCourseGroupByPayload<T extends CourseGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseGroupByOutputType[P]>
            : GetScalarType<T[P], CourseGroupByOutputType[P]>
        }
      >
    >


  export type CourseSelect = {
    course_name?: boolean
    programme_name?: boolean
    course_code?: boolean
    delivery_mode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    CourseConfig?: boolean | CourseConfigFindManyArgs
    Programme?: boolean | ProgrammeArgs
    _count?: boolean | CourseCountOutputTypeArgs
  }

  export type CourseInclude = {
    CourseConfig?: boolean | CourseConfigFindManyArgs
    Programme?: boolean | ProgrammeArgs
    _count?: boolean | CourseCountOutputTypeArgs
  }

  export type CourseGetPayload<
    S extends boolean | null | undefined | CourseArgs,
    U = keyof S
      > = S extends true
        ? Course
    : S extends undefined
    ? never
    : S extends CourseArgs | CourseFindManyArgs
    ?'include' extends U
    ? Course  & {
    [P in TrueKeys<S['include']>]:
        P extends 'CourseConfig' ? Array < CourseConfigGetPayload<S['include'][P]>>  :
        P extends 'Programme' ? ProgrammeGetPayload<S['include'][P]> :
        P extends '_count' ? CourseCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'CourseConfig' ? Array < CourseConfigGetPayload<S['select'][P]>>  :
        P extends 'Programme' ? ProgrammeGetPayload<S['select'][P]> :
        P extends '_count' ? CourseCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Course ? Course[P] : never
  } 
    : Course
  : Course


  type CourseCountArgs = Merge<
    Omit<CourseFindManyArgs, 'select' | 'include'> & {
      select?: CourseCountAggregateInputType | true
    }
  >

  export interface CourseDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Course that matches the filter.
     * @param {CourseFindUniqueArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CourseFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CourseFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Course'> extends True ? CheckSelect<T, Prisma__CourseClient<Course>, Prisma__CourseClient<CourseGetPayload<T>>> : CheckSelect<T, Prisma__CourseClient<Course | null >, Prisma__CourseClient<CourseGetPayload<T> | null >>

    /**
     * Find the first Course that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CourseFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CourseFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Course'> extends True ? CheckSelect<T, Prisma__CourseClient<Course>, Prisma__CourseClient<CourseGetPayload<T>>> : CheckSelect<T, Prisma__CourseClient<Course | null >, Prisma__CourseClient<CourseGetPayload<T> | null >>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.course.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.course.findMany({ take: 10 })
     * 
     * // Only select the `course_name`
     * const courseWithCourse_nameOnly = await prisma.course.findMany({ select: { course_name: true } })
     * 
    **/
    findMany<T extends CourseFindManyArgs>(
      args?: SelectSubset<T, CourseFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Course>>, PrismaPromise<Array<CourseGetPayload<T>>>>

    /**
     * Create a Course.
     * @param {CourseCreateArgs} args - Arguments to create a Course.
     * @example
     * // Create one Course
     * const Course = await prisma.course.create({
     *   data: {
     *     // ... data to create a Course
     *   }
     * })
     * 
    **/
    create<T extends CourseCreateArgs>(
      args: SelectSubset<T, CourseCreateArgs>
    ): CheckSelect<T, Prisma__CourseClient<Course>, Prisma__CourseClient<CourseGetPayload<T>>>

    /**
     * Create many Courses.
     *     @param {CourseCreateManyArgs} args - Arguments to create many Courses.
     *     @example
     *     // Create many Courses
     *     const course = await prisma.course.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CourseCreateManyArgs>(
      args?: SelectSubset<T, CourseCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Course.
     * @param {CourseDeleteArgs} args - Arguments to delete one Course.
     * @example
     * // Delete one Course
     * const Course = await prisma.course.delete({
     *   where: {
     *     // ... filter to delete one Course
     *   }
     * })
     * 
    **/
    delete<T extends CourseDeleteArgs>(
      args: SelectSubset<T, CourseDeleteArgs>
    ): CheckSelect<T, Prisma__CourseClient<Course>, Prisma__CourseClient<CourseGetPayload<T>>>

    /**
     * Update one Course.
     * @param {CourseUpdateArgs} args - Arguments to update one Course.
     * @example
     * // Update one Course
     * const course = await prisma.course.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CourseUpdateArgs>(
      args: SelectSubset<T, CourseUpdateArgs>
    ): CheckSelect<T, Prisma__CourseClient<Course>, Prisma__CourseClient<CourseGetPayload<T>>>

    /**
     * Delete zero or more Courses.
     * @param {CourseDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.course.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CourseDeleteManyArgs>(
      args?: SelectSubset<T, CourseDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CourseUpdateManyArgs>(
      args: SelectSubset<T, CourseUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Course.
     * @param {CourseUpsertArgs} args - Arguments to update or create a Course.
     * @example
     * // Update or create a Course
     * const course = await prisma.course.upsert({
     *   create: {
     *     // ... data to create a Course
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Course we want to update
     *   }
     * })
    **/
    upsert<T extends CourseUpsertArgs>(
      args: SelectSubset<T, CourseUpsertArgs>
    ): CheckSelect<T, Prisma__CourseClient<Course>, Prisma__CourseClient<CourseGetPayload<T>>>

    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.course.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends CourseCountArgs>(
      args?: Subset<T, CourseCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseAggregateArgs>(args: Subset<T, CourseAggregateArgs>): PrismaPromise<GetCourseAggregateType<T>>

    /**
     * Group by Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseGroupByArgs['orderBy'] }
        : { orderBy?: CourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Course.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CourseClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    CourseConfig<T extends CourseConfigFindManyArgs = {}>(args?: Subset<T, CourseConfigFindManyArgs>): CheckSelect<T, PrismaPromise<Array<CourseConfig>>, PrismaPromise<Array<CourseConfigGetPayload<T>>>>;

    Programme<T extends ProgrammeArgs = {}>(args?: Subset<T, ProgrammeArgs>): CheckSelect<T, Prisma__ProgrammeClient<Programme | null >, Prisma__ProgrammeClient<ProgrammeGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Course findUnique
   */
  export type CourseFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Course
     * 
    **/
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseInclude | null
    /**
     * Throw an Error if a Course can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Course to fetch.
     * 
    **/
    where: CourseWhereUniqueInput
  }


  /**
   * Course findFirst
   */
  export type CourseFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Course
     * 
    **/
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseInclude | null
    /**
     * Throw an Error if a Course can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Course to fetch.
     * 
    **/
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     * 
    **/
    orderBy?: Enumerable<CourseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     * 
    **/
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     * 
    **/
    distinct?: Enumerable<CourseScalarFieldEnum>
  }


  /**
   * Course findMany
   */
  export type CourseFindManyArgs = {
    /**
     * Select specific fields to fetch from the Course
     * 
    **/
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseInclude | null
    /**
     * Filter, which Courses to fetch.
     * 
    **/
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     * 
    **/
    orderBy?: Enumerable<CourseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Courses.
     * 
    **/
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CourseScalarFieldEnum>
  }


  /**
   * Course create
   */
  export type CourseCreateArgs = {
    /**
     * Select specific fields to fetch from the Course
     * 
    **/
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseInclude | null
    /**
     * The data needed to create a Course.
     * 
    **/
    data: XOR<CourseCreateInput, CourseUncheckedCreateInput>
  }


  /**
   * Course createMany
   */
  export type CourseCreateManyArgs = {
    /**
     * The data used to create many Courses.
     * 
    **/
    data: Enumerable<CourseCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Course update
   */
  export type CourseUpdateArgs = {
    /**
     * Select specific fields to fetch from the Course
     * 
    **/
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseInclude | null
    /**
     * The data needed to update a Course.
     * 
    **/
    data: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
    /**
     * Choose, which Course to update.
     * 
    **/
    where: CourseWhereUniqueInput
  }


  /**
   * Course updateMany
   */
  export type CourseUpdateManyArgs = {
    /**
     * The data used to update Courses.
     * 
    **/
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     * 
    **/
    where?: CourseWhereInput
  }


  /**
   * Course upsert
   */
  export type CourseUpsertArgs = {
    /**
     * Select specific fields to fetch from the Course
     * 
    **/
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseInclude | null
    /**
     * The filter to search for the Course to update in case it exists.
     * 
    **/
    where: CourseWhereUniqueInput
    /**
     * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
     * 
    **/
    create: XOR<CourseCreateInput, CourseUncheckedCreateInput>
    /**
     * In case the Course was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
  }


  /**
   * Course delete
   */
  export type CourseDeleteArgs = {
    /**
     * Select specific fields to fetch from the Course
     * 
    **/
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseInclude | null
    /**
     * Filter which Course to delete.
     * 
    **/
    where: CourseWhereUniqueInput
  }


  /**
   * Course deleteMany
   */
  export type CourseDeleteManyArgs = {
    /**
     * Filter which Courses to delete
     * 
    **/
    where?: CourseWhereInput
  }


  /**
   * Course without action
   */
  export type CourseArgs = {
    /**
     * Select specific fields to fetch from the Course
     * 
    **/
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseInclude | null
  }



  /**
   * Model CourseConfig
   */


  export type AggregateCourseConfig = {
    _count: CourseConfigCountAggregateOutputType | null
    _avg: CourseConfigAvgAggregateOutputType | null
    _sum: CourseConfigSumAggregateOutputType | null
    _min: CourseConfigMinAggregateOutputType | null
    _max: CourseConfigMaxAggregateOutputType | null
  }

  export type CourseConfigAvgAggregateOutputType = {
    days_per_run: number | null
    runs_per_year: number | null
    course_fees: number | null
    days_to_avoid: number | null
    split: number | null
  }

  export type CourseConfigSumAggregateOutputType = {
    days_per_run: number | null
    runs_per_year: number | null
    course_fees: number | null
    days_to_avoid: number[] | null
    split: number[] | null
  }

  export type CourseConfigMinAggregateOutputType = {
    course_name: string | null
    fy: string | null
    days_per_run: number | null
    runs_per_year: number | null
    course_fees: number | null
    start_time: Date | null
    end_time: Date | null
    avoid_month_start: boolean | null
    avoid_month_end: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CourseConfigMaxAggregateOutputType = {
    course_name: string | null
    fy: string | null
    days_per_run: number | null
    runs_per_year: number | null
    course_fees: number | null
    start_time: Date | null
    end_time: Date | null
    avoid_month_start: boolean | null
    avoid_month_end: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CourseConfigCountAggregateOutputType = {
    course_name: number
    fy: number
    days_per_run: number
    runs_per_year: number
    course_fees: number
    start_time: number
    end_time: number
    days_to_avoid: number
    avoid_month_start: number
    avoid_month_end: number
    split: number
    trainers: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CourseConfigAvgAggregateInputType = {
    days_per_run?: true
    runs_per_year?: true
    course_fees?: true
    days_to_avoid?: true
    split?: true
  }

  export type CourseConfigSumAggregateInputType = {
    days_per_run?: true
    runs_per_year?: true
    course_fees?: true
    days_to_avoid?: true
    split?: true
  }

  export type CourseConfigMinAggregateInputType = {
    course_name?: true
    fy?: true
    days_per_run?: true
    runs_per_year?: true
    course_fees?: true
    start_time?: true
    end_time?: true
    avoid_month_start?: true
    avoid_month_end?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CourseConfigMaxAggregateInputType = {
    course_name?: true
    fy?: true
    days_per_run?: true
    runs_per_year?: true
    course_fees?: true
    start_time?: true
    end_time?: true
    avoid_month_start?: true
    avoid_month_end?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CourseConfigCountAggregateInputType = {
    course_name?: true
    fy?: true
    days_per_run?: true
    runs_per_year?: true
    course_fees?: true
    start_time?: true
    end_time?: true
    days_to_avoid?: true
    avoid_month_start?: true
    avoid_month_end?: true
    split?: true
    trainers?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CourseConfigAggregateArgs = {
    /**
     * Filter which CourseConfig to aggregate.
     * 
    **/
    where?: CourseConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseConfigs to fetch.
     * 
    **/
    orderBy?: Enumerable<CourseConfigOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CourseConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseConfigs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseConfigs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CourseConfigs
    **/
    _count?: true | CourseConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseConfigAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseConfigSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseConfigMaxAggregateInputType
  }

  export type GetCourseConfigAggregateType<T extends CourseConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateCourseConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourseConfig[P]>
      : GetScalarType<T[P], AggregateCourseConfig[P]>
  }




  export type CourseConfigGroupByArgs = {
    where?: CourseConfigWhereInput
    orderBy?: Enumerable<CourseConfigOrderByWithAggregationInput>
    by: Array<CourseConfigScalarFieldEnum>
    having?: CourseConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseConfigCountAggregateInputType | true
    _avg?: CourseConfigAvgAggregateInputType
    _sum?: CourseConfigSumAggregateInputType
    _min?: CourseConfigMinAggregateInputType
    _max?: CourseConfigMaxAggregateInputType
  }


  export type CourseConfigGroupByOutputType = {
    course_name: string
    fy: string
    days_per_run: number
    runs_per_year: number
    course_fees: number | null
    start_time: Date | null
    end_time: Date | null
    days_to_avoid: number[]
    avoid_month_start: boolean
    avoid_month_end: boolean
    split: number[]
    trainers: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: CourseConfigCountAggregateOutputType | null
    _avg: CourseConfigAvgAggregateOutputType | null
    _sum: CourseConfigSumAggregateOutputType | null
    _min: CourseConfigMinAggregateOutputType | null
    _max: CourseConfigMaxAggregateOutputType | null
  }

  type GetCourseConfigGroupByPayload<T extends CourseConfigGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CourseConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseConfigGroupByOutputType[P]>
            : GetScalarType<T[P], CourseConfigGroupByOutputType[P]>
        }
      >
    >


  export type CourseConfigSelect = {
    course_name?: boolean
    fy?: boolean
    days_per_run?: boolean
    runs_per_year?: boolean
    course_fees?: boolean
    start_time?: boolean
    end_time?: boolean
    days_to_avoid?: boolean
    avoid_month_start?: boolean
    avoid_month_end?: boolean
    split?: boolean
    trainers?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    FiscalYear?: boolean | FiscalYearArgs
    Course?: boolean | CourseArgs
    CourseRun?: boolean | CourseRunFindManyArgs
    _count?: boolean | CourseConfigCountOutputTypeArgs
  }

  export type CourseConfigInclude = {
    FiscalYear?: boolean | FiscalYearArgs
    Course?: boolean | CourseArgs
    CourseRun?: boolean | CourseRunFindManyArgs
    _count?: boolean | CourseConfigCountOutputTypeArgs
  }

  export type CourseConfigGetPayload<
    S extends boolean | null | undefined | CourseConfigArgs,
    U = keyof S
      > = S extends true
        ? CourseConfig
    : S extends undefined
    ? never
    : S extends CourseConfigArgs | CourseConfigFindManyArgs
    ?'include' extends U
    ? CourseConfig  & {
    [P in TrueKeys<S['include']>]:
        P extends 'FiscalYear' ? FiscalYearGetPayload<S['include'][P]> :
        P extends 'Course' ? CourseGetPayload<S['include'][P]> :
        P extends 'CourseRun' ? Array < CourseRunGetPayload<S['include'][P]>>  :
        P extends '_count' ? CourseConfigCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'FiscalYear' ? FiscalYearGetPayload<S['select'][P]> :
        P extends 'Course' ? CourseGetPayload<S['select'][P]> :
        P extends 'CourseRun' ? Array < CourseRunGetPayload<S['select'][P]>>  :
        P extends '_count' ? CourseConfigCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof CourseConfig ? CourseConfig[P] : never
  } 
    : CourseConfig
  : CourseConfig


  type CourseConfigCountArgs = Merge<
    Omit<CourseConfigFindManyArgs, 'select' | 'include'> & {
      select?: CourseConfigCountAggregateInputType | true
    }
  >

  export interface CourseConfigDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one CourseConfig that matches the filter.
     * @param {CourseConfigFindUniqueArgs} args - Arguments to find a CourseConfig
     * @example
     * // Get one CourseConfig
     * const courseConfig = await prisma.courseConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CourseConfigFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CourseConfigFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CourseConfig'> extends True ? CheckSelect<T, Prisma__CourseConfigClient<CourseConfig>, Prisma__CourseConfigClient<CourseConfigGetPayload<T>>> : CheckSelect<T, Prisma__CourseConfigClient<CourseConfig | null >, Prisma__CourseConfigClient<CourseConfigGetPayload<T> | null >>

    /**
     * Find the first CourseConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseConfigFindFirstArgs} args - Arguments to find a CourseConfig
     * @example
     * // Get one CourseConfig
     * const courseConfig = await prisma.courseConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CourseConfigFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CourseConfigFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CourseConfig'> extends True ? CheckSelect<T, Prisma__CourseConfigClient<CourseConfig>, Prisma__CourseConfigClient<CourseConfigGetPayload<T>>> : CheckSelect<T, Prisma__CourseConfigClient<CourseConfig | null >, Prisma__CourseConfigClient<CourseConfigGetPayload<T> | null >>

    /**
     * Find zero or more CourseConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseConfigFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CourseConfigs
     * const courseConfigs = await prisma.courseConfig.findMany()
     * 
     * // Get first 10 CourseConfigs
     * const courseConfigs = await prisma.courseConfig.findMany({ take: 10 })
     * 
     * // Only select the `course_name`
     * const courseConfigWithCourse_nameOnly = await prisma.courseConfig.findMany({ select: { course_name: true } })
     * 
    **/
    findMany<T extends CourseConfigFindManyArgs>(
      args?: SelectSubset<T, CourseConfigFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<CourseConfig>>, PrismaPromise<Array<CourseConfigGetPayload<T>>>>

    /**
     * Create a CourseConfig.
     * @param {CourseConfigCreateArgs} args - Arguments to create a CourseConfig.
     * @example
     * // Create one CourseConfig
     * const CourseConfig = await prisma.courseConfig.create({
     *   data: {
     *     // ... data to create a CourseConfig
     *   }
     * })
     * 
    **/
    create<T extends CourseConfigCreateArgs>(
      args: SelectSubset<T, CourseConfigCreateArgs>
    ): CheckSelect<T, Prisma__CourseConfigClient<CourseConfig>, Prisma__CourseConfigClient<CourseConfigGetPayload<T>>>

    /**
     * Create many CourseConfigs.
     *     @param {CourseConfigCreateManyArgs} args - Arguments to create many CourseConfigs.
     *     @example
     *     // Create many CourseConfigs
     *     const courseConfig = await prisma.courseConfig.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CourseConfigCreateManyArgs>(
      args?: SelectSubset<T, CourseConfigCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a CourseConfig.
     * @param {CourseConfigDeleteArgs} args - Arguments to delete one CourseConfig.
     * @example
     * // Delete one CourseConfig
     * const CourseConfig = await prisma.courseConfig.delete({
     *   where: {
     *     // ... filter to delete one CourseConfig
     *   }
     * })
     * 
    **/
    delete<T extends CourseConfigDeleteArgs>(
      args: SelectSubset<T, CourseConfigDeleteArgs>
    ): CheckSelect<T, Prisma__CourseConfigClient<CourseConfig>, Prisma__CourseConfigClient<CourseConfigGetPayload<T>>>

    /**
     * Update one CourseConfig.
     * @param {CourseConfigUpdateArgs} args - Arguments to update one CourseConfig.
     * @example
     * // Update one CourseConfig
     * const courseConfig = await prisma.courseConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CourseConfigUpdateArgs>(
      args: SelectSubset<T, CourseConfigUpdateArgs>
    ): CheckSelect<T, Prisma__CourseConfigClient<CourseConfig>, Prisma__CourseConfigClient<CourseConfigGetPayload<T>>>

    /**
     * Delete zero or more CourseConfigs.
     * @param {CourseConfigDeleteManyArgs} args - Arguments to filter CourseConfigs to delete.
     * @example
     * // Delete a few CourseConfigs
     * const { count } = await prisma.courseConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CourseConfigDeleteManyArgs>(
      args?: SelectSubset<T, CourseConfigDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more CourseConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CourseConfigs
     * const courseConfig = await prisma.courseConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CourseConfigUpdateManyArgs>(
      args: SelectSubset<T, CourseConfigUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one CourseConfig.
     * @param {CourseConfigUpsertArgs} args - Arguments to update or create a CourseConfig.
     * @example
     * // Update or create a CourseConfig
     * const courseConfig = await prisma.courseConfig.upsert({
     *   create: {
     *     // ... data to create a CourseConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CourseConfig we want to update
     *   }
     * })
    **/
    upsert<T extends CourseConfigUpsertArgs>(
      args: SelectSubset<T, CourseConfigUpsertArgs>
    ): CheckSelect<T, Prisma__CourseConfigClient<CourseConfig>, Prisma__CourseConfigClient<CourseConfigGetPayload<T>>>

    /**
     * Count the number of CourseConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseConfigCountArgs} args - Arguments to filter CourseConfigs to count.
     * @example
     * // Count the number of CourseConfigs
     * const count = await prisma.courseConfig.count({
     *   where: {
     *     // ... the filter for the CourseConfigs we want to count
     *   }
     * })
    **/
    count<T extends CourseConfigCountArgs>(
      args?: Subset<T, CourseConfigCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CourseConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseConfigAggregateArgs>(args: Subset<T, CourseConfigAggregateArgs>): PrismaPromise<GetCourseConfigAggregateType<T>>

    /**
     * Group by CourseConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseConfigGroupByArgs['orderBy'] }
        : { orderBy?: CourseConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseConfigGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for CourseConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CourseConfigClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    FiscalYear<T extends FiscalYearArgs = {}>(args?: Subset<T, FiscalYearArgs>): CheckSelect<T, Prisma__FiscalYearClient<FiscalYear | null >, Prisma__FiscalYearClient<FiscalYearGetPayload<T> | null >>;

    Course<T extends CourseArgs = {}>(args?: Subset<T, CourseArgs>): CheckSelect<T, Prisma__CourseClient<Course | null >, Prisma__CourseClient<CourseGetPayload<T> | null >>;

    CourseRun<T extends CourseRunFindManyArgs = {}>(args?: Subset<T, CourseRunFindManyArgs>): CheckSelect<T, PrismaPromise<Array<CourseRun>>, PrismaPromise<Array<CourseRunGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * CourseConfig findUnique
   */
  export type CourseConfigFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the CourseConfig
     * 
    **/
    select?: CourseConfigSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseConfigInclude | null
    /**
     * Throw an Error if a CourseConfig can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which CourseConfig to fetch.
     * 
    **/
    where: CourseConfigWhereUniqueInput
  }


  /**
   * CourseConfig findFirst
   */
  export type CourseConfigFindFirstArgs = {
    /**
     * Select specific fields to fetch from the CourseConfig
     * 
    **/
    select?: CourseConfigSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseConfigInclude | null
    /**
     * Throw an Error if a CourseConfig can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which CourseConfig to fetch.
     * 
    **/
    where?: CourseConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseConfigs to fetch.
     * 
    **/
    orderBy?: Enumerable<CourseConfigOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourseConfigs.
     * 
    **/
    cursor?: CourseConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseConfigs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseConfigs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourseConfigs.
     * 
    **/
    distinct?: Enumerable<CourseConfigScalarFieldEnum>
  }


  /**
   * CourseConfig findMany
   */
  export type CourseConfigFindManyArgs = {
    /**
     * Select specific fields to fetch from the CourseConfig
     * 
    **/
    select?: CourseConfigSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseConfigInclude | null
    /**
     * Filter, which CourseConfigs to fetch.
     * 
    **/
    where?: CourseConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseConfigs to fetch.
     * 
    **/
    orderBy?: Enumerable<CourseConfigOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CourseConfigs.
     * 
    **/
    cursor?: CourseConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseConfigs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseConfigs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CourseConfigScalarFieldEnum>
  }


  /**
   * CourseConfig create
   */
  export type CourseConfigCreateArgs = {
    /**
     * Select specific fields to fetch from the CourseConfig
     * 
    **/
    select?: CourseConfigSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseConfigInclude | null
    /**
     * The data needed to create a CourseConfig.
     * 
    **/
    data: XOR<CourseConfigCreateInput, CourseConfigUncheckedCreateInput>
  }


  /**
   * CourseConfig createMany
   */
  export type CourseConfigCreateManyArgs = {
    /**
     * The data used to create many CourseConfigs.
     * 
    **/
    data: Enumerable<CourseConfigCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * CourseConfig update
   */
  export type CourseConfigUpdateArgs = {
    /**
     * Select specific fields to fetch from the CourseConfig
     * 
    **/
    select?: CourseConfigSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseConfigInclude | null
    /**
     * The data needed to update a CourseConfig.
     * 
    **/
    data: XOR<CourseConfigUpdateInput, CourseConfigUncheckedUpdateInput>
    /**
     * Choose, which CourseConfig to update.
     * 
    **/
    where: CourseConfigWhereUniqueInput
  }


  /**
   * CourseConfig updateMany
   */
  export type CourseConfigUpdateManyArgs = {
    /**
     * The data used to update CourseConfigs.
     * 
    **/
    data: XOR<CourseConfigUpdateManyMutationInput, CourseConfigUncheckedUpdateManyInput>
    /**
     * Filter which CourseConfigs to update
     * 
    **/
    where?: CourseConfigWhereInput
  }


  /**
   * CourseConfig upsert
   */
  export type CourseConfigUpsertArgs = {
    /**
     * Select specific fields to fetch from the CourseConfig
     * 
    **/
    select?: CourseConfigSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseConfigInclude | null
    /**
     * The filter to search for the CourseConfig to update in case it exists.
     * 
    **/
    where: CourseConfigWhereUniqueInput
    /**
     * In case the CourseConfig found by the `where` argument doesn't exist, create a new CourseConfig with this data.
     * 
    **/
    create: XOR<CourseConfigCreateInput, CourseConfigUncheckedCreateInput>
    /**
     * In case the CourseConfig was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CourseConfigUpdateInput, CourseConfigUncheckedUpdateInput>
  }


  /**
   * CourseConfig delete
   */
  export type CourseConfigDeleteArgs = {
    /**
     * Select specific fields to fetch from the CourseConfig
     * 
    **/
    select?: CourseConfigSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseConfigInclude | null
    /**
     * Filter which CourseConfig to delete.
     * 
    **/
    where: CourseConfigWhereUniqueInput
  }


  /**
   * CourseConfig deleteMany
   */
  export type CourseConfigDeleteManyArgs = {
    /**
     * Filter which CourseConfigs to delete
     * 
    **/
    where?: CourseConfigWhereInput
  }


  /**
   * CourseConfig without action
   */
  export type CourseConfigArgs = {
    /**
     * Select specific fields to fetch from the CourseConfig
     * 
    **/
    select?: CourseConfigSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseConfigInclude | null
  }



  /**
   * Model CourseRun
   */


  export type AggregateCourseRun = {
    _count: CourseRunCountAggregateOutputType | null
    _avg: CourseRunAvgAggregateOutputType | null
    _sum: CourseRunSumAggregateOutputType | null
    _min: CourseRunMinAggregateOutputType | null
    _max: CourseRunMaxAggregateOutputType | null
  }

  export type CourseRunAvgAggregateOutputType = {
    run: number | null
  }

  export type CourseRunSumAggregateOutputType = {
    run: number | null
  }

  export type CourseRunMinAggregateOutputType = {
    run: number | null
    course_name: string | null
    fy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CourseRunMaxAggregateOutputType = {
    run: number | null
    course_name: string | null
    fy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CourseRunCountAggregateOutputType = {
    run: number
    course_name: number
    fy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CourseRunAvgAggregateInputType = {
    run?: true
  }

  export type CourseRunSumAggregateInputType = {
    run?: true
  }

  export type CourseRunMinAggregateInputType = {
    run?: true
    course_name?: true
    fy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CourseRunMaxAggregateInputType = {
    run?: true
    course_name?: true
    fy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CourseRunCountAggregateInputType = {
    run?: true
    course_name?: true
    fy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CourseRunAggregateArgs = {
    /**
     * Filter which CourseRun to aggregate.
     * 
    **/
    where?: CourseRunWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseRuns to fetch.
     * 
    **/
    orderBy?: Enumerable<CourseRunOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CourseRunWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseRuns from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseRuns.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CourseRuns
    **/
    _count?: true | CourseRunCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseRunAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseRunSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseRunMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseRunMaxAggregateInputType
  }

  export type GetCourseRunAggregateType<T extends CourseRunAggregateArgs> = {
        [P in keyof T & keyof AggregateCourseRun]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourseRun[P]>
      : GetScalarType<T[P], AggregateCourseRun[P]>
  }




  export type CourseRunGroupByArgs = {
    where?: CourseRunWhereInput
    orderBy?: Enumerable<CourseRunOrderByWithAggregationInput>
    by: Array<CourseRunScalarFieldEnum>
    having?: CourseRunScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseRunCountAggregateInputType | true
    _avg?: CourseRunAvgAggregateInputType
    _sum?: CourseRunSumAggregateInputType
    _min?: CourseRunMinAggregateInputType
    _max?: CourseRunMaxAggregateInputType
  }


  export type CourseRunGroupByOutputType = {
    run: number
    course_name: string
    fy: string
    createdAt: Date
    updatedAt: Date
    _count: CourseRunCountAggregateOutputType | null
    _avg: CourseRunAvgAggregateOutputType | null
    _sum: CourseRunSumAggregateOutputType | null
    _min: CourseRunMinAggregateOutputType | null
    _max: CourseRunMaxAggregateOutputType | null
  }

  type GetCourseRunGroupByPayload<T extends CourseRunGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CourseRunGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseRunGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseRunGroupByOutputType[P]>
            : GetScalarType<T[P], CourseRunGroupByOutputType[P]>
        }
      >
    >


  export type CourseRunSelect = {
    run?: boolean
    course_name?: boolean
    fy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    CourseConfig?: boolean | CourseConfigArgs
    CourseSegment?: boolean | CourseSegmentFindManyArgs
    _count?: boolean | CourseRunCountOutputTypeArgs
  }

  export type CourseRunInclude = {
    CourseConfig?: boolean | CourseConfigArgs
    CourseSegment?: boolean | CourseSegmentFindManyArgs
    _count?: boolean | CourseRunCountOutputTypeArgs
  }

  export type CourseRunGetPayload<
    S extends boolean | null | undefined | CourseRunArgs,
    U = keyof S
      > = S extends true
        ? CourseRun
    : S extends undefined
    ? never
    : S extends CourseRunArgs | CourseRunFindManyArgs
    ?'include' extends U
    ? CourseRun  & {
    [P in TrueKeys<S['include']>]:
        P extends 'CourseConfig' ? CourseConfigGetPayload<S['include'][P]> :
        P extends 'CourseSegment' ? Array < CourseSegmentGetPayload<S['include'][P]>>  :
        P extends '_count' ? CourseRunCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'CourseConfig' ? CourseConfigGetPayload<S['select'][P]> :
        P extends 'CourseSegment' ? Array < CourseSegmentGetPayload<S['select'][P]>>  :
        P extends '_count' ? CourseRunCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof CourseRun ? CourseRun[P] : never
  } 
    : CourseRun
  : CourseRun


  type CourseRunCountArgs = Merge<
    Omit<CourseRunFindManyArgs, 'select' | 'include'> & {
      select?: CourseRunCountAggregateInputType | true
    }
  >

  export interface CourseRunDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one CourseRun that matches the filter.
     * @param {CourseRunFindUniqueArgs} args - Arguments to find a CourseRun
     * @example
     * // Get one CourseRun
     * const courseRun = await prisma.courseRun.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CourseRunFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CourseRunFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CourseRun'> extends True ? CheckSelect<T, Prisma__CourseRunClient<CourseRun>, Prisma__CourseRunClient<CourseRunGetPayload<T>>> : CheckSelect<T, Prisma__CourseRunClient<CourseRun | null >, Prisma__CourseRunClient<CourseRunGetPayload<T> | null >>

    /**
     * Find the first CourseRun that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseRunFindFirstArgs} args - Arguments to find a CourseRun
     * @example
     * // Get one CourseRun
     * const courseRun = await prisma.courseRun.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CourseRunFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CourseRunFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CourseRun'> extends True ? CheckSelect<T, Prisma__CourseRunClient<CourseRun>, Prisma__CourseRunClient<CourseRunGetPayload<T>>> : CheckSelect<T, Prisma__CourseRunClient<CourseRun | null >, Prisma__CourseRunClient<CourseRunGetPayload<T> | null >>

    /**
     * Find zero or more CourseRuns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseRunFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CourseRuns
     * const courseRuns = await prisma.courseRun.findMany()
     * 
     * // Get first 10 CourseRuns
     * const courseRuns = await prisma.courseRun.findMany({ take: 10 })
     * 
     * // Only select the `run`
     * const courseRunWithRunOnly = await prisma.courseRun.findMany({ select: { run: true } })
     * 
    **/
    findMany<T extends CourseRunFindManyArgs>(
      args?: SelectSubset<T, CourseRunFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<CourseRun>>, PrismaPromise<Array<CourseRunGetPayload<T>>>>

    /**
     * Create a CourseRun.
     * @param {CourseRunCreateArgs} args - Arguments to create a CourseRun.
     * @example
     * // Create one CourseRun
     * const CourseRun = await prisma.courseRun.create({
     *   data: {
     *     // ... data to create a CourseRun
     *   }
     * })
     * 
    **/
    create<T extends CourseRunCreateArgs>(
      args: SelectSubset<T, CourseRunCreateArgs>
    ): CheckSelect<T, Prisma__CourseRunClient<CourseRun>, Prisma__CourseRunClient<CourseRunGetPayload<T>>>

    /**
     * Create many CourseRuns.
     *     @param {CourseRunCreateManyArgs} args - Arguments to create many CourseRuns.
     *     @example
     *     // Create many CourseRuns
     *     const courseRun = await prisma.courseRun.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CourseRunCreateManyArgs>(
      args?: SelectSubset<T, CourseRunCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a CourseRun.
     * @param {CourseRunDeleteArgs} args - Arguments to delete one CourseRun.
     * @example
     * // Delete one CourseRun
     * const CourseRun = await prisma.courseRun.delete({
     *   where: {
     *     // ... filter to delete one CourseRun
     *   }
     * })
     * 
    **/
    delete<T extends CourseRunDeleteArgs>(
      args: SelectSubset<T, CourseRunDeleteArgs>
    ): CheckSelect<T, Prisma__CourseRunClient<CourseRun>, Prisma__CourseRunClient<CourseRunGetPayload<T>>>

    /**
     * Update one CourseRun.
     * @param {CourseRunUpdateArgs} args - Arguments to update one CourseRun.
     * @example
     * // Update one CourseRun
     * const courseRun = await prisma.courseRun.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CourseRunUpdateArgs>(
      args: SelectSubset<T, CourseRunUpdateArgs>
    ): CheckSelect<T, Prisma__CourseRunClient<CourseRun>, Prisma__CourseRunClient<CourseRunGetPayload<T>>>

    /**
     * Delete zero or more CourseRuns.
     * @param {CourseRunDeleteManyArgs} args - Arguments to filter CourseRuns to delete.
     * @example
     * // Delete a few CourseRuns
     * const { count } = await prisma.courseRun.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CourseRunDeleteManyArgs>(
      args?: SelectSubset<T, CourseRunDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more CourseRuns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseRunUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CourseRuns
     * const courseRun = await prisma.courseRun.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CourseRunUpdateManyArgs>(
      args: SelectSubset<T, CourseRunUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one CourseRun.
     * @param {CourseRunUpsertArgs} args - Arguments to update or create a CourseRun.
     * @example
     * // Update or create a CourseRun
     * const courseRun = await prisma.courseRun.upsert({
     *   create: {
     *     // ... data to create a CourseRun
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CourseRun we want to update
     *   }
     * })
    **/
    upsert<T extends CourseRunUpsertArgs>(
      args: SelectSubset<T, CourseRunUpsertArgs>
    ): CheckSelect<T, Prisma__CourseRunClient<CourseRun>, Prisma__CourseRunClient<CourseRunGetPayload<T>>>

    /**
     * Count the number of CourseRuns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseRunCountArgs} args - Arguments to filter CourseRuns to count.
     * @example
     * // Count the number of CourseRuns
     * const count = await prisma.courseRun.count({
     *   where: {
     *     // ... the filter for the CourseRuns we want to count
     *   }
     * })
    **/
    count<T extends CourseRunCountArgs>(
      args?: Subset<T, CourseRunCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseRunCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CourseRun.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseRunAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseRunAggregateArgs>(args: Subset<T, CourseRunAggregateArgs>): PrismaPromise<GetCourseRunAggregateType<T>>

    /**
     * Group by CourseRun.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseRunGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseRunGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseRunGroupByArgs['orderBy'] }
        : { orderBy?: CourseRunGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseRunGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseRunGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for CourseRun.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CourseRunClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    CourseConfig<T extends CourseConfigArgs = {}>(args?: Subset<T, CourseConfigArgs>): CheckSelect<T, Prisma__CourseConfigClient<CourseConfig | null >, Prisma__CourseConfigClient<CourseConfigGetPayload<T> | null >>;

    CourseSegment<T extends CourseSegmentFindManyArgs = {}>(args?: Subset<T, CourseSegmentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<CourseSegment>>, PrismaPromise<Array<CourseSegmentGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * CourseRun findUnique
   */
  export type CourseRunFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the CourseRun
     * 
    **/
    select?: CourseRunSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseRunInclude | null
    /**
     * Throw an Error if a CourseRun can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which CourseRun to fetch.
     * 
    **/
    where: CourseRunWhereUniqueInput
  }


  /**
   * CourseRun findFirst
   */
  export type CourseRunFindFirstArgs = {
    /**
     * Select specific fields to fetch from the CourseRun
     * 
    **/
    select?: CourseRunSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseRunInclude | null
    /**
     * Throw an Error if a CourseRun can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which CourseRun to fetch.
     * 
    **/
    where?: CourseRunWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseRuns to fetch.
     * 
    **/
    orderBy?: Enumerable<CourseRunOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourseRuns.
     * 
    **/
    cursor?: CourseRunWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseRuns from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseRuns.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourseRuns.
     * 
    **/
    distinct?: Enumerable<CourseRunScalarFieldEnum>
  }


  /**
   * CourseRun findMany
   */
  export type CourseRunFindManyArgs = {
    /**
     * Select specific fields to fetch from the CourseRun
     * 
    **/
    select?: CourseRunSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseRunInclude | null
    /**
     * Filter, which CourseRuns to fetch.
     * 
    **/
    where?: CourseRunWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseRuns to fetch.
     * 
    **/
    orderBy?: Enumerable<CourseRunOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CourseRuns.
     * 
    **/
    cursor?: CourseRunWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseRuns from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseRuns.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CourseRunScalarFieldEnum>
  }


  /**
   * CourseRun create
   */
  export type CourseRunCreateArgs = {
    /**
     * Select specific fields to fetch from the CourseRun
     * 
    **/
    select?: CourseRunSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseRunInclude | null
    /**
     * The data needed to create a CourseRun.
     * 
    **/
    data: XOR<CourseRunCreateInput, CourseRunUncheckedCreateInput>
  }


  /**
   * CourseRun createMany
   */
  export type CourseRunCreateManyArgs = {
    /**
     * The data used to create many CourseRuns.
     * 
    **/
    data: Enumerable<CourseRunCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * CourseRun update
   */
  export type CourseRunUpdateArgs = {
    /**
     * Select specific fields to fetch from the CourseRun
     * 
    **/
    select?: CourseRunSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseRunInclude | null
    /**
     * The data needed to update a CourseRun.
     * 
    **/
    data: XOR<CourseRunUpdateInput, CourseRunUncheckedUpdateInput>
    /**
     * Choose, which CourseRun to update.
     * 
    **/
    where: CourseRunWhereUniqueInput
  }


  /**
   * CourseRun updateMany
   */
  export type CourseRunUpdateManyArgs = {
    /**
     * The data used to update CourseRuns.
     * 
    **/
    data: XOR<CourseRunUpdateManyMutationInput, CourseRunUncheckedUpdateManyInput>
    /**
     * Filter which CourseRuns to update
     * 
    **/
    where?: CourseRunWhereInput
  }


  /**
   * CourseRun upsert
   */
  export type CourseRunUpsertArgs = {
    /**
     * Select specific fields to fetch from the CourseRun
     * 
    **/
    select?: CourseRunSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseRunInclude | null
    /**
     * The filter to search for the CourseRun to update in case it exists.
     * 
    **/
    where: CourseRunWhereUniqueInput
    /**
     * In case the CourseRun found by the `where` argument doesn't exist, create a new CourseRun with this data.
     * 
    **/
    create: XOR<CourseRunCreateInput, CourseRunUncheckedCreateInput>
    /**
     * In case the CourseRun was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CourseRunUpdateInput, CourseRunUncheckedUpdateInput>
  }


  /**
   * CourseRun delete
   */
  export type CourseRunDeleteArgs = {
    /**
     * Select specific fields to fetch from the CourseRun
     * 
    **/
    select?: CourseRunSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseRunInclude | null
    /**
     * Filter which CourseRun to delete.
     * 
    **/
    where: CourseRunWhereUniqueInput
  }


  /**
   * CourseRun deleteMany
   */
  export type CourseRunDeleteManyArgs = {
    /**
     * Filter which CourseRuns to delete
     * 
    **/
    where?: CourseRunWhereInput
  }


  /**
   * CourseRun without action
   */
  export type CourseRunArgs = {
    /**
     * Select specific fields to fetch from the CourseRun
     * 
    **/
    select?: CourseRunSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseRunInclude | null
  }



  /**
   * Model CourseSegment
   */


  export type AggregateCourseSegment = {
    _count: CourseSegmentCountAggregateOutputType | null
    _avg: CourseSegmentAvgAggregateOutputType | null
    _sum: CourseSegmentSumAggregateOutputType | null
    _min: CourseSegmentMinAggregateOutputType | null
    _max: CourseSegmentMaxAggregateOutputType | null
  }

  export type CourseSegmentAvgAggregateOutputType = {
    segment: number | null
    run: number | null
  }

  export type CourseSegmentSumAggregateOutputType = {
    segment: number | null
    run: number | null
  }

  export type CourseSegmentMinAggregateOutputType = {
    segment: number | null
    course_name: string | null
    fy: string | null
    run: number | null
    status: Status | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CourseSegmentMaxAggregateOutputType = {
    segment: number | null
    course_name: string | null
    fy: string | null
    run: number | null
    status: Status | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CourseSegmentCountAggregateOutputType = {
    segment: number
    course_name: number
    fy: number
    run: number
    dates: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CourseSegmentAvgAggregateInputType = {
    segment?: true
    run?: true
  }

  export type CourseSegmentSumAggregateInputType = {
    segment?: true
    run?: true
  }

  export type CourseSegmentMinAggregateInputType = {
    segment?: true
    course_name?: true
    fy?: true
    run?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CourseSegmentMaxAggregateInputType = {
    segment?: true
    course_name?: true
    fy?: true
    run?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CourseSegmentCountAggregateInputType = {
    segment?: true
    course_name?: true
    fy?: true
    run?: true
    dates?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CourseSegmentAggregateArgs = {
    /**
     * Filter which CourseSegment to aggregate.
     * 
    **/
    where?: CourseSegmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseSegments to fetch.
     * 
    **/
    orderBy?: Enumerable<CourseSegmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CourseSegmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseSegments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseSegments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CourseSegments
    **/
    _count?: true | CourseSegmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseSegmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseSegmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseSegmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseSegmentMaxAggregateInputType
  }

  export type GetCourseSegmentAggregateType<T extends CourseSegmentAggregateArgs> = {
        [P in keyof T & keyof AggregateCourseSegment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourseSegment[P]>
      : GetScalarType<T[P], AggregateCourseSegment[P]>
  }




  export type CourseSegmentGroupByArgs = {
    where?: CourseSegmentWhereInput
    orderBy?: Enumerable<CourseSegmentOrderByWithAggregationInput>
    by: Array<CourseSegmentScalarFieldEnum>
    having?: CourseSegmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseSegmentCountAggregateInputType | true
    _avg?: CourseSegmentAvgAggregateInputType
    _sum?: CourseSegmentSumAggregateInputType
    _min?: CourseSegmentMinAggregateInputType
    _max?: CourseSegmentMaxAggregateInputType
  }


  export type CourseSegmentGroupByOutputType = {
    segment: number
    course_name: string
    fy: string
    run: number
    dates: Date[]
    status: Status
    createdAt: Date
    updatedAt: Date
    _count: CourseSegmentCountAggregateOutputType | null
    _avg: CourseSegmentAvgAggregateOutputType | null
    _sum: CourseSegmentSumAggregateOutputType | null
    _min: CourseSegmentMinAggregateOutputType | null
    _max: CourseSegmentMaxAggregateOutputType | null
  }

  type GetCourseSegmentGroupByPayload<T extends CourseSegmentGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CourseSegmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseSegmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseSegmentGroupByOutputType[P]>
            : GetScalarType<T[P], CourseSegmentGroupByOutputType[P]>
        }
      >
    >


  export type CourseSegmentSelect = {
    segment?: boolean
    course_name?: boolean
    fy?: boolean
    run?: boolean
    dates?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    CourseRun?: boolean | CourseRunArgs
    Assignment?: boolean | AssignmentFindManyArgs
    _count?: boolean | CourseSegmentCountOutputTypeArgs
  }

  export type CourseSegmentInclude = {
    CourseRun?: boolean | CourseRunArgs
    Assignment?: boolean | AssignmentFindManyArgs
    _count?: boolean | CourseSegmentCountOutputTypeArgs
  }

  export type CourseSegmentGetPayload<
    S extends boolean | null | undefined | CourseSegmentArgs,
    U = keyof S
      > = S extends true
        ? CourseSegment
    : S extends undefined
    ? never
    : S extends CourseSegmentArgs | CourseSegmentFindManyArgs
    ?'include' extends U
    ? CourseSegment  & {
    [P in TrueKeys<S['include']>]:
        P extends 'CourseRun' ? CourseRunGetPayload<S['include'][P]> :
        P extends 'Assignment' ? Array < AssignmentGetPayload<S['include'][P]>>  :
        P extends '_count' ? CourseSegmentCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'CourseRun' ? CourseRunGetPayload<S['select'][P]> :
        P extends 'Assignment' ? Array < AssignmentGetPayload<S['select'][P]>>  :
        P extends '_count' ? CourseSegmentCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof CourseSegment ? CourseSegment[P] : never
  } 
    : CourseSegment
  : CourseSegment


  type CourseSegmentCountArgs = Merge<
    Omit<CourseSegmentFindManyArgs, 'select' | 'include'> & {
      select?: CourseSegmentCountAggregateInputType | true
    }
  >

  export interface CourseSegmentDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one CourseSegment that matches the filter.
     * @param {CourseSegmentFindUniqueArgs} args - Arguments to find a CourseSegment
     * @example
     * // Get one CourseSegment
     * const courseSegment = await prisma.courseSegment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CourseSegmentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CourseSegmentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CourseSegment'> extends True ? CheckSelect<T, Prisma__CourseSegmentClient<CourseSegment>, Prisma__CourseSegmentClient<CourseSegmentGetPayload<T>>> : CheckSelect<T, Prisma__CourseSegmentClient<CourseSegment | null >, Prisma__CourseSegmentClient<CourseSegmentGetPayload<T> | null >>

    /**
     * Find the first CourseSegment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseSegmentFindFirstArgs} args - Arguments to find a CourseSegment
     * @example
     * // Get one CourseSegment
     * const courseSegment = await prisma.courseSegment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CourseSegmentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CourseSegmentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CourseSegment'> extends True ? CheckSelect<T, Prisma__CourseSegmentClient<CourseSegment>, Prisma__CourseSegmentClient<CourseSegmentGetPayload<T>>> : CheckSelect<T, Prisma__CourseSegmentClient<CourseSegment | null >, Prisma__CourseSegmentClient<CourseSegmentGetPayload<T> | null >>

    /**
     * Find zero or more CourseSegments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseSegmentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CourseSegments
     * const courseSegments = await prisma.courseSegment.findMany()
     * 
     * // Get first 10 CourseSegments
     * const courseSegments = await prisma.courseSegment.findMany({ take: 10 })
     * 
     * // Only select the `segment`
     * const courseSegmentWithSegmentOnly = await prisma.courseSegment.findMany({ select: { segment: true } })
     * 
    **/
    findMany<T extends CourseSegmentFindManyArgs>(
      args?: SelectSubset<T, CourseSegmentFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<CourseSegment>>, PrismaPromise<Array<CourseSegmentGetPayload<T>>>>

    /**
     * Create a CourseSegment.
     * @param {CourseSegmentCreateArgs} args - Arguments to create a CourseSegment.
     * @example
     * // Create one CourseSegment
     * const CourseSegment = await prisma.courseSegment.create({
     *   data: {
     *     // ... data to create a CourseSegment
     *   }
     * })
     * 
    **/
    create<T extends CourseSegmentCreateArgs>(
      args: SelectSubset<T, CourseSegmentCreateArgs>
    ): CheckSelect<T, Prisma__CourseSegmentClient<CourseSegment>, Prisma__CourseSegmentClient<CourseSegmentGetPayload<T>>>

    /**
     * Create many CourseSegments.
     *     @param {CourseSegmentCreateManyArgs} args - Arguments to create many CourseSegments.
     *     @example
     *     // Create many CourseSegments
     *     const courseSegment = await prisma.courseSegment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CourseSegmentCreateManyArgs>(
      args?: SelectSubset<T, CourseSegmentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a CourseSegment.
     * @param {CourseSegmentDeleteArgs} args - Arguments to delete one CourseSegment.
     * @example
     * // Delete one CourseSegment
     * const CourseSegment = await prisma.courseSegment.delete({
     *   where: {
     *     // ... filter to delete one CourseSegment
     *   }
     * })
     * 
    **/
    delete<T extends CourseSegmentDeleteArgs>(
      args: SelectSubset<T, CourseSegmentDeleteArgs>
    ): CheckSelect<T, Prisma__CourseSegmentClient<CourseSegment>, Prisma__CourseSegmentClient<CourseSegmentGetPayload<T>>>

    /**
     * Update one CourseSegment.
     * @param {CourseSegmentUpdateArgs} args - Arguments to update one CourseSegment.
     * @example
     * // Update one CourseSegment
     * const courseSegment = await prisma.courseSegment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CourseSegmentUpdateArgs>(
      args: SelectSubset<T, CourseSegmentUpdateArgs>
    ): CheckSelect<T, Prisma__CourseSegmentClient<CourseSegment>, Prisma__CourseSegmentClient<CourseSegmentGetPayload<T>>>

    /**
     * Delete zero or more CourseSegments.
     * @param {CourseSegmentDeleteManyArgs} args - Arguments to filter CourseSegments to delete.
     * @example
     * // Delete a few CourseSegments
     * const { count } = await prisma.courseSegment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CourseSegmentDeleteManyArgs>(
      args?: SelectSubset<T, CourseSegmentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more CourseSegments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseSegmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CourseSegments
     * const courseSegment = await prisma.courseSegment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CourseSegmentUpdateManyArgs>(
      args: SelectSubset<T, CourseSegmentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one CourseSegment.
     * @param {CourseSegmentUpsertArgs} args - Arguments to update or create a CourseSegment.
     * @example
     * // Update or create a CourseSegment
     * const courseSegment = await prisma.courseSegment.upsert({
     *   create: {
     *     // ... data to create a CourseSegment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CourseSegment we want to update
     *   }
     * })
    **/
    upsert<T extends CourseSegmentUpsertArgs>(
      args: SelectSubset<T, CourseSegmentUpsertArgs>
    ): CheckSelect<T, Prisma__CourseSegmentClient<CourseSegment>, Prisma__CourseSegmentClient<CourseSegmentGetPayload<T>>>

    /**
     * Count the number of CourseSegments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseSegmentCountArgs} args - Arguments to filter CourseSegments to count.
     * @example
     * // Count the number of CourseSegments
     * const count = await prisma.courseSegment.count({
     *   where: {
     *     // ... the filter for the CourseSegments we want to count
     *   }
     * })
    **/
    count<T extends CourseSegmentCountArgs>(
      args?: Subset<T, CourseSegmentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseSegmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CourseSegment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseSegmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseSegmentAggregateArgs>(args: Subset<T, CourseSegmentAggregateArgs>): PrismaPromise<GetCourseSegmentAggregateType<T>>

    /**
     * Group by CourseSegment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseSegmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseSegmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseSegmentGroupByArgs['orderBy'] }
        : { orderBy?: CourseSegmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseSegmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseSegmentGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for CourseSegment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CourseSegmentClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    CourseRun<T extends CourseRunArgs = {}>(args?: Subset<T, CourseRunArgs>): CheckSelect<T, Prisma__CourseRunClient<CourseRun | null >, Prisma__CourseRunClient<CourseRunGetPayload<T> | null >>;

    Assignment<T extends AssignmentFindManyArgs = {}>(args?: Subset<T, AssignmentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Assignment>>, PrismaPromise<Array<AssignmentGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * CourseSegment findUnique
   */
  export type CourseSegmentFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the CourseSegment
     * 
    **/
    select?: CourseSegmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseSegmentInclude | null
    /**
     * Throw an Error if a CourseSegment can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which CourseSegment to fetch.
     * 
    **/
    where: CourseSegmentWhereUniqueInput
  }


  /**
   * CourseSegment findFirst
   */
  export type CourseSegmentFindFirstArgs = {
    /**
     * Select specific fields to fetch from the CourseSegment
     * 
    **/
    select?: CourseSegmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseSegmentInclude | null
    /**
     * Throw an Error if a CourseSegment can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which CourseSegment to fetch.
     * 
    **/
    where?: CourseSegmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseSegments to fetch.
     * 
    **/
    orderBy?: Enumerable<CourseSegmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourseSegments.
     * 
    **/
    cursor?: CourseSegmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseSegments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseSegments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourseSegments.
     * 
    **/
    distinct?: Enumerable<CourseSegmentScalarFieldEnum>
  }


  /**
   * CourseSegment findMany
   */
  export type CourseSegmentFindManyArgs = {
    /**
     * Select specific fields to fetch from the CourseSegment
     * 
    **/
    select?: CourseSegmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseSegmentInclude | null
    /**
     * Filter, which CourseSegments to fetch.
     * 
    **/
    where?: CourseSegmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseSegments to fetch.
     * 
    **/
    orderBy?: Enumerable<CourseSegmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CourseSegments.
     * 
    **/
    cursor?: CourseSegmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseSegments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseSegments.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CourseSegmentScalarFieldEnum>
  }


  /**
   * CourseSegment create
   */
  export type CourseSegmentCreateArgs = {
    /**
     * Select specific fields to fetch from the CourseSegment
     * 
    **/
    select?: CourseSegmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseSegmentInclude | null
    /**
     * The data needed to create a CourseSegment.
     * 
    **/
    data: XOR<CourseSegmentCreateInput, CourseSegmentUncheckedCreateInput>
  }


  /**
   * CourseSegment createMany
   */
  export type CourseSegmentCreateManyArgs = {
    /**
     * The data used to create many CourseSegments.
     * 
    **/
    data: Enumerable<CourseSegmentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * CourseSegment update
   */
  export type CourseSegmentUpdateArgs = {
    /**
     * Select specific fields to fetch from the CourseSegment
     * 
    **/
    select?: CourseSegmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseSegmentInclude | null
    /**
     * The data needed to update a CourseSegment.
     * 
    **/
    data: XOR<CourseSegmentUpdateInput, CourseSegmentUncheckedUpdateInput>
    /**
     * Choose, which CourseSegment to update.
     * 
    **/
    where: CourseSegmentWhereUniqueInput
  }


  /**
   * CourseSegment updateMany
   */
  export type CourseSegmentUpdateManyArgs = {
    /**
     * The data used to update CourseSegments.
     * 
    **/
    data: XOR<CourseSegmentUpdateManyMutationInput, CourseSegmentUncheckedUpdateManyInput>
    /**
     * Filter which CourseSegments to update
     * 
    **/
    where?: CourseSegmentWhereInput
  }


  /**
   * CourseSegment upsert
   */
  export type CourseSegmentUpsertArgs = {
    /**
     * Select specific fields to fetch from the CourseSegment
     * 
    **/
    select?: CourseSegmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseSegmentInclude | null
    /**
     * The filter to search for the CourseSegment to update in case it exists.
     * 
    **/
    where: CourseSegmentWhereUniqueInput
    /**
     * In case the CourseSegment found by the `where` argument doesn't exist, create a new CourseSegment with this data.
     * 
    **/
    create: XOR<CourseSegmentCreateInput, CourseSegmentUncheckedCreateInput>
    /**
     * In case the CourseSegment was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CourseSegmentUpdateInput, CourseSegmentUncheckedUpdateInput>
  }


  /**
   * CourseSegment delete
   */
  export type CourseSegmentDeleteArgs = {
    /**
     * Select specific fields to fetch from the CourseSegment
     * 
    **/
    select?: CourseSegmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseSegmentInclude | null
    /**
     * Filter which CourseSegment to delete.
     * 
    **/
    where: CourseSegmentWhereUniqueInput
  }


  /**
   * CourseSegment deleteMany
   */
  export type CourseSegmentDeleteManyArgs = {
    /**
     * Filter which CourseSegments to delete
     * 
    **/
    where?: CourseSegmentWhereInput
  }


  /**
   * CourseSegment without action
   */
  export type CourseSegmentArgs = {
    /**
     * Select specific fields to fetch from the CourseSegment
     * 
    **/
    select?: CourseSegmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CourseSegmentInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    user_name: string | null
    password: string | null
    email: string | null
    role: Role | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    user_name: string | null
    password: string | null
    email: string | null
    role: Role | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    user_name: number
    password: number
    email: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    user_name?: true
    password?: true
    email?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    user_name?: true
    password?: true
    email?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    user_name?: true
    password?: true
    email?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    user_name: string
    password: string
    email: string
    role: Role
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    user_name?: boolean
    password?: boolean
    email?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Assignment?: boolean | AssignmentFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    Assignment?: boolean | AssignmentFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Assignment' ? Array < AssignmentGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Assignment' ? Array < AssignmentGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `user_name`
     * const userWithUser_nameOnly = await prisma.user.findMany({ select: { user_name: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Assignment<T extends AssignmentFindManyArgs = {}>(args?: Subset<T, AssignmentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Assignment>>, PrismaPromise<Array<AssignmentGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Assignment
   */


  export type AggregateAssignment = {
    _count: AssignmentCountAggregateOutputType | null
    _avg: AssignmentAvgAggregateOutputType | null
    _sum: AssignmentSumAggregateOutputType | null
    _min: AssignmentMinAggregateOutputType | null
    _max: AssignmentMaxAggregateOutputType | null
  }

  export type AssignmentAvgAggregateOutputType = {
    segment: number | null
    run: number | null
  }

  export type AssignmentSumAggregateOutputType = {
    segment: number | null
    run: number | null
  }

  export type AssignmentMinAggregateOutputType = {
    user_name: string | null
    segment: number | null
    course_name: string | null
    fy: string | null
    run: number | null
    assignment_status: Status | null
    decline_reason: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssignmentMaxAggregateOutputType = {
    user_name: string | null
    segment: number | null
    course_name: string | null
    fy: string | null
    run: number | null
    assignment_status: Status | null
    decline_reason: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssignmentCountAggregateOutputType = {
    user_name: number
    segment: number
    course_name: number
    fy: number
    run: number
    assignment_status: number
    decline_reason: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AssignmentAvgAggregateInputType = {
    segment?: true
    run?: true
  }

  export type AssignmentSumAggregateInputType = {
    segment?: true
    run?: true
  }

  export type AssignmentMinAggregateInputType = {
    user_name?: true
    segment?: true
    course_name?: true
    fy?: true
    run?: true
    assignment_status?: true
    decline_reason?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssignmentMaxAggregateInputType = {
    user_name?: true
    segment?: true
    course_name?: true
    fy?: true
    run?: true
    assignment_status?: true
    decline_reason?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssignmentCountAggregateInputType = {
    user_name?: true
    segment?: true
    course_name?: true
    fy?: true
    run?: true
    assignment_status?: true
    decline_reason?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AssignmentAggregateArgs = {
    /**
     * Filter which Assignment to aggregate.
     * 
    **/
    where?: AssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assignments to fetch.
     * 
    **/
    orderBy?: Enumerable<AssignmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assignments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assignments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Assignments
    **/
    _count?: true | AssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssignmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssignmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssignmentMaxAggregateInputType
  }

  export type GetAssignmentAggregateType<T extends AssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssignment[P]>
      : GetScalarType<T[P], AggregateAssignment[P]>
  }




  export type AssignmentGroupByArgs = {
    where?: AssignmentWhereInput
    orderBy?: Enumerable<AssignmentOrderByWithAggregationInput>
    by: Array<AssignmentScalarFieldEnum>
    having?: AssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssignmentCountAggregateInputType | true
    _avg?: AssignmentAvgAggregateInputType
    _sum?: AssignmentSumAggregateInputType
    _min?: AssignmentMinAggregateInputType
    _max?: AssignmentMaxAggregateInputType
  }


  export type AssignmentGroupByOutputType = {
    user_name: string
    segment: number
    course_name: string
    fy: string
    run: number
    assignment_status: Status
    decline_reason: string | null
    createdAt: Date
    updatedAt: Date
    _count: AssignmentCountAggregateOutputType | null
    _avg: AssignmentAvgAggregateOutputType | null
    _sum: AssignmentSumAggregateOutputType | null
    _min: AssignmentMinAggregateOutputType | null
    _max: AssignmentMaxAggregateOutputType | null
  }

  type GetAssignmentGroupByPayload<T extends AssignmentGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], AssignmentGroupByOutputType[P]>
        }
      >
    >


  export type AssignmentSelect = {
    user_name?: boolean
    segment?: boolean
    course_name?: boolean
    fy?: boolean
    run?: boolean
    assignment_status?: boolean
    decline_reason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    User?: boolean | UserArgs
    CourseSegment?: boolean | CourseSegmentArgs
    Notification?: boolean | NotificationFindManyArgs
    _count?: boolean | AssignmentCountOutputTypeArgs
  }

  export type AssignmentInclude = {
    User?: boolean | UserArgs
    CourseSegment?: boolean | CourseSegmentArgs
    Notification?: boolean | NotificationFindManyArgs
    _count?: boolean | AssignmentCountOutputTypeArgs
  }

  export type AssignmentGetPayload<
    S extends boolean | null | undefined | AssignmentArgs,
    U = keyof S
      > = S extends true
        ? Assignment
    : S extends undefined
    ? never
    : S extends AssignmentArgs | AssignmentFindManyArgs
    ?'include' extends U
    ? Assignment  & {
    [P in TrueKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> :
        P extends 'CourseSegment' ? CourseSegmentGetPayload<S['include'][P]> :
        P extends 'Notification' ? Array < NotificationGetPayload<S['include'][P]>>  :
        P extends '_count' ? AssignmentCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> :
        P extends 'CourseSegment' ? CourseSegmentGetPayload<S['select'][P]> :
        P extends 'Notification' ? Array < NotificationGetPayload<S['select'][P]>>  :
        P extends '_count' ? AssignmentCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Assignment ? Assignment[P] : never
  } 
    : Assignment
  : Assignment


  type AssignmentCountArgs = Merge<
    Omit<AssignmentFindManyArgs, 'select' | 'include'> & {
      select?: AssignmentCountAggregateInputType | true
    }
  >

  export interface AssignmentDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Assignment that matches the filter.
     * @param {AssignmentFindUniqueArgs} args - Arguments to find a Assignment
     * @example
     * // Get one Assignment
     * const assignment = await prisma.assignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AssignmentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AssignmentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Assignment'> extends True ? CheckSelect<T, Prisma__AssignmentClient<Assignment>, Prisma__AssignmentClient<AssignmentGetPayload<T>>> : CheckSelect<T, Prisma__AssignmentClient<Assignment | null >, Prisma__AssignmentClient<AssignmentGetPayload<T> | null >>

    /**
     * Find the first Assignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentFindFirstArgs} args - Arguments to find a Assignment
     * @example
     * // Get one Assignment
     * const assignment = await prisma.assignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AssignmentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AssignmentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Assignment'> extends True ? CheckSelect<T, Prisma__AssignmentClient<Assignment>, Prisma__AssignmentClient<AssignmentGetPayload<T>>> : CheckSelect<T, Prisma__AssignmentClient<Assignment | null >, Prisma__AssignmentClient<AssignmentGetPayload<T> | null >>

    /**
     * Find zero or more Assignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Assignments
     * const assignments = await prisma.assignment.findMany()
     * 
     * // Get first 10 Assignments
     * const assignments = await prisma.assignment.findMany({ take: 10 })
     * 
     * // Only select the `user_name`
     * const assignmentWithUser_nameOnly = await prisma.assignment.findMany({ select: { user_name: true } })
     * 
    **/
    findMany<T extends AssignmentFindManyArgs>(
      args?: SelectSubset<T, AssignmentFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Assignment>>, PrismaPromise<Array<AssignmentGetPayload<T>>>>

    /**
     * Create a Assignment.
     * @param {AssignmentCreateArgs} args - Arguments to create a Assignment.
     * @example
     * // Create one Assignment
     * const Assignment = await prisma.assignment.create({
     *   data: {
     *     // ... data to create a Assignment
     *   }
     * })
     * 
    **/
    create<T extends AssignmentCreateArgs>(
      args: SelectSubset<T, AssignmentCreateArgs>
    ): CheckSelect<T, Prisma__AssignmentClient<Assignment>, Prisma__AssignmentClient<AssignmentGetPayload<T>>>

    /**
     * Create many Assignments.
     *     @param {AssignmentCreateManyArgs} args - Arguments to create many Assignments.
     *     @example
     *     // Create many Assignments
     *     const assignment = await prisma.assignment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AssignmentCreateManyArgs>(
      args?: SelectSubset<T, AssignmentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Assignment.
     * @param {AssignmentDeleteArgs} args - Arguments to delete one Assignment.
     * @example
     * // Delete one Assignment
     * const Assignment = await prisma.assignment.delete({
     *   where: {
     *     // ... filter to delete one Assignment
     *   }
     * })
     * 
    **/
    delete<T extends AssignmentDeleteArgs>(
      args: SelectSubset<T, AssignmentDeleteArgs>
    ): CheckSelect<T, Prisma__AssignmentClient<Assignment>, Prisma__AssignmentClient<AssignmentGetPayload<T>>>

    /**
     * Update one Assignment.
     * @param {AssignmentUpdateArgs} args - Arguments to update one Assignment.
     * @example
     * // Update one Assignment
     * const assignment = await prisma.assignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AssignmentUpdateArgs>(
      args: SelectSubset<T, AssignmentUpdateArgs>
    ): CheckSelect<T, Prisma__AssignmentClient<Assignment>, Prisma__AssignmentClient<AssignmentGetPayload<T>>>

    /**
     * Delete zero or more Assignments.
     * @param {AssignmentDeleteManyArgs} args - Arguments to filter Assignments to delete.
     * @example
     * // Delete a few Assignments
     * const { count } = await prisma.assignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AssignmentDeleteManyArgs>(
      args?: SelectSubset<T, AssignmentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Assignments
     * const assignment = await prisma.assignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AssignmentUpdateManyArgs>(
      args: SelectSubset<T, AssignmentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Assignment.
     * @param {AssignmentUpsertArgs} args - Arguments to update or create a Assignment.
     * @example
     * // Update or create a Assignment
     * const assignment = await prisma.assignment.upsert({
     *   create: {
     *     // ... data to create a Assignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Assignment we want to update
     *   }
     * })
    **/
    upsert<T extends AssignmentUpsertArgs>(
      args: SelectSubset<T, AssignmentUpsertArgs>
    ): CheckSelect<T, Prisma__AssignmentClient<Assignment>, Prisma__AssignmentClient<AssignmentGetPayload<T>>>

    /**
     * Count the number of Assignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentCountArgs} args - Arguments to filter Assignments to count.
     * @example
     * // Count the number of Assignments
     * const count = await prisma.assignment.count({
     *   where: {
     *     // ... the filter for the Assignments we want to count
     *   }
     * })
    **/
    count<T extends AssignmentCountArgs>(
      args?: Subset<T, AssignmentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Assignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssignmentAggregateArgs>(args: Subset<T, AssignmentAggregateArgs>): PrismaPromise<GetAssignmentAggregateType<T>>

    /**
     * Group by Assignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssignmentGroupByArgs['orderBy'] }
        : { orderBy?: AssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssignmentGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Assignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AssignmentClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    CourseSegment<T extends CourseSegmentArgs = {}>(args?: Subset<T, CourseSegmentArgs>): CheckSelect<T, Prisma__CourseSegmentClient<CourseSegment | null >, Prisma__CourseSegmentClient<CourseSegmentGetPayload<T> | null >>;

    Notification<T extends NotificationFindManyArgs = {}>(args?: Subset<T, NotificationFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Notification>>, PrismaPromise<Array<NotificationGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Assignment findUnique
   */
  export type AssignmentFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Assignment
     * 
    **/
    select?: AssignmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AssignmentInclude | null
    /**
     * Throw an Error if a Assignment can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Assignment to fetch.
     * 
    **/
    where: AssignmentWhereUniqueInput
  }


  /**
   * Assignment findFirst
   */
  export type AssignmentFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Assignment
     * 
    **/
    select?: AssignmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AssignmentInclude | null
    /**
     * Throw an Error if a Assignment can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Assignment to fetch.
     * 
    **/
    where?: AssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assignments to fetch.
     * 
    **/
    orderBy?: Enumerable<AssignmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assignments.
     * 
    **/
    cursor?: AssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assignments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assignments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assignments.
     * 
    **/
    distinct?: Enumerable<AssignmentScalarFieldEnum>
  }


  /**
   * Assignment findMany
   */
  export type AssignmentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Assignment
     * 
    **/
    select?: AssignmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AssignmentInclude | null
    /**
     * Filter, which Assignments to fetch.
     * 
    **/
    where?: AssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assignments to fetch.
     * 
    **/
    orderBy?: Enumerable<AssignmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Assignments.
     * 
    **/
    cursor?: AssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assignments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assignments.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AssignmentScalarFieldEnum>
  }


  /**
   * Assignment create
   */
  export type AssignmentCreateArgs = {
    /**
     * Select specific fields to fetch from the Assignment
     * 
    **/
    select?: AssignmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AssignmentInclude | null
    /**
     * The data needed to create a Assignment.
     * 
    **/
    data: XOR<AssignmentCreateInput, AssignmentUncheckedCreateInput>
  }


  /**
   * Assignment createMany
   */
  export type AssignmentCreateManyArgs = {
    /**
     * The data used to create many Assignments.
     * 
    **/
    data: Enumerable<AssignmentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Assignment update
   */
  export type AssignmentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Assignment
     * 
    **/
    select?: AssignmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AssignmentInclude | null
    /**
     * The data needed to update a Assignment.
     * 
    **/
    data: XOR<AssignmentUpdateInput, AssignmentUncheckedUpdateInput>
    /**
     * Choose, which Assignment to update.
     * 
    **/
    where: AssignmentWhereUniqueInput
  }


  /**
   * Assignment updateMany
   */
  export type AssignmentUpdateManyArgs = {
    /**
     * The data used to update Assignments.
     * 
    **/
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyInput>
    /**
     * Filter which Assignments to update
     * 
    **/
    where?: AssignmentWhereInput
  }


  /**
   * Assignment upsert
   */
  export type AssignmentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Assignment
     * 
    **/
    select?: AssignmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AssignmentInclude | null
    /**
     * The filter to search for the Assignment to update in case it exists.
     * 
    **/
    where: AssignmentWhereUniqueInput
    /**
     * In case the Assignment found by the `where` argument doesn't exist, create a new Assignment with this data.
     * 
    **/
    create: XOR<AssignmentCreateInput, AssignmentUncheckedCreateInput>
    /**
     * In case the Assignment was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AssignmentUpdateInput, AssignmentUncheckedUpdateInput>
  }


  /**
   * Assignment delete
   */
  export type AssignmentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Assignment
     * 
    **/
    select?: AssignmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AssignmentInclude | null
    /**
     * Filter which Assignment to delete.
     * 
    **/
    where: AssignmentWhereUniqueInput
  }


  /**
   * Assignment deleteMany
   */
  export type AssignmentDeleteManyArgs = {
    /**
     * Filter which Assignments to delete
     * 
    **/
    where?: AssignmentWhereInput
  }


  /**
   * Assignment without action
   */
  export type AssignmentArgs = {
    /**
     * Select specific fields to fetch from the Assignment
     * 
    **/
    select?: AssignmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AssignmentInclude | null
  }



  /**
   * Model Notification
   */


  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    segment: number | null
    run: number | null
  }

  export type NotificationSumAggregateOutputType = {
    segment: number | null
    run: number | null
  }

  export type NotificationMinAggregateOutputType = {
    time_sent: Date | null
    user_name: string | null
    segment: number | null
    course_name: string | null
    fy: string | null
    run: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    time_sent: Date | null
    user_name: string | null
    segment: number | null
    course_name: string | null
    fy: string | null
    run: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    time_sent: number
    user_name: number
    segment: number
    course_name: number
    fy: number
    run: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    segment?: true
    run?: true
  }

  export type NotificationSumAggregateInputType = {
    segment?: true
    run?: true
  }

  export type NotificationMinAggregateInputType = {
    time_sent?: true
    user_name?: true
    segment?: true
    course_name?: true
    fy?: true
    run?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    time_sent?: true
    user_name?: true
    segment?: true
    course_name?: true
    fy?: true
    run?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationCountAggregateInputType = {
    time_sent?: true
    user_name?: true
    segment?: true
    course_name?: true
    fy?: true
    run?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs = {
    /**
     * Filter which Notification to aggregate.
     * 
    **/
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     * 
    **/
    orderBy?: Enumerable<NotificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs = {
    where?: NotificationWhereInput
    orderBy?: Enumerable<NotificationOrderByWithAggregationInput>
    by: Array<NotificationScalarFieldEnum>
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }


  export type NotificationGroupByOutputType = {
    time_sent: Date
    user_name: string
    segment: number
    course_name: string
    fy: string
    run: number
    createdAt: Date
    updatedAt: Date
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = PrismaPromise<
    Array<
      PickArray<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect = {
    time_sent?: boolean
    user_name?: boolean
    segment?: boolean
    course_name?: boolean
    fy?: boolean
    run?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Assignment?: boolean | AssignmentArgs
  }

  export type NotificationInclude = {
    Assignment?: boolean | AssignmentArgs
  }

  export type NotificationGetPayload<
    S extends boolean | null | undefined | NotificationArgs,
    U = keyof S
      > = S extends true
        ? Notification
    : S extends undefined
    ? never
    : S extends NotificationArgs | NotificationFindManyArgs
    ?'include' extends U
    ? Notification  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Assignment' ? AssignmentGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Assignment' ? AssignmentGetPayload<S['select'][P]> :  P extends keyof Notification ? Notification[P] : never
  } 
    : Notification
  : Notification


  type NotificationCountArgs = Merge<
    Omit<NotificationFindManyArgs, 'select' | 'include'> & {
      select?: NotificationCountAggregateInputType | true
    }
  >

  export interface NotificationDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NotificationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, NotificationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Notification'> extends True ? CheckSelect<T, Prisma__NotificationClient<Notification>, Prisma__NotificationClient<NotificationGetPayload<T>>> : CheckSelect<T, Prisma__NotificationClient<Notification | null >, Prisma__NotificationClient<NotificationGetPayload<T> | null >>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NotificationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, NotificationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Notification'> extends True ? CheckSelect<T, Prisma__NotificationClient<Notification>, Prisma__NotificationClient<NotificationGetPayload<T>>> : CheckSelect<T, Prisma__NotificationClient<Notification | null >, Prisma__NotificationClient<NotificationGetPayload<T> | null >>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `time_sent`
     * const notificationWithTime_sentOnly = await prisma.notification.findMany({ select: { time_sent: true } })
     * 
    **/
    findMany<T extends NotificationFindManyArgs>(
      args?: SelectSubset<T, NotificationFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Notification>>, PrismaPromise<Array<NotificationGetPayload<T>>>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
    **/
    create<T extends NotificationCreateArgs>(
      args: SelectSubset<T, NotificationCreateArgs>
    ): CheckSelect<T, Prisma__NotificationClient<Notification>, Prisma__NotificationClient<NotificationGetPayload<T>>>

    /**
     * Create many Notifications.
     *     @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     *     @example
     *     // Create many Notifications
     *     const notification = await prisma.notification.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NotificationCreateManyArgs>(
      args?: SelectSubset<T, NotificationCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
    **/
    delete<T extends NotificationDeleteArgs>(
      args: SelectSubset<T, NotificationDeleteArgs>
    ): CheckSelect<T, Prisma__NotificationClient<Notification>, Prisma__NotificationClient<NotificationGetPayload<T>>>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NotificationUpdateArgs>(
      args: SelectSubset<T, NotificationUpdateArgs>
    ): CheckSelect<T, Prisma__NotificationClient<Notification>, Prisma__NotificationClient<NotificationGetPayload<T>>>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NotificationDeleteManyArgs>(
      args?: SelectSubset<T, NotificationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NotificationUpdateManyArgs>(
      args: SelectSubset<T, NotificationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
    **/
    upsert<T extends NotificationUpsertArgs>(
      args: SelectSubset<T, NotificationUpsertArgs>
    ): CheckSelect<T, Prisma__NotificationClient<Notification>, Prisma__NotificationClient<NotificationGetPayload<T>>>

    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__NotificationClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Assignment<T extends AssignmentArgs = {}>(args?: Subset<T, AssignmentArgs>): CheckSelect<T, Prisma__AssignmentClient<Assignment | null >, Prisma__AssignmentClient<AssignmentGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Notification
     * 
    **/
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationInclude | null
    /**
     * Throw an Error if a Notification can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Notification to fetch.
     * 
    **/
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Notification
     * 
    **/
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationInclude | null
    /**
     * Throw an Error if a Notification can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Notification to fetch.
     * 
    **/
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     * 
    **/
    orderBy?: Enumerable<NotificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     * 
    **/
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     * 
    **/
    distinct?: Enumerable<NotificationScalarFieldEnum>
  }


  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Notification
     * 
    **/
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationInclude | null
    /**
     * Filter, which Notifications to fetch.
     * 
    **/
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     * 
    **/
    orderBy?: Enumerable<NotificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     * 
    **/
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     * 
    **/
    skip?: number
    distinct?: Enumerable<NotificationScalarFieldEnum>
  }


  /**
   * Notification create
   */
  export type NotificationCreateArgs = {
    /**
     * Select specific fields to fetch from the Notification
     * 
    **/
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationInclude | null
    /**
     * The data needed to create a Notification.
     * 
    **/
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }


  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs = {
    /**
     * The data used to create many Notifications.
     * 
    **/
    data: Enumerable<NotificationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Notification update
   */
  export type NotificationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Notification
     * 
    **/
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationInclude | null
    /**
     * The data needed to update a Notification.
     * 
    **/
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     * 
    **/
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs = {
    /**
     * The data used to update Notifications.
     * 
    **/
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     * 
    **/
    where?: NotificationWhereInput
  }


  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Notification
     * 
    **/
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationInclude | null
    /**
     * The filter to search for the Notification to update in case it exists.
     * 
    **/
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     * 
    **/
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }


  /**
   * Notification delete
   */
  export type NotificationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Notification
     * 
    **/
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationInclude | null
    /**
     * Filter which Notification to delete.
     * 
    **/
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs = {
    /**
     * Filter which Notifications to delete
     * 
    **/
    where?: NotificationWhereInput
  }


  /**
   * Notification without action
   */
  export type NotificationArgs = {
    /**
     * Select specific fields to fetch from the Notification
     * 
    **/
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const FiscalYearScalarFieldEnum: {
    fy: 'fy',
    revenue_target: 'revenue_target',
    day_limit: 'day_limit',
    blackout_dates: 'blackout_dates',
    low_manpower_dates: 'low_manpower_dates'
  };

  export type FiscalYearScalarFieldEnum = (typeof FiscalYearScalarFieldEnum)[keyof typeof FiscalYearScalarFieldEnum]


  export const ProgrammeScalarFieldEnum: {
    programme_name: 'programme_name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProgrammeScalarFieldEnum = (typeof ProgrammeScalarFieldEnum)[keyof typeof ProgrammeScalarFieldEnum]


  export const CourseScalarFieldEnum: {
    course_name: 'course_name',
    programme_name: 'programme_name',
    course_code: 'course_code',
    delivery_mode: 'delivery_mode',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CourseScalarFieldEnum = (typeof CourseScalarFieldEnum)[keyof typeof CourseScalarFieldEnum]


  export const CourseConfigScalarFieldEnum: {
    course_name: 'course_name',
    fy: 'fy',
    days_per_run: 'days_per_run',
    runs_per_year: 'runs_per_year',
    course_fees: 'course_fees',
    start_time: 'start_time',
    end_time: 'end_time',
    days_to_avoid: 'days_to_avoid',
    avoid_month_start: 'avoid_month_start',
    avoid_month_end: 'avoid_month_end',
    split: 'split',
    trainers: 'trainers',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CourseConfigScalarFieldEnum = (typeof CourseConfigScalarFieldEnum)[keyof typeof CourseConfigScalarFieldEnum]


  export const CourseRunScalarFieldEnum: {
    run: 'run',
    course_name: 'course_name',
    fy: 'fy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CourseRunScalarFieldEnum = (typeof CourseRunScalarFieldEnum)[keyof typeof CourseRunScalarFieldEnum]


  export const CourseSegmentScalarFieldEnum: {
    segment: 'segment',
    course_name: 'course_name',
    fy: 'fy',
    run: 'run',
    dates: 'dates',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CourseSegmentScalarFieldEnum = (typeof CourseSegmentScalarFieldEnum)[keyof typeof CourseSegmentScalarFieldEnum]


  export const UserScalarFieldEnum: {
    user_name: 'user_name',
    password: 'password',
    email: 'email',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AssignmentScalarFieldEnum: {
    user_name: 'user_name',
    segment: 'segment',
    course_name: 'course_name',
    fy: 'fy',
    run: 'run',
    assignment_status: 'assignment_status',
    decline_reason: 'decline_reason',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AssignmentScalarFieldEnum = (typeof AssignmentScalarFieldEnum)[keyof typeof AssignmentScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    time_sent: 'time_sent',
    user_name: 'user_name',
    segment: 'segment',
    course_name: 'course_name',
    fy: 'fy',
    run: 'run',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: 'DbNull',
    JsonNull: 'JsonNull'
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: 'JsonNull'
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: 'DbNull',
    JsonNull: 'JsonNull',
    AnyNull: 'AnyNull'
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Deep Input Types
   */


  export type FiscalYearWhereInput = {
    AND?: Enumerable<FiscalYearWhereInput>
    OR?: Enumerable<FiscalYearWhereInput>
    NOT?: Enumerable<FiscalYearWhereInput>
    fy?: StringFilter | string
    revenue_target?: FloatNullableFilter | number | null
    day_limit?: IntNullableFilter | number | null
    blackout_dates?: JsonNullableFilter
    low_manpower_dates?: JsonNullableFilter
    CourseConfig?: CourseConfigListRelationFilter
  }

  export type FiscalYearOrderByWithRelationInput = {
    fy?: SortOrder
    revenue_target?: SortOrder
    day_limit?: SortOrder
    blackout_dates?: SortOrder
    low_manpower_dates?: SortOrder
    CourseConfig?: CourseConfigOrderByRelationAggregateInput
  }

  export type FiscalYearWhereUniqueInput = {
    fy?: string
  }

  export type FiscalYearOrderByWithAggregationInput = {
    fy?: SortOrder
    revenue_target?: SortOrder
    day_limit?: SortOrder
    blackout_dates?: SortOrder
    low_manpower_dates?: SortOrder
    _count?: FiscalYearCountOrderByAggregateInput
    _avg?: FiscalYearAvgOrderByAggregateInput
    _max?: FiscalYearMaxOrderByAggregateInput
    _min?: FiscalYearMinOrderByAggregateInput
    _sum?: FiscalYearSumOrderByAggregateInput
  }

  export type FiscalYearScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FiscalYearScalarWhereWithAggregatesInput>
    OR?: Enumerable<FiscalYearScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FiscalYearScalarWhereWithAggregatesInput>
    fy?: StringWithAggregatesFilter | string
    revenue_target?: FloatNullableWithAggregatesFilter | number | null
    day_limit?: IntNullableWithAggregatesFilter | number | null
    blackout_dates?: JsonNullableWithAggregatesFilter
    low_manpower_dates?: JsonNullableWithAggregatesFilter
  }

  export type ProgrammeWhereInput = {
    AND?: Enumerable<ProgrammeWhereInput>
    OR?: Enumerable<ProgrammeWhereInput>
    NOT?: Enumerable<ProgrammeWhereInput>
    programme_name?: StringFilter | string
    createdAt?: DateTimeNullableFilter | Date | string | null
    updatedAt?: DateTimeNullableFilter | Date | string | null
    Course?: CourseListRelationFilter
  }

  export type ProgrammeOrderByWithRelationInput = {
    programme_name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Course?: CourseOrderByRelationAggregateInput
  }

  export type ProgrammeWhereUniqueInput = {
    programme_name?: string
  }

  export type ProgrammeOrderByWithAggregationInput = {
    programme_name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProgrammeCountOrderByAggregateInput
    _max?: ProgrammeMaxOrderByAggregateInput
    _min?: ProgrammeMinOrderByAggregateInput
  }

  export type ProgrammeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProgrammeScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProgrammeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProgrammeScalarWhereWithAggregatesInput>
    programme_name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type CourseWhereInput = {
    AND?: Enumerable<CourseWhereInput>
    OR?: Enumerable<CourseWhereInput>
    NOT?: Enumerable<CourseWhereInput>
    course_name?: StringFilter | string
    programme_name?: StringFilter | string
    course_code?: StringFilter | string
    delivery_mode?: EnumDeliveryModeFilter | DeliveryMode
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    CourseConfig?: CourseConfigListRelationFilter
    Programme?: XOR<ProgrammeRelationFilter, ProgrammeWhereInput>
  }

  export type CourseOrderByWithRelationInput = {
    course_name?: SortOrder
    programme_name?: SortOrder
    course_code?: SortOrder
    delivery_mode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    CourseConfig?: CourseConfigOrderByRelationAggregateInput
    Programme?: ProgrammeOrderByWithRelationInput
  }

  export type CourseWhereUniqueInput = {
    course_name?: string
  }

  export type CourseOrderByWithAggregationInput = {
    course_name?: SortOrder
    programme_name?: SortOrder
    course_code?: SortOrder
    delivery_mode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CourseCountOrderByAggregateInput
    _max?: CourseMaxOrderByAggregateInput
    _min?: CourseMinOrderByAggregateInput
  }

  export type CourseScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CourseScalarWhereWithAggregatesInput>
    OR?: Enumerable<CourseScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CourseScalarWhereWithAggregatesInput>
    course_name?: StringWithAggregatesFilter | string
    programme_name?: StringWithAggregatesFilter | string
    course_code?: StringWithAggregatesFilter | string
    delivery_mode?: EnumDeliveryModeWithAggregatesFilter | DeliveryMode
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type CourseConfigWhereInput = {
    AND?: Enumerable<CourseConfigWhereInput>
    OR?: Enumerable<CourseConfigWhereInput>
    NOT?: Enumerable<CourseConfigWhereInput>
    course_name?: StringFilter | string
    fy?: StringFilter | string
    days_per_run?: IntFilter | number
    runs_per_year?: IntFilter | number
    course_fees?: FloatNullableFilter | number | null
    start_time?: DateTimeNullableFilter | Date | string | null
    end_time?: DateTimeNullableFilter | Date | string | null
    days_to_avoid?: IntNullableListFilter
    avoid_month_start?: BoolFilter | boolean
    avoid_month_end?: BoolFilter | boolean
    split?: IntNullableListFilter
    trainers?: JsonFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    FiscalYear?: XOR<FiscalYearRelationFilter, FiscalYearWhereInput>
    Course?: XOR<CourseRelationFilter, CourseWhereInput>
    CourseRun?: CourseRunListRelationFilter
  }

  export type CourseConfigOrderByWithRelationInput = {
    course_name?: SortOrder
    fy?: SortOrder
    days_per_run?: SortOrder
    runs_per_year?: SortOrder
    course_fees?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    days_to_avoid?: SortOrder
    avoid_month_start?: SortOrder
    avoid_month_end?: SortOrder
    split?: SortOrder
    trainers?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    FiscalYear?: FiscalYearOrderByWithRelationInput
    Course?: CourseOrderByWithRelationInput
    CourseRun?: CourseRunOrderByRelationAggregateInput
  }

  export type CourseConfigWhereUniqueInput = {
    course_name_fy?: CourseConfigCourse_nameFyCompoundUniqueInput
  }

  export type CourseConfigOrderByWithAggregationInput = {
    course_name?: SortOrder
    fy?: SortOrder
    days_per_run?: SortOrder
    runs_per_year?: SortOrder
    course_fees?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    days_to_avoid?: SortOrder
    avoid_month_start?: SortOrder
    avoid_month_end?: SortOrder
    split?: SortOrder
    trainers?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CourseConfigCountOrderByAggregateInput
    _avg?: CourseConfigAvgOrderByAggregateInput
    _max?: CourseConfigMaxOrderByAggregateInput
    _min?: CourseConfigMinOrderByAggregateInput
    _sum?: CourseConfigSumOrderByAggregateInput
  }

  export type CourseConfigScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CourseConfigScalarWhereWithAggregatesInput>
    OR?: Enumerable<CourseConfigScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CourseConfigScalarWhereWithAggregatesInput>
    course_name?: StringWithAggregatesFilter | string
    fy?: StringWithAggregatesFilter | string
    days_per_run?: IntWithAggregatesFilter | number
    runs_per_year?: IntWithAggregatesFilter | number
    course_fees?: FloatNullableWithAggregatesFilter | number | null
    start_time?: DateTimeNullableWithAggregatesFilter | Date | string | null
    end_time?: DateTimeNullableWithAggregatesFilter | Date | string | null
    days_to_avoid?: IntNullableListFilter
    avoid_month_start?: BoolWithAggregatesFilter | boolean
    avoid_month_end?: BoolWithAggregatesFilter | boolean
    split?: IntNullableListFilter
    trainers?: JsonWithAggregatesFilter
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type CourseRunWhereInput = {
    AND?: Enumerable<CourseRunWhereInput>
    OR?: Enumerable<CourseRunWhereInput>
    NOT?: Enumerable<CourseRunWhereInput>
    run?: IntFilter | number
    course_name?: StringFilter | string
    fy?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    CourseConfig?: XOR<CourseConfigRelationFilter, CourseConfigWhereInput>
    CourseSegment?: CourseSegmentListRelationFilter
  }

  export type CourseRunOrderByWithRelationInput = {
    run?: SortOrder
    course_name?: SortOrder
    fy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    CourseConfig?: CourseConfigOrderByWithRelationInput
    CourseSegment?: CourseSegmentOrderByRelationAggregateInput
  }

  export type CourseRunWhereUniqueInput = {
    run_course_name_fy?: CourseRunRunCourse_nameFyCompoundUniqueInput
  }

  export type CourseRunOrderByWithAggregationInput = {
    run?: SortOrder
    course_name?: SortOrder
    fy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CourseRunCountOrderByAggregateInput
    _avg?: CourseRunAvgOrderByAggregateInput
    _max?: CourseRunMaxOrderByAggregateInput
    _min?: CourseRunMinOrderByAggregateInput
    _sum?: CourseRunSumOrderByAggregateInput
  }

  export type CourseRunScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CourseRunScalarWhereWithAggregatesInput>
    OR?: Enumerable<CourseRunScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CourseRunScalarWhereWithAggregatesInput>
    run?: IntWithAggregatesFilter | number
    course_name?: StringWithAggregatesFilter | string
    fy?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type CourseSegmentWhereInput = {
    AND?: Enumerable<CourseSegmentWhereInput>
    OR?: Enumerable<CourseSegmentWhereInput>
    NOT?: Enumerable<CourseSegmentWhereInput>
    segment?: IntFilter | number
    course_name?: StringFilter | string
    fy?: StringFilter | string
    run?: IntFilter | number
    dates?: DateTimeNullableListFilter
    status?: EnumStatusFilter | Status
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    CourseRun?: XOR<CourseRunRelationFilter, CourseRunWhereInput>
    Assignment?: AssignmentListRelationFilter
  }

  export type CourseSegmentOrderByWithRelationInput = {
    segment?: SortOrder
    course_name?: SortOrder
    fy?: SortOrder
    run?: SortOrder
    dates?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    CourseRun?: CourseRunOrderByWithRelationInput
    Assignment?: AssignmentOrderByRelationAggregateInput
  }

  export type CourseSegmentWhereUniqueInput = {
    segment_course_name_fy_run?: CourseSegmentSegmentCourse_nameFyRunCompoundUniqueInput
  }

  export type CourseSegmentOrderByWithAggregationInput = {
    segment?: SortOrder
    course_name?: SortOrder
    fy?: SortOrder
    run?: SortOrder
    dates?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CourseSegmentCountOrderByAggregateInput
    _avg?: CourseSegmentAvgOrderByAggregateInput
    _max?: CourseSegmentMaxOrderByAggregateInput
    _min?: CourseSegmentMinOrderByAggregateInput
    _sum?: CourseSegmentSumOrderByAggregateInput
  }

  export type CourseSegmentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CourseSegmentScalarWhereWithAggregatesInput>
    OR?: Enumerable<CourseSegmentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CourseSegmentScalarWhereWithAggregatesInput>
    segment?: IntWithAggregatesFilter | number
    course_name?: StringWithAggregatesFilter | string
    fy?: StringWithAggregatesFilter | string
    run?: IntWithAggregatesFilter | number
    dates?: DateTimeNullableListFilter
    status?: EnumStatusWithAggregatesFilter | Status
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    user_name?: StringFilter | string
    password?: StringFilter | string
    email?: StringFilter | string
    role?: EnumRoleFilter | Role
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    Assignment?: AssignmentListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    user_name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Assignment?: AssignmentOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    user_name?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    user_name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    user_name?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    role?: EnumRoleWithAggregatesFilter | Role
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type AssignmentWhereInput = {
    AND?: Enumerable<AssignmentWhereInput>
    OR?: Enumerable<AssignmentWhereInput>
    NOT?: Enumerable<AssignmentWhereInput>
    user_name?: StringFilter | string
    segment?: IntFilter | number
    course_name?: StringFilter | string
    fy?: StringFilter | string
    run?: IntFilter | number
    assignment_status?: EnumStatusFilter | Status
    decline_reason?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    User?: XOR<UserRelationFilter, UserWhereInput>
    CourseSegment?: XOR<CourseSegmentRelationFilter, CourseSegmentWhereInput>
    Notification?: NotificationListRelationFilter
  }

  export type AssignmentOrderByWithRelationInput = {
    user_name?: SortOrder
    segment?: SortOrder
    course_name?: SortOrder
    fy?: SortOrder
    run?: SortOrder
    assignment_status?: SortOrder
    decline_reason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    User?: UserOrderByWithRelationInput
    CourseSegment?: CourseSegmentOrderByWithRelationInput
    Notification?: NotificationOrderByRelationAggregateInput
  }

  export type AssignmentWhereUniqueInput = {
    user_name_segment_course_name_fy_run?: AssignmentUser_nameSegmentCourse_nameFyRunCompoundUniqueInput
  }

  export type AssignmentOrderByWithAggregationInput = {
    user_name?: SortOrder
    segment?: SortOrder
    course_name?: SortOrder
    fy?: SortOrder
    run?: SortOrder
    assignment_status?: SortOrder
    decline_reason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AssignmentCountOrderByAggregateInput
    _avg?: AssignmentAvgOrderByAggregateInput
    _max?: AssignmentMaxOrderByAggregateInput
    _min?: AssignmentMinOrderByAggregateInput
    _sum?: AssignmentSumOrderByAggregateInput
  }

  export type AssignmentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AssignmentScalarWhereWithAggregatesInput>
    OR?: Enumerable<AssignmentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AssignmentScalarWhereWithAggregatesInput>
    user_name?: StringWithAggregatesFilter | string
    segment?: IntWithAggregatesFilter | number
    course_name?: StringWithAggregatesFilter | string
    fy?: StringWithAggregatesFilter | string
    run?: IntWithAggregatesFilter | number
    assignment_status?: EnumStatusWithAggregatesFilter | Status
    decline_reason?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type NotificationWhereInput = {
    AND?: Enumerable<NotificationWhereInput>
    OR?: Enumerable<NotificationWhereInput>
    NOT?: Enumerable<NotificationWhereInput>
    time_sent?: DateTimeFilter | Date | string
    user_name?: StringFilter | string
    segment?: IntFilter | number
    course_name?: StringFilter | string
    fy?: StringFilter | string
    run?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    Assignment?: XOR<AssignmentRelationFilter, AssignmentWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    time_sent?: SortOrder
    user_name?: SortOrder
    segment?: SortOrder
    course_name?: SortOrder
    fy?: SortOrder
    run?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Assignment?: AssignmentOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = {
    time_sent_user_name_segment_course_name_fy_run?: NotificationTime_sentUser_nameSegmentCourse_nameFyRunCompoundUniqueInput
  }

  export type NotificationOrderByWithAggregationInput = {
    time_sent?: SortOrder
    user_name?: SortOrder
    segment?: SortOrder
    course_name?: SortOrder
    fy?: SortOrder
    run?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _avg?: NotificationAvgOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
    _sum?: NotificationSumOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<NotificationScalarWhereWithAggregatesInput>
    OR?: Enumerable<NotificationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<NotificationScalarWhereWithAggregatesInput>
    time_sent?: DateTimeWithAggregatesFilter | Date | string
    user_name?: StringWithAggregatesFilter | string
    segment?: IntWithAggregatesFilter | number
    course_name?: StringWithAggregatesFilter | string
    fy?: StringWithAggregatesFilter | string
    run?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FiscalYearCreateInput = {
    fy: string
    revenue_target?: number | null
    day_limit?: number | null
    blackout_dates?: NullableJsonNullValueInput | InputJsonValue
    low_manpower_dates?: NullableJsonNullValueInput | InputJsonValue
    CourseConfig?: CourseConfigCreateNestedManyWithoutFiscalYearInput
  }

  export type FiscalYearUncheckedCreateInput = {
    fy: string
    revenue_target?: number | null
    day_limit?: number | null
    blackout_dates?: NullableJsonNullValueInput | InputJsonValue
    low_manpower_dates?: NullableJsonNullValueInput | InputJsonValue
    CourseConfig?: CourseConfigUncheckedCreateNestedManyWithoutFiscalYearInput
  }

  export type FiscalYearUpdateInput = {
    fy?: StringFieldUpdateOperationsInput | string
    revenue_target?: NullableFloatFieldUpdateOperationsInput | number | null
    day_limit?: NullableIntFieldUpdateOperationsInput | number | null
    blackout_dates?: NullableJsonNullValueInput | InputJsonValue
    low_manpower_dates?: NullableJsonNullValueInput | InputJsonValue
    CourseConfig?: CourseConfigUpdateManyWithoutFiscalYearInput
  }

  export type FiscalYearUncheckedUpdateInput = {
    fy?: StringFieldUpdateOperationsInput | string
    revenue_target?: NullableFloatFieldUpdateOperationsInput | number | null
    day_limit?: NullableIntFieldUpdateOperationsInput | number | null
    blackout_dates?: NullableJsonNullValueInput | InputJsonValue
    low_manpower_dates?: NullableJsonNullValueInput | InputJsonValue
    CourseConfig?: CourseConfigUncheckedUpdateManyWithoutFiscalYearInput
  }

  export type FiscalYearCreateManyInput = {
    fy: string
    revenue_target?: number | null
    day_limit?: number | null
    blackout_dates?: NullableJsonNullValueInput | InputJsonValue
    low_manpower_dates?: NullableJsonNullValueInput | InputJsonValue
  }

  export type FiscalYearUpdateManyMutationInput = {
    fy?: StringFieldUpdateOperationsInput | string
    revenue_target?: NullableFloatFieldUpdateOperationsInput | number | null
    day_limit?: NullableIntFieldUpdateOperationsInput | number | null
    blackout_dates?: NullableJsonNullValueInput | InputJsonValue
    low_manpower_dates?: NullableJsonNullValueInput | InputJsonValue
  }

  export type FiscalYearUncheckedUpdateManyInput = {
    fy?: StringFieldUpdateOperationsInput | string
    revenue_target?: NullableFloatFieldUpdateOperationsInput | number | null
    day_limit?: NullableIntFieldUpdateOperationsInput | number | null
    blackout_dates?: NullableJsonNullValueInput | InputJsonValue
    low_manpower_dates?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ProgrammeCreateInput = {
    programme_name: string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Course?: CourseCreateNestedManyWithoutProgrammeInput
  }

  export type ProgrammeUncheckedCreateInput = {
    programme_name: string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Course?: CourseUncheckedCreateNestedManyWithoutProgrammeInput
  }

  export type ProgrammeUpdateInput = {
    programme_name?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Course?: CourseUpdateManyWithoutProgrammeInput
  }

  export type ProgrammeUncheckedUpdateInput = {
    programme_name?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Course?: CourseUncheckedUpdateManyWithoutProgrammeInput
  }

  export type ProgrammeCreateManyInput = {
    programme_name: string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type ProgrammeUpdateManyMutationInput = {
    programme_name?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProgrammeUncheckedUpdateManyInput = {
    programme_name?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourseCreateInput = {
    course_name: string
    course_code: string
    delivery_mode: DeliveryMode
    createdAt?: Date | string
    updatedAt?: Date | string
    CourseConfig?: CourseConfigCreateNestedManyWithoutCourseInput
    Programme: ProgrammeCreateNestedOneWithoutCourseInput
  }

  export type CourseUncheckedCreateInput = {
    course_name: string
    programme_name: string
    course_code: string
    delivery_mode: DeliveryMode
    createdAt?: Date | string
    updatedAt?: Date | string
    CourseConfig?: CourseConfigUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseUpdateInput = {
    course_name?: StringFieldUpdateOperationsInput | string
    course_code?: StringFieldUpdateOperationsInput | string
    delivery_mode?: EnumDeliveryModeFieldUpdateOperationsInput | DeliveryMode
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CourseConfig?: CourseConfigUpdateManyWithoutCourseInput
    Programme?: ProgrammeUpdateOneRequiredWithoutCourseInput
  }

  export type CourseUncheckedUpdateInput = {
    course_name?: StringFieldUpdateOperationsInput | string
    programme_name?: StringFieldUpdateOperationsInput | string
    course_code?: StringFieldUpdateOperationsInput | string
    delivery_mode?: EnumDeliveryModeFieldUpdateOperationsInput | DeliveryMode
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CourseConfig?: CourseConfigUncheckedUpdateManyWithoutCourseInput
  }

  export type CourseCreateManyInput = {
    course_name: string
    programme_name: string
    course_code: string
    delivery_mode: DeliveryMode
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseUpdateManyMutationInput = {
    course_name?: StringFieldUpdateOperationsInput | string
    course_code?: StringFieldUpdateOperationsInput | string
    delivery_mode?: EnumDeliveryModeFieldUpdateOperationsInput | DeliveryMode
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseUncheckedUpdateManyInput = {
    course_name?: StringFieldUpdateOperationsInput | string
    programme_name?: StringFieldUpdateOperationsInput | string
    course_code?: StringFieldUpdateOperationsInput | string
    delivery_mode?: EnumDeliveryModeFieldUpdateOperationsInput | DeliveryMode
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseConfigCreateInput = {
    days_per_run: number
    runs_per_year: number
    course_fees?: number | null
    start_time?: Date | string | null
    end_time?: Date | string | null
    days_to_avoid?: CourseConfigCreatedays_to_avoidInput | Enumerable<number>
    avoid_month_start: boolean
    avoid_month_end: boolean
    split?: CourseConfigCreatesplitInput | Enumerable<number>
    trainers: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    FiscalYear: FiscalYearCreateNestedOneWithoutCourseConfigInput
    Course: CourseCreateNestedOneWithoutCourseConfigInput
    CourseRun?: CourseRunCreateNestedManyWithoutCourseConfigInput
  }

  export type CourseConfigUncheckedCreateInput = {
    course_name: string
    fy: string
    days_per_run: number
    runs_per_year: number
    course_fees?: number | null
    start_time?: Date | string | null
    end_time?: Date | string | null
    days_to_avoid?: CourseConfigCreatedays_to_avoidInput | Enumerable<number>
    avoid_month_start: boolean
    avoid_month_end: boolean
    split?: CourseConfigCreatesplitInput | Enumerable<number>
    trainers: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    CourseRun?: CourseRunUncheckedCreateNestedManyWithoutCourseConfigInput
  }

  export type CourseConfigUpdateInput = {
    days_per_run?: IntFieldUpdateOperationsInput | number
    runs_per_year?: IntFieldUpdateOperationsInput | number
    course_fees?: NullableFloatFieldUpdateOperationsInput | number | null
    start_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    days_to_avoid?: CourseConfigUpdatedays_to_avoidInput | Enumerable<number>
    avoid_month_start?: BoolFieldUpdateOperationsInput | boolean
    avoid_month_end?: BoolFieldUpdateOperationsInput | boolean
    split?: CourseConfigUpdatesplitInput | Enumerable<number>
    trainers?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    FiscalYear?: FiscalYearUpdateOneRequiredWithoutCourseConfigInput
    Course?: CourseUpdateOneRequiredWithoutCourseConfigInput
    CourseRun?: CourseRunUpdateManyWithoutCourseConfigInput
  }

  export type CourseConfigUncheckedUpdateInput = {
    course_name?: StringFieldUpdateOperationsInput | string
    fy?: StringFieldUpdateOperationsInput | string
    days_per_run?: IntFieldUpdateOperationsInput | number
    runs_per_year?: IntFieldUpdateOperationsInput | number
    course_fees?: NullableFloatFieldUpdateOperationsInput | number | null
    start_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    days_to_avoid?: CourseConfigUpdatedays_to_avoidInput | Enumerable<number>
    avoid_month_start?: BoolFieldUpdateOperationsInput | boolean
    avoid_month_end?: BoolFieldUpdateOperationsInput | boolean
    split?: CourseConfigUpdatesplitInput | Enumerable<number>
    trainers?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CourseRun?: CourseRunUncheckedUpdateManyWithoutCourseConfigInput
  }

  export type CourseConfigCreateManyInput = {
    course_name: string
    fy: string
    days_per_run: number
    runs_per_year: number
    course_fees?: number | null
    start_time?: Date | string | null
    end_time?: Date | string | null
    days_to_avoid?: CourseConfigCreatedays_to_avoidInput | Enumerable<number>
    avoid_month_start: boolean
    avoid_month_end: boolean
    split?: CourseConfigCreatesplitInput | Enumerable<number>
    trainers: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseConfigUpdateManyMutationInput = {
    days_per_run?: IntFieldUpdateOperationsInput | number
    runs_per_year?: IntFieldUpdateOperationsInput | number
    course_fees?: NullableFloatFieldUpdateOperationsInput | number | null
    start_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    days_to_avoid?: CourseConfigUpdatedays_to_avoidInput | Enumerable<number>
    avoid_month_start?: BoolFieldUpdateOperationsInput | boolean
    avoid_month_end?: BoolFieldUpdateOperationsInput | boolean
    split?: CourseConfigUpdatesplitInput | Enumerable<number>
    trainers?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseConfigUncheckedUpdateManyInput = {
    course_name?: StringFieldUpdateOperationsInput | string
    fy?: StringFieldUpdateOperationsInput | string
    days_per_run?: IntFieldUpdateOperationsInput | number
    runs_per_year?: IntFieldUpdateOperationsInput | number
    course_fees?: NullableFloatFieldUpdateOperationsInput | number | null
    start_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    days_to_avoid?: CourseConfigUpdatedays_to_avoidInput | Enumerable<number>
    avoid_month_start?: BoolFieldUpdateOperationsInput | boolean
    avoid_month_end?: BoolFieldUpdateOperationsInput | boolean
    split?: CourseConfigUpdatesplitInput | Enumerable<number>
    trainers?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseRunCreateInput = {
    run: number
    createdAt?: Date | string
    updatedAt?: Date | string
    CourseConfig: CourseConfigCreateNestedOneWithoutCourseRunInput
    CourseSegment?: CourseSegmentCreateNestedManyWithoutCourseRunInput
  }

  export type CourseRunUncheckedCreateInput = {
    run: number
    course_name: string
    fy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    CourseSegment?: CourseSegmentUncheckedCreateNestedManyWithoutCourseRunInput
  }

  export type CourseRunUpdateInput = {
    run?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CourseConfig?: CourseConfigUpdateOneRequiredWithoutCourseRunInput
    CourseSegment?: CourseSegmentUpdateManyWithoutCourseRunInput
  }

  export type CourseRunUncheckedUpdateInput = {
    run?: IntFieldUpdateOperationsInput | number
    course_name?: StringFieldUpdateOperationsInput | string
    fy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CourseSegment?: CourseSegmentUncheckedUpdateManyWithoutCourseRunInput
  }

  export type CourseRunCreateManyInput = {
    run: number
    course_name: string
    fy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseRunUpdateManyMutationInput = {
    run?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseRunUncheckedUpdateManyInput = {
    run?: IntFieldUpdateOperationsInput | number
    course_name?: StringFieldUpdateOperationsInput | string
    fy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseSegmentCreateInput = {
    segment: number
    dates?: CourseSegmentCreatedatesInput | Enumerable<Date> | Enumerable<string>
    status?: Status
    createdAt?: Date | string
    updatedAt?: Date | string
    CourseRun: CourseRunCreateNestedOneWithoutCourseSegmentInput
    Assignment?: AssignmentCreateNestedManyWithoutCourseSegmentInput
  }

  export type CourseSegmentUncheckedCreateInput = {
    segment: number
    course_name: string
    fy: string
    run: number
    dates?: CourseSegmentCreatedatesInput | Enumerable<Date> | Enumerable<string>
    status?: Status
    createdAt?: Date | string
    updatedAt?: Date | string
    Assignment?: AssignmentUncheckedCreateNestedManyWithoutCourseSegmentInput
  }

  export type CourseSegmentUpdateInput = {
    segment?: IntFieldUpdateOperationsInput | number
    dates?: CourseSegmentUpdatedatesInput | Enumerable<Date> | Enumerable<string>
    status?: EnumStatusFieldUpdateOperationsInput | Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CourseRun?: CourseRunUpdateOneRequiredWithoutCourseSegmentInput
    Assignment?: AssignmentUpdateManyWithoutCourseSegmentInput
  }

  export type CourseSegmentUncheckedUpdateInput = {
    segment?: IntFieldUpdateOperationsInput | number
    course_name?: StringFieldUpdateOperationsInput | string
    fy?: StringFieldUpdateOperationsInput | string
    run?: IntFieldUpdateOperationsInput | number
    dates?: CourseSegmentUpdatedatesInput | Enumerable<Date> | Enumerable<string>
    status?: EnumStatusFieldUpdateOperationsInput | Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Assignment?: AssignmentUncheckedUpdateManyWithoutCourseSegmentInput
  }

  export type CourseSegmentCreateManyInput = {
    segment: number
    course_name: string
    fy: string
    run: number
    dates?: CourseSegmentCreatedatesInput | Enumerable<Date> | Enumerable<string>
    status?: Status
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseSegmentUpdateManyMutationInput = {
    segment?: IntFieldUpdateOperationsInput | number
    dates?: CourseSegmentUpdatedatesInput | Enumerable<Date> | Enumerable<string>
    status?: EnumStatusFieldUpdateOperationsInput | Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseSegmentUncheckedUpdateManyInput = {
    segment?: IntFieldUpdateOperationsInput | number
    course_name?: StringFieldUpdateOperationsInput | string
    fy?: StringFieldUpdateOperationsInput | string
    run?: IntFieldUpdateOperationsInput | number
    dates?: CourseSegmentUpdatedatesInput | Enumerable<Date> | Enumerable<string>
    status?: EnumStatusFieldUpdateOperationsInput | Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    user_name: string
    password: string
    email: string
    role?: Role
    createdAt?: Date | string
    updatedAt?: Date | string
    Assignment?: AssignmentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    user_name: string
    password: string
    email: string
    role?: Role
    createdAt?: Date | string
    updatedAt?: Date | string
    Assignment?: AssignmentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Assignment?: AssignmentUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Assignment?: AssignmentUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateManyInput = {
    user_name: string
    password: string
    email: string
    role?: Role
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssignmentCreateInput = {
    assignment_status?: Status
    decline_reason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    User: UserCreateNestedOneWithoutAssignmentInput
    CourseSegment: CourseSegmentCreateNestedOneWithoutAssignmentInput
    Notification?: NotificationCreateNestedManyWithoutAssignmentInput
  }

  export type AssignmentUncheckedCreateInput = {
    user_name: string
    segment: number
    course_name: string
    fy: string
    run: number
    assignment_status?: Status
    decline_reason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Notification?: NotificationUncheckedCreateNestedManyWithoutAssignmentInput
  }

  export type AssignmentUpdateInput = {
    assignment_status?: EnumStatusFieldUpdateOperationsInput | Status
    decline_reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutAssignmentInput
    CourseSegment?: CourseSegmentUpdateOneRequiredWithoutAssignmentInput
    Notification?: NotificationUpdateManyWithoutAssignmentInput
  }

  export type AssignmentUncheckedUpdateInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    segment?: IntFieldUpdateOperationsInput | number
    course_name?: StringFieldUpdateOperationsInput | string
    fy?: StringFieldUpdateOperationsInput | string
    run?: IntFieldUpdateOperationsInput | number
    assignment_status?: EnumStatusFieldUpdateOperationsInput | Status
    decline_reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Notification?: NotificationUncheckedUpdateManyWithoutAssignmentInput
  }

  export type AssignmentCreateManyInput = {
    user_name: string
    segment: number
    course_name: string
    fy: string
    run: number
    assignment_status?: Status
    decline_reason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssignmentUpdateManyMutationInput = {
    assignment_status?: EnumStatusFieldUpdateOperationsInput | Status
    decline_reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssignmentUncheckedUpdateManyInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    segment?: IntFieldUpdateOperationsInput | number
    course_name?: StringFieldUpdateOperationsInput | string
    fy?: StringFieldUpdateOperationsInput | string
    run?: IntFieldUpdateOperationsInput | number
    assignment_status?: EnumStatusFieldUpdateOperationsInput | Status
    decline_reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    time_sent: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    Assignment: AssignmentCreateNestedOneWithoutNotificationInput
  }

  export type NotificationUncheckedCreateInput = {
    time_sent: Date | string
    user_name: string
    segment: number
    course_name: string
    fy: string
    run: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateInput = {
    time_sent?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Assignment?: AssignmentUpdateOneRequiredWithoutNotificationInput
  }

  export type NotificationUncheckedUpdateInput = {
    time_sent?: DateTimeFieldUpdateOperationsInput | Date | string
    user_name?: StringFieldUpdateOperationsInput | string
    segment?: IntFieldUpdateOperationsInput | number
    course_name?: StringFieldUpdateOperationsInput | string
    fy?: StringFieldUpdateOperationsInput | string
    run?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    time_sent: Date | string
    user_name: string
    segment: number
    course_name: string
    fy: string
    run: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    time_sent?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    time_sent?: DateTimeFieldUpdateOperationsInput | Date | string
    user_name?: StringFieldUpdateOperationsInput | string
    segment?: IntFieldUpdateOperationsInput | number
    course_name?: StringFieldUpdateOperationsInput | string
    fy?: StringFieldUpdateOperationsInput | string
    run?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type FloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }
  export type JsonNullableFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase>, Exclude<keyof Required<JsonNullableFilterBase>, 'path'>>,
        Required<JsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase>, 'path'>>

  export type JsonNullableFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type CourseConfigListRelationFilter = {
    every?: CourseConfigWhereInput
    some?: CourseConfigWhereInput
    none?: CourseConfigWhereInput
  }

  export type CourseConfigOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FiscalYearCountOrderByAggregateInput = {
    fy?: SortOrder
    revenue_target?: SortOrder
    day_limit?: SortOrder
    blackout_dates?: SortOrder
    low_manpower_dates?: SortOrder
  }

  export type FiscalYearAvgOrderByAggregateInput = {
    revenue_target?: SortOrder
    day_limit?: SortOrder
  }

  export type FiscalYearMaxOrderByAggregateInput = {
    fy?: SortOrder
    revenue_target?: SortOrder
    day_limit?: SortOrder
  }

  export type FiscalYearMinOrderByAggregateInput = {
    fy?: SortOrder
    revenue_target?: SortOrder
    day_limit?: SortOrder
  }

  export type FiscalYearSumOrderByAggregateInput = {
    revenue_target?: SortOrder
    day_limit?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }
  export type JsonNullableWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
    _count?: NestedIntNullableFilter
    _min?: NestedJsonNullableFilter
    _max?: NestedJsonNullableFilter
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type CourseListRelationFilter = {
    every?: CourseWhereInput
    some?: CourseWhereInput
    none?: CourseWhereInput
  }

  export type CourseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProgrammeCountOrderByAggregateInput = {
    programme_name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProgrammeMaxOrderByAggregateInput = {
    programme_name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProgrammeMinOrderByAggregateInput = {
    programme_name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type EnumDeliveryModeFilter = {
    equals?: DeliveryMode
    in?: Enumerable<DeliveryMode>
    notIn?: Enumerable<DeliveryMode>
    not?: NestedEnumDeliveryModeFilter | DeliveryMode
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type ProgrammeRelationFilter = {
    is?: ProgrammeWhereInput
    isNot?: ProgrammeWhereInput
  }

  export type CourseCountOrderByAggregateInput = {
    course_name?: SortOrder
    programme_name?: SortOrder
    course_code?: SortOrder
    delivery_mode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CourseMaxOrderByAggregateInput = {
    course_name?: SortOrder
    programme_name?: SortOrder
    course_code?: SortOrder
    delivery_mode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CourseMinOrderByAggregateInput = {
    course_name?: SortOrder
    programme_name?: SortOrder
    course_code?: SortOrder
    delivery_mode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumDeliveryModeWithAggregatesFilter = {
    equals?: DeliveryMode
    in?: Enumerable<DeliveryMode>
    notIn?: Enumerable<DeliveryMode>
    not?: NestedEnumDeliveryModeWithAggregatesFilter | DeliveryMode
    _count?: NestedIntFilter
    _min?: NestedEnumDeliveryModeFilter
    _max?: NestedEnumDeliveryModeFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type IntNullableListFilter = {
    equals?: Enumerable<number> | null
    has?: number | null
    hasEvery?: Enumerable<number>
    hasSome?: Enumerable<number>
    isEmpty?: boolean
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }
  export type JsonFilter = 
    | PatchUndefined<
        Either<Required<JsonFilterBase>, Exclude<keyof Required<JsonFilterBase>, 'path'>>,
        Required<JsonFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase>, 'path'>>

  export type JsonFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type FiscalYearRelationFilter = {
    is?: FiscalYearWhereInput
    isNot?: FiscalYearWhereInput
  }

  export type CourseRelationFilter = {
    is?: CourseWhereInput
    isNot?: CourseWhereInput
  }

  export type CourseRunListRelationFilter = {
    every?: CourseRunWhereInput
    some?: CourseRunWhereInput
    none?: CourseRunWhereInput
  }

  export type CourseRunOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseConfigCourse_nameFyCompoundUniqueInput = {
    course_name: string
    fy: string
  }

  export type CourseConfigCountOrderByAggregateInput = {
    course_name?: SortOrder
    fy?: SortOrder
    days_per_run?: SortOrder
    runs_per_year?: SortOrder
    course_fees?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    days_to_avoid?: SortOrder
    avoid_month_start?: SortOrder
    avoid_month_end?: SortOrder
    split?: SortOrder
    trainers?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CourseConfigAvgOrderByAggregateInput = {
    days_per_run?: SortOrder
    runs_per_year?: SortOrder
    course_fees?: SortOrder
    days_to_avoid?: SortOrder
    split?: SortOrder
  }

  export type CourseConfigMaxOrderByAggregateInput = {
    course_name?: SortOrder
    fy?: SortOrder
    days_per_run?: SortOrder
    runs_per_year?: SortOrder
    course_fees?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    avoid_month_start?: SortOrder
    avoid_month_end?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CourseConfigMinOrderByAggregateInput = {
    course_name?: SortOrder
    fy?: SortOrder
    days_per_run?: SortOrder
    runs_per_year?: SortOrder
    course_fees?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    avoid_month_start?: SortOrder
    avoid_month_end?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CourseConfigSumOrderByAggregateInput = {
    days_per_run?: SortOrder
    runs_per_year?: SortOrder
    course_fees?: SortOrder
    days_to_avoid?: SortOrder
    split?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }
  export type JsonWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase>, Exclude<keyof Required<JsonWithAggregatesFilterBase>, 'path'>>,
        Required<JsonWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase>, 'path'>>

  export type JsonWithAggregatesFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
    _count?: NestedIntFilter
    _min?: NestedJsonFilter
    _max?: NestedJsonFilter
  }

  export type CourseConfigRelationFilter = {
    is?: CourseConfigWhereInput
    isNot?: CourseConfigWhereInput
  }

  export type CourseSegmentListRelationFilter = {
    every?: CourseSegmentWhereInput
    some?: CourseSegmentWhereInput
    none?: CourseSegmentWhereInput
  }

  export type CourseSegmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseRunRunCourse_nameFyCompoundUniqueInput = {
    run: number
    course_name: string
    fy: string
  }

  export type CourseRunCountOrderByAggregateInput = {
    run?: SortOrder
    course_name?: SortOrder
    fy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CourseRunAvgOrderByAggregateInput = {
    run?: SortOrder
  }

  export type CourseRunMaxOrderByAggregateInput = {
    run?: SortOrder
    course_name?: SortOrder
    fy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CourseRunMinOrderByAggregateInput = {
    run?: SortOrder
    course_name?: SortOrder
    fy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CourseRunSumOrderByAggregateInput = {
    run?: SortOrder
  }

  export type DateTimeNullableListFilter = {
    equals?: Enumerable<Date> | Enumerable<string> | null
    has?: Date | string | null
    hasEvery?: Enumerable<Date> | Enumerable<string>
    hasSome?: Enumerable<Date> | Enumerable<string>
    isEmpty?: boolean
  }

  export type EnumStatusFilter = {
    equals?: Status
    in?: Enumerable<Status>
    notIn?: Enumerable<Status>
    not?: NestedEnumStatusFilter | Status
  }

  export type CourseRunRelationFilter = {
    is?: CourseRunWhereInput
    isNot?: CourseRunWhereInput
  }

  export type AssignmentListRelationFilter = {
    every?: AssignmentWhereInput
    some?: AssignmentWhereInput
    none?: AssignmentWhereInput
  }

  export type AssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseSegmentSegmentCourse_nameFyRunCompoundUniqueInput = {
    segment: number
    course_name: string
    fy: string
    run: number
  }

  export type CourseSegmentCountOrderByAggregateInput = {
    segment?: SortOrder
    course_name?: SortOrder
    fy?: SortOrder
    run?: SortOrder
    dates?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CourseSegmentAvgOrderByAggregateInput = {
    segment?: SortOrder
    run?: SortOrder
  }

  export type CourseSegmentMaxOrderByAggregateInput = {
    segment?: SortOrder
    course_name?: SortOrder
    fy?: SortOrder
    run?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CourseSegmentMinOrderByAggregateInput = {
    segment?: SortOrder
    course_name?: SortOrder
    fy?: SortOrder
    run?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CourseSegmentSumOrderByAggregateInput = {
    segment?: SortOrder
    run?: SortOrder
  }

  export type EnumStatusWithAggregatesFilter = {
    equals?: Status
    in?: Enumerable<Status>
    notIn?: Enumerable<Status>
    not?: NestedEnumStatusWithAggregatesFilter | Status
    _count?: NestedIntFilter
    _min?: NestedEnumStatusFilter
    _max?: NestedEnumStatusFilter
  }

  export type EnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type UserCountOrderByAggregateInput = {
    user_name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    user_name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    user_name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CourseSegmentRelationFilter = {
    is?: CourseSegmentWhereInput
    isNot?: CourseSegmentWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssignmentUser_nameSegmentCourse_nameFyRunCompoundUniqueInput = {
    user_name: string
    segment: number
    course_name: string
    fy: string
    run: number
  }

  export type AssignmentCountOrderByAggregateInput = {
    user_name?: SortOrder
    segment?: SortOrder
    course_name?: SortOrder
    fy?: SortOrder
    run?: SortOrder
    assignment_status?: SortOrder
    decline_reason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssignmentAvgOrderByAggregateInput = {
    segment?: SortOrder
    run?: SortOrder
  }

  export type AssignmentMaxOrderByAggregateInput = {
    user_name?: SortOrder
    segment?: SortOrder
    course_name?: SortOrder
    fy?: SortOrder
    run?: SortOrder
    assignment_status?: SortOrder
    decline_reason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssignmentMinOrderByAggregateInput = {
    user_name?: SortOrder
    segment?: SortOrder
    course_name?: SortOrder
    fy?: SortOrder
    run?: SortOrder
    assignment_status?: SortOrder
    decline_reason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssignmentSumOrderByAggregateInput = {
    segment?: SortOrder
    run?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type AssignmentRelationFilter = {
    is?: AssignmentWhereInput
    isNot?: AssignmentWhereInput
  }

  export type NotificationTime_sentUser_nameSegmentCourse_nameFyRunCompoundUniqueInput = {
    time_sent: Date | string
    user_name: string
    segment: number
    course_name: string
    fy: string
    run: number
  }

  export type NotificationCountOrderByAggregateInput = {
    time_sent?: SortOrder
    user_name?: SortOrder
    segment?: SortOrder
    course_name?: SortOrder
    fy?: SortOrder
    run?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationAvgOrderByAggregateInput = {
    segment?: SortOrder
    run?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    time_sent?: SortOrder
    user_name?: SortOrder
    segment?: SortOrder
    course_name?: SortOrder
    fy?: SortOrder
    run?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    time_sent?: SortOrder
    user_name?: SortOrder
    segment?: SortOrder
    course_name?: SortOrder
    fy?: SortOrder
    run?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationSumOrderByAggregateInput = {
    segment?: SortOrder
    run?: SortOrder
  }

  export type CourseConfigCreateNestedManyWithoutFiscalYearInput = {
    create?: XOR<Enumerable<CourseConfigCreateWithoutFiscalYearInput>, Enumerable<CourseConfigUncheckedCreateWithoutFiscalYearInput>>
    connectOrCreate?: Enumerable<CourseConfigCreateOrConnectWithoutFiscalYearInput>
    createMany?: CourseConfigCreateManyFiscalYearInputEnvelope
    connect?: Enumerable<CourseConfigWhereUniqueInput>
  }

  export type CourseConfigUncheckedCreateNestedManyWithoutFiscalYearInput = {
    create?: XOR<Enumerable<CourseConfigCreateWithoutFiscalYearInput>, Enumerable<CourseConfigUncheckedCreateWithoutFiscalYearInput>>
    connectOrCreate?: Enumerable<CourseConfigCreateOrConnectWithoutFiscalYearInput>
    createMany?: CourseConfigCreateManyFiscalYearInputEnvelope
    connect?: Enumerable<CourseConfigWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CourseConfigUpdateManyWithoutFiscalYearInput = {
    create?: XOR<Enumerable<CourseConfigCreateWithoutFiscalYearInput>, Enumerable<CourseConfigUncheckedCreateWithoutFiscalYearInput>>
    connectOrCreate?: Enumerable<CourseConfigCreateOrConnectWithoutFiscalYearInput>
    upsert?: Enumerable<CourseConfigUpsertWithWhereUniqueWithoutFiscalYearInput>
    createMany?: CourseConfigCreateManyFiscalYearInputEnvelope
    set?: Enumerable<CourseConfigWhereUniqueInput>
    disconnect?: Enumerable<CourseConfigWhereUniqueInput>
    delete?: Enumerable<CourseConfigWhereUniqueInput>
    connect?: Enumerable<CourseConfigWhereUniqueInput>
    update?: Enumerable<CourseConfigUpdateWithWhereUniqueWithoutFiscalYearInput>
    updateMany?: Enumerable<CourseConfigUpdateManyWithWhereWithoutFiscalYearInput>
    deleteMany?: Enumerable<CourseConfigScalarWhereInput>
  }

  export type CourseConfigUncheckedUpdateManyWithoutFiscalYearInput = {
    create?: XOR<Enumerable<CourseConfigCreateWithoutFiscalYearInput>, Enumerable<CourseConfigUncheckedCreateWithoutFiscalYearInput>>
    connectOrCreate?: Enumerable<CourseConfigCreateOrConnectWithoutFiscalYearInput>
    upsert?: Enumerable<CourseConfigUpsertWithWhereUniqueWithoutFiscalYearInput>
    createMany?: CourseConfigCreateManyFiscalYearInputEnvelope
    set?: Enumerable<CourseConfigWhereUniqueInput>
    disconnect?: Enumerable<CourseConfigWhereUniqueInput>
    delete?: Enumerable<CourseConfigWhereUniqueInput>
    connect?: Enumerable<CourseConfigWhereUniqueInput>
    update?: Enumerable<CourseConfigUpdateWithWhereUniqueWithoutFiscalYearInput>
    updateMany?: Enumerable<CourseConfigUpdateManyWithWhereWithoutFiscalYearInput>
    deleteMany?: Enumerable<CourseConfigScalarWhereInput>
  }

  export type CourseCreateNestedManyWithoutProgrammeInput = {
    create?: XOR<Enumerable<CourseCreateWithoutProgrammeInput>, Enumerable<CourseUncheckedCreateWithoutProgrammeInput>>
    connectOrCreate?: Enumerable<CourseCreateOrConnectWithoutProgrammeInput>
    createMany?: CourseCreateManyProgrammeInputEnvelope
    connect?: Enumerable<CourseWhereUniqueInput>
  }

  export type CourseUncheckedCreateNestedManyWithoutProgrammeInput = {
    create?: XOR<Enumerable<CourseCreateWithoutProgrammeInput>, Enumerable<CourseUncheckedCreateWithoutProgrammeInput>>
    connectOrCreate?: Enumerable<CourseCreateOrConnectWithoutProgrammeInput>
    createMany?: CourseCreateManyProgrammeInputEnvelope
    connect?: Enumerable<CourseWhereUniqueInput>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type CourseUpdateManyWithoutProgrammeInput = {
    create?: XOR<Enumerable<CourseCreateWithoutProgrammeInput>, Enumerable<CourseUncheckedCreateWithoutProgrammeInput>>
    connectOrCreate?: Enumerable<CourseCreateOrConnectWithoutProgrammeInput>
    upsert?: Enumerable<CourseUpsertWithWhereUniqueWithoutProgrammeInput>
    createMany?: CourseCreateManyProgrammeInputEnvelope
    set?: Enumerable<CourseWhereUniqueInput>
    disconnect?: Enumerable<CourseWhereUniqueInput>
    delete?: Enumerable<CourseWhereUniqueInput>
    connect?: Enumerable<CourseWhereUniqueInput>
    update?: Enumerable<CourseUpdateWithWhereUniqueWithoutProgrammeInput>
    updateMany?: Enumerable<CourseUpdateManyWithWhereWithoutProgrammeInput>
    deleteMany?: Enumerable<CourseScalarWhereInput>
  }

  export type CourseUncheckedUpdateManyWithoutProgrammeInput = {
    create?: XOR<Enumerable<CourseCreateWithoutProgrammeInput>, Enumerable<CourseUncheckedCreateWithoutProgrammeInput>>
    connectOrCreate?: Enumerable<CourseCreateOrConnectWithoutProgrammeInput>
    upsert?: Enumerable<CourseUpsertWithWhereUniqueWithoutProgrammeInput>
    createMany?: CourseCreateManyProgrammeInputEnvelope
    set?: Enumerable<CourseWhereUniqueInput>
    disconnect?: Enumerable<CourseWhereUniqueInput>
    delete?: Enumerable<CourseWhereUniqueInput>
    connect?: Enumerable<CourseWhereUniqueInput>
    update?: Enumerable<CourseUpdateWithWhereUniqueWithoutProgrammeInput>
    updateMany?: Enumerable<CourseUpdateManyWithWhereWithoutProgrammeInput>
    deleteMany?: Enumerable<CourseScalarWhereInput>
  }

  export type CourseConfigCreateNestedManyWithoutCourseInput = {
    create?: XOR<Enumerable<CourseConfigCreateWithoutCourseInput>, Enumerable<CourseConfigUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<CourseConfigCreateOrConnectWithoutCourseInput>
    createMany?: CourseConfigCreateManyCourseInputEnvelope
    connect?: Enumerable<CourseConfigWhereUniqueInput>
  }

  export type ProgrammeCreateNestedOneWithoutCourseInput = {
    create?: XOR<ProgrammeCreateWithoutCourseInput, ProgrammeUncheckedCreateWithoutCourseInput>
    connectOrCreate?: ProgrammeCreateOrConnectWithoutCourseInput
    connect?: ProgrammeWhereUniqueInput
  }

  export type CourseConfigUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<Enumerable<CourseConfigCreateWithoutCourseInput>, Enumerable<CourseConfigUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<CourseConfigCreateOrConnectWithoutCourseInput>
    createMany?: CourseConfigCreateManyCourseInputEnvelope
    connect?: Enumerable<CourseConfigWhereUniqueInput>
  }

  export type EnumDeliveryModeFieldUpdateOperationsInput = {
    set?: DeliveryMode
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CourseConfigUpdateManyWithoutCourseInput = {
    create?: XOR<Enumerable<CourseConfigCreateWithoutCourseInput>, Enumerable<CourseConfigUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<CourseConfigCreateOrConnectWithoutCourseInput>
    upsert?: Enumerable<CourseConfigUpsertWithWhereUniqueWithoutCourseInput>
    createMany?: CourseConfigCreateManyCourseInputEnvelope
    set?: Enumerable<CourseConfigWhereUniqueInput>
    disconnect?: Enumerable<CourseConfigWhereUniqueInput>
    delete?: Enumerable<CourseConfigWhereUniqueInput>
    connect?: Enumerable<CourseConfigWhereUniqueInput>
    update?: Enumerable<CourseConfigUpdateWithWhereUniqueWithoutCourseInput>
    updateMany?: Enumerable<CourseConfigUpdateManyWithWhereWithoutCourseInput>
    deleteMany?: Enumerable<CourseConfigScalarWhereInput>
  }

  export type ProgrammeUpdateOneRequiredWithoutCourseInput = {
    create?: XOR<ProgrammeCreateWithoutCourseInput, ProgrammeUncheckedCreateWithoutCourseInput>
    connectOrCreate?: ProgrammeCreateOrConnectWithoutCourseInput
    upsert?: ProgrammeUpsertWithoutCourseInput
    connect?: ProgrammeWhereUniqueInput
    update?: XOR<ProgrammeUpdateWithoutCourseInput, ProgrammeUncheckedUpdateWithoutCourseInput>
  }

  export type CourseConfigUncheckedUpdateManyWithoutCourseInput = {
    create?: XOR<Enumerable<CourseConfigCreateWithoutCourseInput>, Enumerable<CourseConfigUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<CourseConfigCreateOrConnectWithoutCourseInput>
    upsert?: Enumerable<CourseConfigUpsertWithWhereUniqueWithoutCourseInput>
    createMany?: CourseConfigCreateManyCourseInputEnvelope
    set?: Enumerable<CourseConfigWhereUniqueInput>
    disconnect?: Enumerable<CourseConfigWhereUniqueInput>
    delete?: Enumerable<CourseConfigWhereUniqueInput>
    connect?: Enumerable<CourseConfigWhereUniqueInput>
    update?: Enumerable<CourseConfigUpdateWithWhereUniqueWithoutCourseInput>
    updateMany?: Enumerable<CourseConfigUpdateManyWithWhereWithoutCourseInput>
    deleteMany?: Enumerable<CourseConfigScalarWhereInput>
  }

  export type CourseConfigCreatedays_to_avoidInput = {
    set: Enumerable<number>
  }

  export type CourseConfigCreatesplitInput = {
    set: Enumerable<number>
  }

  export type FiscalYearCreateNestedOneWithoutCourseConfigInput = {
    create?: XOR<FiscalYearCreateWithoutCourseConfigInput, FiscalYearUncheckedCreateWithoutCourseConfigInput>
    connectOrCreate?: FiscalYearCreateOrConnectWithoutCourseConfigInput
    connect?: FiscalYearWhereUniqueInput
  }

  export type CourseCreateNestedOneWithoutCourseConfigInput = {
    create?: XOR<CourseCreateWithoutCourseConfigInput, CourseUncheckedCreateWithoutCourseConfigInput>
    connectOrCreate?: CourseCreateOrConnectWithoutCourseConfigInput
    connect?: CourseWhereUniqueInput
  }

  export type CourseRunCreateNestedManyWithoutCourseConfigInput = {
    create?: XOR<Enumerable<CourseRunCreateWithoutCourseConfigInput>, Enumerable<CourseRunUncheckedCreateWithoutCourseConfigInput>>
    connectOrCreate?: Enumerable<CourseRunCreateOrConnectWithoutCourseConfigInput>
    createMany?: CourseRunCreateManyCourseConfigInputEnvelope
    connect?: Enumerable<CourseRunWhereUniqueInput>
  }

  export type CourseRunUncheckedCreateNestedManyWithoutCourseConfigInput = {
    create?: XOR<Enumerable<CourseRunCreateWithoutCourseConfigInput>, Enumerable<CourseRunUncheckedCreateWithoutCourseConfigInput>>
    connectOrCreate?: Enumerable<CourseRunCreateOrConnectWithoutCourseConfigInput>
    createMany?: CourseRunCreateManyCourseConfigInputEnvelope
    connect?: Enumerable<CourseRunWhereUniqueInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CourseConfigUpdatedays_to_avoidInput = {
    set?: Enumerable<number>
    push?: number | Enumerable<number>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type CourseConfigUpdatesplitInput = {
    set?: Enumerable<number>
    push?: number | Enumerable<number>
  }

  export type FiscalYearUpdateOneRequiredWithoutCourseConfigInput = {
    create?: XOR<FiscalYearCreateWithoutCourseConfigInput, FiscalYearUncheckedCreateWithoutCourseConfigInput>
    connectOrCreate?: FiscalYearCreateOrConnectWithoutCourseConfigInput
    upsert?: FiscalYearUpsertWithoutCourseConfigInput
    connect?: FiscalYearWhereUniqueInput
    update?: XOR<FiscalYearUpdateWithoutCourseConfigInput, FiscalYearUncheckedUpdateWithoutCourseConfigInput>
  }

  export type CourseUpdateOneRequiredWithoutCourseConfigInput = {
    create?: XOR<CourseCreateWithoutCourseConfigInput, CourseUncheckedCreateWithoutCourseConfigInput>
    connectOrCreate?: CourseCreateOrConnectWithoutCourseConfigInput
    upsert?: CourseUpsertWithoutCourseConfigInput
    connect?: CourseWhereUniqueInput
    update?: XOR<CourseUpdateWithoutCourseConfigInput, CourseUncheckedUpdateWithoutCourseConfigInput>
  }

  export type CourseRunUpdateManyWithoutCourseConfigInput = {
    create?: XOR<Enumerable<CourseRunCreateWithoutCourseConfigInput>, Enumerable<CourseRunUncheckedCreateWithoutCourseConfigInput>>
    connectOrCreate?: Enumerable<CourseRunCreateOrConnectWithoutCourseConfigInput>
    upsert?: Enumerable<CourseRunUpsertWithWhereUniqueWithoutCourseConfigInput>
    createMany?: CourseRunCreateManyCourseConfigInputEnvelope
    set?: Enumerable<CourseRunWhereUniqueInput>
    disconnect?: Enumerable<CourseRunWhereUniqueInput>
    delete?: Enumerable<CourseRunWhereUniqueInput>
    connect?: Enumerable<CourseRunWhereUniqueInput>
    update?: Enumerable<CourseRunUpdateWithWhereUniqueWithoutCourseConfigInput>
    updateMany?: Enumerable<CourseRunUpdateManyWithWhereWithoutCourseConfigInput>
    deleteMany?: Enumerable<CourseRunScalarWhereInput>
  }

  export type CourseRunUncheckedUpdateManyWithoutCourseConfigInput = {
    create?: XOR<Enumerable<CourseRunCreateWithoutCourseConfigInput>, Enumerable<CourseRunUncheckedCreateWithoutCourseConfigInput>>
    connectOrCreate?: Enumerable<CourseRunCreateOrConnectWithoutCourseConfigInput>
    upsert?: Enumerable<CourseRunUpsertWithWhereUniqueWithoutCourseConfigInput>
    createMany?: CourseRunCreateManyCourseConfigInputEnvelope
    set?: Enumerable<CourseRunWhereUniqueInput>
    disconnect?: Enumerable<CourseRunWhereUniqueInput>
    delete?: Enumerable<CourseRunWhereUniqueInput>
    connect?: Enumerable<CourseRunWhereUniqueInput>
    update?: Enumerable<CourseRunUpdateWithWhereUniqueWithoutCourseConfigInput>
    updateMany?: Enumerable<CourseRunUpdateManyWithWhereWithoutCourseConfigInput>
    deleteMany?: Enumerable<CourseRunScalarWhereInput>
  }

  export type CourseConfigCreateNestedOneWithoutCourseRunInput = {
    create?: XOR<CourseConfigCreateWithoutCourseRunInput, CourseConfigUncheckedCreateWithoutCourseRunInput>
    connectOrCreate?: CourseConfigCreateOrConnectWithoutCourseRunInput
    connect?: CourseConfigWhereUniqueInput
  }

  export type CourseSegmentCreateNestedManyWithoutCourseRunInput = {
    create?: XOR<Enumerable<CourseSegmentCreateWithoutCourseRunInput>, Enumerable<CourseSegmentUncheckedCreateWithoutCourseRunInput>>
    connectOrCreate?: Enumerable<CourseSegmentCreateOrConnectWithoutCourseRunInput>
    createMany?: CourseSegmentCreateManyCourseRunInputEnvelope
    connect?: Enumerable<CourseSegmentWhereUniqueInput>
  }

  export type CourseSegmentUncheckedCreateNestedManyWithoutCourseRunInput = {
    create?: XOR<Enumerable<CourseSegmentCreateWithoutCourseRunInput>, Enumerable<CourseSegmentUncheckedCreateWithoutCourseRunInput>>
    connectOrCreate?: Enumerable<CourseSegmentCreateOrConnectWithoutCourseRunInput>
    createMany?: CourseSegmentCreateManyCourseRunInputEnvelope
    connect?: Enumerable<CourseSegmentWhereUniqueInput>
  }

  export type CourseConfigUpdateOneRequiredWithoutCourseRunInput = {
    create?: XOR<CourseConfigCreateWithoutCourseRunInput, CourseConfigUncheckedCreateWithoutCourseRunInput>
    connectOrCreate?: CourseConfigCreateOrConnectWithoutCourseRunInput
    upsert?: CourseConfigUpsertWithoutCourseRunInput
    connect?: CourseConfigWhereUniqueInput
    update?: XOR<CourseConfigUpdateWithoutCourseRunInput, CourseConfigUncheckedUpdateWithoutCourseRunInput>
  }

  export type CourseSegmentUpdateManyWithoutCourseRunInput = {
    create?: XOR<Enumerable<CourseSegmentCreateWithoutCourseRunInput>, Enumerable<CourseSegmentUncheckedCreateWithoutCourseRunInput>>
    connectOrCreate?: Enumerable<CourseSegmentCreateOrConnectWithoutCourseRunInput>
    upsert?: Enumerable<CourseSegmentUpsertWithWhereUniqueWithoutCourseRunInput>
    createMany?: CourseSegmentCreateManyCourseRunInputEnvelope
    set?: Enumerable<CourseSegmentWhereUniqueInput>
    disconnect?: Enumerable<CourseSegmentWhereUniqueInput>
    delete?: Enumerable<CourseSegmentWhereUniqueInput>
    connect?: Enumerable<CourseSegmentWhereUniqueInput>
    update?: Enumerable<CourseSegmentUpdateWithWhereUniqueWithoutCourseRunInput>
    updateMany?: Enumerable<CourseSegmentUpdateManyWithWhereWithoutCourseRunInput>
    deleteMany?: Enumerable<CourseSegmentScalarWhereInput>
  }

  export type CourseSegmentUncheckedUpdateManyWithoutCourseRunInput = {
    create?: XOR<Enumerable<CourseSegmentCreateWithoutCourseRunInput>, Enumerable<CourseSegmentUncheckedCreateWithoutCourseRunInput>>
    connectOrCreate?: Enumerable<CourseSegmentCreateOrConnectWithoutCourseRunInput>
    upsert?: Enumerable<CourseSegmentUpsertWithWhereUniqueWithoutCourseRunInput>
    createMany?: CourseSegmentCreateManyCourseRunInputEnvelope
    set?: Enumerable<CourseSegmentWhereUniqueInput>
    disconnect?: Enumerable<CourseSegmentWhereUniqueInput>
    delete?: Enumerable<CourseSegmentWhereUniqueInput>
    connect?: Enumerable<CourseSegmentWhereUniqueInput>
    update?: Enumerable<CourseSegmentUpdateWithWhereUniqueWithoutCourseRunInput>
    updateMany?: Enumerable<CourseSegmentUpdateManyWithWhereWithoutCourseRunInput>
    deleteMany?: Enumerable<CourseSegmentScalarWhereInput>
  }

  export type CourseSegmentCreatedatesInput = {
    set: Enumerable<Date> | Enumerable<string>
  }

  export type CourseRunCreateNestedOneWithoutCourseSegmentInput = {
    create?: XOR<CourseRunCreateWithoutCourseSegmentInput, CourseRunUncheckedCreateWithoutCourseSegmentInput>
    connectOrCreate?: CourseRunCreateOrConnectWithoutCourseSegmentInput
    connect?: CourseRunWhereUniqueInput
  }

  export type AssignmentCreateNestedManyWithoutCourseSegmentInput = {
    create?: XOR<Enumerable<AssignmentCreateWithoutCourseSegmentInput>, Enumerable<AssignmentUncheckedCreateWithoutCourseSegmentInput>>
    connectOrCreate?: Enumerable<AssignmentCreateOrConnectWithoutCourseSegmentInput>
    createMany?: AssignmentCreateManyCourseSegmentInputEnvelope
    connect?: Enumerable<AssignmentWhereUniqueInput>
  }

  export type AssignmentUncheckedCreateNestedManyWithoutCourseSegmentInput = {
    create?: XOR<Enumerable<AssignmentCreateWithoutCourseSegmentInput>, Enumerable<AssignmentUncheckedCreateWithoutCourseSegmentInput>>
    connectOrCreate?: Enumerable<AssignmentCreateOrConnectWithoutCourseSegmentInput>
    createMany?: AssignmentCreateManyCourseSegmentInputEnvelope
    connect?: Enumerable<AssignmentWhereUniqueInput>
  }

  export type CourseSegmentUpdatedatesInput = {
    set?: Enumerable<Date> | Enumerable<string>
    push?: Date | string | Enumerable<Date> | Enumerable<string>
  }

  export type EnumStatusFieldUpdateOperationsInput = {
    set?: Status
  }

  export type CourseRunUpdateOneRequiredWithoutCourseSegmentInput = {
    create?: XOR<CourseRunCreateWithoutCourseSegmentInput, CourseRunUncheckedCreateWithoutCourseSegmentInput>
    connectOrCreate?: CourseRunCreateOrConnectWithoutCourseSegmentInput
    upsert?: CourseRunUpsertWithoutCourseSegmentInput
    connect?: CourseRunWhereUniqueInput
    update?: XOR<CourseRunUpdateWithoutCourseSegmentInput, CourseRunUncheckedUpdateWithoutCourseSegmentInput>
  }

  export type AssignmentUpdateManyWithoutCourseSegmentInput = {
    create?: XOR<Enumerable<AssignmentCreateWithoutCourseSegmentInput>, Enumerable<AssignmentUncheckedCreateWithoutCourseSegmentInput>>
    connectOrCreate?: Enumerable<AssignmentCreateOrConnectWithoutCourseSegmentInput>
    upsert?: Enumerable<AssignmentUpsertWithWhereUniqueWithoutCourseSegmentInput>
    createMany?: AssignmentCreateManyCourseSegmentInputEnvelope
    set?: Enumerable<AssignmentWhereUniqueInput>
    disconnect?: Enumerable<AssignmentWhereUniqueInput>
    delete?: Enumerable<AssignmentWhereUniqueInput>
    connect?: Enumerable<AssignmentWhereUniqueInput>
    update?: Enumerable<AssignmentUpdateWithWhereUniqueWithoutCourseSegmentInput>
    updateMany?: Enumerable<AssignmentUpdateManyWithWhereWithoutCourseSegmentInput>
    deleteMany?: Enumerable<AssignmentScalarWhereInput>
  }

  export type AssignmentUncheckedUpdateManyWithoutCourseSegmentInput = {
    create?: XOR<Enumerable<AssignmentCreateWithoutCourseSegmentInput>, Enumerable<AssignmentUncheckedCreateWithoutCourseSegmentInput>>
    connectOrCreate?: Enumerable<AssignmentCreateOrConnectWithoutCourseSegmentInput>
    upsert?: Enumerable<AssignmentUpsertWithWhereUniqueWithoutCourseSegmentInput>
    createMany?: AssignmentCreateManyCourseSegmentInputEnvelope
    set?: Enumerable<AssignmentWhereUniqueInput>
    disconnect?: Enumerable<AssignmentWhereUniqueInput>
    delete?: Enumerable<AssignmentWhereUniqueInput>
    connect?: Enumerable<AssignmentWhereUniqueInput>
    update?: Enumerable<AssignmentUpdateWithWhereUniqueWithoutCourseSegmentInput>
    updateMany?: Enumerable<AssignmentUpdateManyWithWhereWithoutCourseSegmentInput>
    deleteMany?: Enumerable<AssignmentScalarWhereInput>
  }

  export type AssignmentCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AssignmentCreateWithoutUserInput>, Enumerable<AssignmentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AssignmentCreateOrConnectWithoutUserInput>
    createMany?: AssignmentCreateManyUserInputEnvelope
    connect?: Enumerable<AssignmentWhereUniqueInput>
  }

  export type AssignmentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AssignmentCreateWithoutUserInput>, Enumerable<AssignmentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AssignmentCreateOrConnectWithoutUserInput>
    createMany?: AssignmentCreateManyUserInputEnvelope
    connect?: Enumerable<AssignmentWhereUniqueInput>
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: Role
  }

  export type AssignmentUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<AssignmentCreateWithoutUserInput>, Enumerable<AssignmentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AssignmentCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AssignmentUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AssignmentCreateManyUserInputEnvelope
    set?: Enumerable<AssignmentWhereUniqueInput>
    disconnect?: Enumerable<AssignmentWhereUniqueInput>
    delete?: Enumerable<AssignmentWhereUniqueInput>
    connect?: Enumerable<AssignmentWhereUniqueInput>
    update?: Enumerable<AssignmentUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AssignmentUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AssignmentScalarWhereInput>
  }

  export type AssignmentUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<AssignmentCreateWithoutUserInput>, Enumerable<AssignmentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AssignmentCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AssignmentUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AssignmentCreateManyUserInputEnvelope
    set?: Enumerable<AssignmentWhereUniqueInput>
    disconnect?: Enumerable<AssignmentWhereUniqueInput>
    delete?: Enumerable<AssignmentWhereUniqueInput>
    connect?: Enumerable<AssignmentWhereUniqueInput>
    update?: Enumerable<AssignmentUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AssignmentUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AssignmentScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutAssignmentInput = {
    create?: XOR<UserCreateWithoutAssignmentInput, UserUncheckedCreateWithoutAssignmentInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignmentInput
    connect?: UserWhereUniqueInput
  }

  export type CourseSegmentCreateNestedOneWithoutAssignmentInput = {
    create?: XOR<CourseSegmentCreateWithoutAssignmentInput, CourseSegmentUncheckedCreateWithoutAssignmentInput>
    connectOrCreate?: CourseSegmentCreateOrConnectWithoutAssignmentInput
    connect?: CourseSegmentWhereUniqueInput
  }

  export type NotificationCreateNestedManyWithoutAssignmentInput = {
    create?: XOR<Enumerable<NotificationCreateWithoutAssignmentInput>, Enumerable<NotificationUncheckedCreateWithoutAssignmentInput>>
    connectOrCreate?: Enumerable<NotificationCreateOrConnectWithoutAssignmentInput>
    createMany?: NotificationCreateManyAssignmentInputEnvelope
    connect?: Enumerable<NotificationWhereUniqueInput>
  }

  export type NotificationUncheckedCreateNestedManyWithoutAssignmentInput = {
    create?: XOR<Enumerable<NotificationCreateWithoutAssignmentInput>, Enumerable<NotificationUncheckedCreateWithoutAssignmentInput>>
    connectOrCreate?: Enumerable<NotificationCreateOrConnectWithoutAssignmentInput>
    createMany?: NotificationCreateManyAssignmentInputEnvelope
    connect?: Enumerable<NotificationWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneRequiredWithoutAssignmentInput = {
    create?: XOR<UserCreateWithoutAssignmentInput, UserUncheckedCreateWithoutAssignmentInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignmentInput
    upsert?: UserUpsertWithoutAssignmentInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutAssignmentInput, UserUncheckedUpdateWithoutAssignmentInput>
  }

  export type CourseSegmentUpdateOneRequiredWithoutAssignmentInput = {
    create?: XOR<CourseSegmentCreateWithoutAssignmentInput, CourseSegmentUncheckedCreateWithoutAssignmentInput>
    connectOrCreate?: CourseSegmentCreateOrConnectWithoutAssignmentInput
    upsert?: CourseSegmentUpsertWithoutAssignmentInput
    connect?: CourseSegmentWhereUniqueInput
    update?: XOR<CourseSegmentUpdateWithoutAssignmentInput, CourseSegmentUncheckedUpdateWithoutAssignmentInput>
  }

  export type NotificationUpdateManyWithoutAssignmentInput = {
    create?: XOR<Enumerable<NotificationCreateWithoutAssignmentInput>, Enumerable<NotificationUncheckedCreateWithoutAssignmentInput>>
    connectOrCreate?: Enumerable<NotificationCreateOrConnectWithoutAssignmentInput>
    upsert?: Enumerable<NotificationUpsertWithWhereUniqueWithoutAssignmentInput>
    createMany?: NotificationCreateManyAssignmentInputEnvelope
    set?: Enumerable<NotificationWhereUniqueInput>
    disconnect?: Enumerable<NotificationWhereUniqueInput>
    delete?: Enumerable<NotificationWhereUniqueInput>
    connect?: Enumerable<NotificationWhereUniqueInput>
    update?: Enumerable<NotificationUpdateWithWhereUniqueWithoutAssignmentInput>
    updateMany?: Enumerable<NotificationUpdateManyWithWhereWithoutAssignmentInput>
    deleteMany?: Enumerable<NotificationScalarWhereInput>
  }

  export type NotificationUncheckedUpdateManyWithoutAssignmentInput = {
    create?: XOR<Enumerable<NotificationCreateWithoutAssignmentInput>, Enumerable<NotificationUncheckedCreateWithoutAssignmentInput>>
    connectOrCreate?: Enumerable<NotificationCreateOrConnectWithoutAssignmentInput>
    upsert?: Enumerable<NotificationUpsertWithWhereUniqueWithoutAssignmentInput>
    createMany?: NotificationCreateManyAssignmentInputEnvelope
    set?: Enumerable<NotificationWhereUniqueInput>
    disconnect?: Enumerable<NotificationWhereUniqueInput>
    delete?: Enumerable<NotificationWhereUniqueInput>
    connect?: Enumerable<NotificationWhereUniqueInput>
    update?: Enumerable<NotificationUpdateWithWhereUniqueWithoutAssignmentInput>
    updateMany?: Enumerable<NotificationUpdateManyWithWhereWithoutAssignmentInput>
    deleteMany?: Enumerable<NotificationScalarWhereInput>
  }

  export type AssignmentCreateNestedOneWithoutNotificationInput = {
    create?: XOR<AssignmentCreateWithoutNotificationInput, AssignmentUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: AssignmentCreateOrConnectWithoutNotificationInput
    connect?: AssignmentWhereUniqueInput
  }

  export type AssignmentUpdateOneRequiredWithoutNotificationInput = {
    create?: XOR<AssignmentCreateWithoutNotificationInput, AssignmentUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: AssignmentCreateOrConnectWithoutNotificationInput
    upsert?: AssignmentUpsertWithoutNotificationInput
    connect?: AssignmentWhereUniqueInput
    update?: XOR<AssignmentUpdateWithoutNotificationInput, AssignmentUncheckedUpdateWithoutNotificationInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }
  export type NestedJsonNullableFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase>, Exclude<keyof Required<NestedJsonNullableFilterBase>, 'path'>>,
        Required<NestedJsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase>, 'path'>>

  export type NestedJsonNullableFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedEnumDeliveryModeFilter = {
    equals?: DeliveryMode
    in?: Enumerable<DeliveryMode>
    notIn?: Enumerable<DeliveryMode>
    not?: NestedEnumDeliveryModeFilter | DeliveryMode
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedEnumDeliveryModeWithAggregatesFilter = {
    equals?: DeliveryMode
    in?: Enumerable<DeliveryMode>
    notIn?: Enumerable<DeliveryMode>
    not?: NestedEnumDeliveryModeWithAggregatesFilter | DeliveryMode
    _count?: NestedIntFilter
    _min?: NestedEnumDeliveryModeFilter
    _max?: NestedEnumDeliveryModeFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }
  export type NestedJsonFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase>, Exclude<keyof Required<NestedJsonFilterBase>, 'path'>>,
        Required<NestedJsonFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase>, 'path'>>

  export type NestedJsonFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type NestedEnumStatusFilter = {
    equals?: Status
    in?: Enumerable<Status>
    notIn?: Enumerable<Status>
    not?: NestedEnumStatusFilter | Status
  }

  export type NestedEnumStatusWithAggregatesFilter = {
    equals?: Status
    in?: Enumerable<Status>
    notIn?: Enumerable<Status>
    not?: NestedEnumStatusWithAggregatesFilter | Status
    _count?: NestedIntFilter
    _min?: NestedEnumStatusFilter
    _max?: NestedEnumStatusFilter
  }

  export type NestedEnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type NestedEnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type CourseConfigCreateWithoutFiscalYearInput = {
    days_per_run: number
    runs_per_year: number
    course_fees?: number | null
    start_time?: Date | string | null
    end_time?: Date | string | null
    days_to_avoid?: CourseConfigCreatedays_to_avoidInput | Enumerable<number>
    avoid_month_start: boolean
    avoid_month_end: boolean
    split?: CourseConfigCreatesplitInput | Enumerable<number>
    trainers: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    Course: CourseCreateNestedOneWithoutCourseConfigInput
    CourseRun?: CourseRunCreateNestedManyWithoutCourseConfigInput
  }

  export type CourseConfigUncheckedCreateWithoutFiscalYearInput = {
    course_name: string
    days_per_run: number
    runs_per_year: number
    course_fees?: number | null
    start_time?: Date | string | null
    end_time?: Date | string | null
    days_to_avoid?: CourseConfigCreatedays_to_avoidInput | Enumerable<number>
    avoid_month_start: boolean
    avoid_month_end: boolean
    split?: CourseConfigCreatesplitInput | Enumerable<number>
    trainers: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    CourseRun?: CourseRunUncheckedCreateNestedManyWithoutCourseConfigInput
  }

  export type CourseConfigCreateOrConnectWithoutFiscalYearInput = {
    where: CourseConfigWhereUniqueInput
    create: XOR<CourseConfigCreateWithoutFiscalYearInput, CourseConfigUncheckedCreateWithoutFiscalYearInput>
  }

  export type CourseConfigCreateManyFiscalYearInputEnvelope = {
    data: Enumerable<CourseConfigCreateManyFiscalYearInput>
    skipDuplicates?: boolean
  }

  export type CourseConfigUpsertWithWhereUniqueWithoutFiscalYearInput = {
    where: CourseConfigWhereUniqueInput
    update: XOR<CourseConfigUpdateWithoutFiscalYearInput, CourseConfigUncheckedUpdateWithoutFiscalYearInput>
    create: XOR<CourseConfigCreateWithoutFiscalYearInput, CourseConfigUncheckedCreateWithoutFiscalYearInput>
  }

  export type CourseConfigUpdateWithWhereUniqueWithoutFiscalYearInput = {
    where: CourseConfigWhereUniqueInput
    data: XOR<CourseConfigUpdateWithoutFiscalYearInput, CourseConfigUncheckedUpdateWithoutFiscalYearInput>
  }

  export type CourseConfigUpdateManyWithWhereWithoutFiscalYearInput = {
    where: CourseConfigScalarWhereInput
    data: XOR<CourseConfigUpdateManyMutationInput, CourseConfigUncheckedUpdateManyWithoutCourseConfigInput>
  }

  export type CourseConfigScalarWhereInput = {
    AND?: Enumerable<CourseConfigScalarWhereInput>
    OR?: Enumerable<CourseConfigScalarWhereInput>
    NOT?: Enumerable<CourseConfigScalarWhereInput>
    course_name?: StringFilter | string
    fy?: StringFilter | string
    days_per_run?: IntFilter | number
    runs_per_year?: IntFilter | number
    course_fees?: FloatNullableFilter | number | null
    start_time?: DateTimeNullableFilter | Date | string | null
    end_time?: DateTimeNullableFilter | Date | string | null
    days_to_avoid?: IntNullableListFilter
    avoid_month_start?: BoolFilter | boolean
    avoid_month_end?: BoolFilter | boolean
    split?: IntNullableListFilter
    trainers?: JsonFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type CourseCreateWithoutProgrammeInput = {
    course_name: string
    course_code: string
    delivery_mode: DeliveryMode
    createdAt?: Date | string
    updatedAt?: Date | string
    CourseConfig?: CourseConfigCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutProgrammeInput = {
    course_name: string
    course_code: string
    delivery_mode: DeliveryMode
    createdAt?: Date | string
    updatedAt?: Date | string
    CourseConfig?: CourseConfigUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutProgrammeInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutProgrammeInput, CourseUncheckedCreateWithoutProgrammeInput>
  }

  export type CourseCreateManyProgrammeInputEnvelope = {
    data: Enumerable<CourseCreateManyProgrammeInput>
    skipDuplicates?: boolean
  }

  export type CourseUpsertWithWhereUniqueWithoutProgrammeInput = {
    where: CourseWhereUniqueInput
    update: XOR<CourseUpdateWithoutProgrammeInput, CourseUncheckedUpdateWithoutProgrammeInput>
    create: XOR<CourseCreateWithoutProgrammeInput, CourseUncheckedCreateWithoutProgrammeInput>
  }

  export type CourseUpdateWithWhereUniqueWithoutProgrammeInput = {
    where: CourseWhereUniqueInput
    data: XOR<CourseUpdateWithoutProgrammeInput, CourseUncheckedUpdateWithoutProgrammeInput>
  }

  export type CourseUpdateManyWithWhereWithoutProgrammeInput = {
    where: CourseScalarWhereInput
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyWithoutCourseInput>
  }

  export type CourseScalarWhereInput = {
    AND?: Enumerable<CourseScalarWhereInput>
    OR?: Enumerable<CourseScalarWhereInput>
    NOT?: Enumerable<CourseScalarWhereInput>
    course_name?: StringFilter | string
    programme_name?: StringFilter | string
    course_code?: StringFilter | string
    delivery_mode?: EnumDeliveryModeFilter | DeliveryMode
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type CourseConfigCreateWithoutCourseInput = {
    days_per_run: number
    runs_per_year: number
    course_fees?: number | null
    start_time?: Date | string | null
    end_time?: Date | string | null
    days_to_avoid?: CourseConfigCreatedays_to_avoidInput | Enumerable<number>
    avoid_month_start: boolean
    avoid_month_end: boolean
    split?: CourseConfigCreatesplitInput | Enumerable<number>
    trainers: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    FiscalYear: FiscalYearCreateNestedOneWithoutCourseConfigInput
    CourseRun?: CourseRunCreateNestedManyWithoutCourseConfigInput
  }

  export type CourseConfigUncheckedCreateWithoutCourseInput = {
    fy: string
    days_per_run: number
    runs_per_year: number
    course_fees?: number | null
    start_time?: Date | string | null
    end_time?: Date | string | null
    days_to_avoid?: CourseConfigCreatedays_to_avoidInput | Enumerable<number>
    avoid_month_start: boolean
    avoid_month_end: boolean
    split?: CourseConfigCreatesplitInput | Enumerable<number>
    trainers: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    CourseRun?: CourseRunUncheckedCreateNestedManyWithoutCourseConfigInput
  }

  export type CourseConfigCreateOrConnectWithoutCourseInput = {
    where: CourseConfigWhereUniqueInput
    create: XOR<CourseConfigCreateWithoutCourseInput, CourseConfigUncheckedCreateWithoutCourseInput>
  }

  export type CourseConfigCreateManyCourseInputEnvelope = {
    data: Enumerable<CourseConfigCreateManyCourseInput>
    skipDuplicates?: boolean
  }

  export type ProgrammeCreateWithoutCourseInput = {
    programme_name: string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type ProgrammeUncheckedCreateWithoutCourseInput = {
    programme_name: string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type ProgrammeCreateOrConnectWithoutCourseInput = {
    where: ProgrammeWhereUniqueInput
    create: XOR<ProgrammeCreateWithoutCourseInput, ProgrammeUncheckedCreateWithoutCourseInput>
  }

  export type CourseConfigUpsertWithWhereUniqueWithoutCourseInput = {
    where: CourseConfigWhereUniqueInput
    update: XOR<CourseConfigUpdateWithoutCourseInput, CourseConfigUncheckedUpdateWithoutCourseInput>
    create: XOR<CourseConfigCreateWithoutCourseInput, CourseConfigUncheckedCreateWithoutCourseInput>
  }

  export type CourseConfigUpdateWithWhereUniqueWithoutCourseInput = {
    where: CourseConfigWhereUniqueInput
    data: XOR<CourseConfigUpdateWithoutCourseInput, CourseConfigUncheckedUpdateWithoutCourseInput>
  }

  export type CourseConfigUpdateManyWithWhereWithoutCourseInput = {
    where: CourseConfigScalarWhereInput
    data: XOR<CourseConfigUpdateManyMutationInput, CourseConfigUncheckedUpdateManyWithoutCourseConfigInput>
  }

  export type ProgrammeUpsertWithoutCourseInput = {
    update: XOR<ProgrammeUpdateWithoutCourseInput, ProgrammeUncheckedUpdateWithoutCourseInput>
    create: XOR<ProgrammeCreateWithoutCourseInput, ProgrammeUncheckedCreateWithoutCourseInput>
  }

  export type ProgrammeUpdateWithoutCourseInput = {
    programme_name?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProgrammeUncheckedUpdateWithoutCourseInput = {
    programme_name?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FiscalYearCreateWithoutCourseConfigInput = {
    fy: string
    revenue_target?: number | null
    day_limit?: number | null
    blackout_dates?: NullableJsonNullValueInput | InputJsonValue
    low_manpower_dates?: NullableJsonNullValueInput | InputJsonValue
  }

  export type FiscalYearUncheckedCreateWithoutCourseConfigInput = {
    fy: string
    revenue_target?: number | null
    day_limit?: number | null
    blackout_dates?: NullableJsonNullValueInput | InputJsonValue
    low_manpower_dates?: NullableJsonNullValueInput | InputJsonValue
  }

  export type FiscalYearCreateOrConnectWithoutCourseConfigInput = {
    where: FiscalYearWhereUniqueInput
    create: XOR<FiscalYearCreateWithoutCourseConfigInput, FiscalYearUncheckedCreateWithoutCourseConfigInput>
  }

  export type CourseCreateWithoutCourseConfigInput = {
    course_name: string
    course_code: string
    delivery_mode: DeliveryMode
    createdAt?: Date | string
    updatedAt?: Date | string
    Programme: ProgrammeCreateNestedOneWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutCourseConfigInput = {
    course_name: string
    programme_name: string
    course_code: string
    delivery_mode: DeliveryMode
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseCreateOrConnectWithoutCourseConfigInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutCourseConfigInput, CourseUncheckedCreateWithoutCourseConfigInput>
  }

  export type CourseRunCreateWithoutCourseConfigInput = {
    run: number
    createdAt?: Date | string
    updatedAt?: Date | string
    CourseSegment?: CourseSegmentCreateNestedManyWithoutCourseRunInput
  }

  export type CourseRunUncheckedCreateWithoutCourseConfigInput = {
    run: number
    createdAt?: Date | string
    updatedAt?: Date | string
    CourseSegment?: CourseSegmentUncheckedCreateNestedManyWithoutCourseRunInput
  }

  export type CourseRunCreateOrConnectWithoutCourseConfigInput = {
    where: CourseRunWhereUniqueInput
    create: XOR<CourseRunCreateWithoutCourseConfigInput, CourseRunUncheckedCreateWithoutCourseConfigInput>
  }

  export type CourseRunCreateManyCourseConfigInputEnvelope = {
    data: Enumerable<CourseRunCreateManyCourseConfigInput>
    skipDuplicates?: boolean
  }

  export type FiscalYearUpsertWithoutCourseConfigInput = {
    update: XOR<FiscalYearUpdateWithoutCourseConfigInput, FiscalYearUncheckedUpdateWithoutCourseConfigInput>
    create: XOR<FiscalYearCreateWithoutCourseConfigInput, FiscalYearUncheckedCreateWithoutCourseConfigInput>
  }

  export type FiscalYearUpdateWithoutCourseConfigInput = {
    fy?: StringFieldUpdateOperationsInput | string
    revenue_target?: NullableFloatFieldUpdateOperationsInput | number | null
    day_limit?: NullableIntFieldUpdateOperationsInput | number | null
    blackout_dates?: NullableJsonNullValueInput | InputJsonValue
    low_manpower_dates?: NullableJsonNullValueInput | InputJsonValue
  }

  export type FiscalYearUncheckedUpdateWithoutCourseConfigInput = {
    fy?: StringFieldUpdateOperationsInput | string
    revenue_target?: NullableFloatFieldUpdateOperationsInput | number | null
    day_limit?: NullableIntFieldUpdateOperationsInput | number | null
    blackout_dates?: NullableJsonNullValueInput | InputJsonValue
    low_manpower_dates?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CourseUpsertWithoutCourseConfigInput = {
    update: XOR<CourseUpdateWithoutCourseConfigInput, CourseUncheckedUpdateWithoutCourseConfigInput>
    create: XOR<CourseCreateWithoutCourseConfigInput, CourseUncheckedCreateWithoutCourseConfigInput>
  }

  export type CourseUpdateWithoutCourseConfigInput = {
    course_name?: StringFieldUpdateOperationsInput | string
    course_code?: StringFieldUpdateOperationsInput | string
    delivery_mode?: EnumDeliveryModeFieldUpdateOperationsInput | DeliveryMode
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Programme?: ProgrammeUpdateOneRequiredWithoutCourseInput
  }

  export type CourseUncheckedUpdateWithoutCourseConfigInput = {
    course_name?: StringFieldUpdateOperationsInput | string
    programme_name?: StringFieldUpdateOperationsInput | string
    course_code?: StringFieldUpdateOperationsInput | string
    delivery_mode?: EnumDeliveryModeFieldUpdateOperationsInput | DeliveryMode
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseRunUpsertWithWhereUniqueWithoutCourseConfigInput = {
    where: CourseRunWhereUniqueInput
    update: XOR<CourseRunUpdateWithoutCourseConfigInput, CourseRunUncheckedUpdateWithoutCourseConfigInput>
    create: XOR<CourseRunCreateWithoutCourseConfigInput, CourseRunUncheckedCreateWithoutCourseConfigInput>
  }

  export type CourseRunUpdateWithWhereUniqueWithoutCourseConfigInput = {
    where: CourseRunWhereUniqueInput
    data: XOR<CourseRunUpdateWithoutCourseConfigInput, CourseRunUncheckedUpdateWithoutCourseConfigInput>
  }

  export type CourseRunUpdateManyWithWhereWithoutCourseConfigInput = {
    where: CourseRunScalarWhereInput
    data: XOR<CourseRunUpdateManyMutationInput, CourseRunUncheckedUpdateManyWithoutCourseRunInput>
  }

  export type CourseRunScalarWhereInput = {
    AND?: Enumerable<CourseRunScalarWhereInput>
    OR?: Enumerable<CourseRunScalarWhereInput>
    NOT?: Enumerable<CourseRunScalarWhereInput>
    run?: IntFilter | number
    course_name?: StringFilter | string
    fy?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type CourseConfigCreateWithoutCourseRunInput = {
    days_per_run: number
    runs_per_year: number
    course_fees?: number | null
    start_time?: Date | string | null
    end_time?: Date | string | null
    days_to_avoid?: CourseConfigCreatedays_to_avoidInput | Enumerable<number>
    avoid_month_start: boolean
    avoid_month_end: boolean
    split?: CourseConfigCreatesplitInput | Enumerable<number>
    trainers: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    FiscalYear: FiscalYearCreateNestedOneWithoutCourseConfigInput
    Course: CourseCreateNestedOneWithoutCourseConfigInput
  }

  export type CourseConfigUncheckedCreateWithoutCourseRunInput = {
    course_name: string
    fy: string
    days_per_run: number
    runs_per_year: number
    course_fees?: number | null
    start_time?: Date | string | null
    end_time?: Date | string | null
    days_to_avoid?: CourseConfigCreatedays_to_avoidInput | Enumerable<number>
    avoid_month_start: boolean
    avoid_month_end: boolean
    split?: CourseConfigCreatesplitInput | Enumerable<number>
    trainers: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseConfigCreateOrConnectWithoutCourseRunInput = {
    where: CourseConfigWhereUniqueInput
    create: XOR<CourseConfigCreateWithoutCourseRunInput, CourseConfigUncheckedCreateWithoutCourseRunInput>
  }

  export type CourseSegmentCreateWithoutCourseRunInput = {
    segment: number
    dates?: CourseSegmentCreatedatesInput | Enumerable<Date> | Enumerable<string>
    status?: Status
    createdAt?: Date | string
    updatedAt?: Date | string
    Assignment?: AssignmentCreateNestedManyWithoutCourseSegmentInput
  }

  export type CourseSegmentUncheckedCreateWithoutCourseRunInput = {
    segment: number
    dates?: CourseSegmentCreatedatesInput | Enumerable<Date> | Enumerable<string>
    status?: Status
    createdAt?: Date | string
    updatedAt?: Date | string
    Assignment?: AssignmentUncheckedCreateNestedManyWithoutCourseSegmentInput
  }

  export type CourseSegmentCreateOrConnectWithoutCourseRunInput = {
    where: CourseSegmentWhereUniqueInput
    create: XOR<CourseSegmentCreateWithoutCourseRunInput, CourseSegmentUncheckedCreateWithoutCourseRunInput>
  }

  export type CourseSegmentCreateManyCourseRunInputEnvelope = {
    data: Enumerable<CourseSegmentCreateManyCourseRunInput>
    skipDuplicates?: boolean
  }

  export type CourseConfigUpsertWithoutCourseRunInput = {
    update: XOR<CourseConfigUpdateWithoutCourseRunInput, CourseConfigUncheckedUpdateWithoutCourseRunInput>
    create: XOR<CourseConfigCreateWithoutCourseRunInput, CourseConfigUncheckedCreateWithoutCourseRunInput>
  }

  export type CourseConfigUpdateWithoutCourseRunInput = {
    days_per_run?: IntFieldUpdateOperationsInput | number
    runs_per_year?: IntFieldUpdateOperationsInput | number
    course_fees?: NullableFloatFieldUpdateOperationsInput | number | null
    start_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    days_to_avoid?: CourseConfigUpdatedays_to_avoidInput | Enumerable<number>
    avoid_month_start?: BoolFieldUpdateOperationsInput | boolean
    avoid_month_end?: BoolFieldUpdateOperationsInput | boolean
    split?: CourseConfigUpdatesplitInput | Enumerable<number>
    trainers?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    FiscalYear?: FiscalYearUpdateOneRequiredWithoutCourseConfigInput
    Course?: CourseUpdateOneRequiredWithoutCourseConfigInput
  }

  export type CourseConfigUncheckedUpdateWithoutCourseRunInput = {
    course_name?: StringFieldUpdateOperationsInput | string
    fy?: StringFieldUpdateOperationsInput | string
    days_per_run?: IntFieldUpdateOperationsInput | number
    runs_per_year?: IntFieldUpdateOperationsInput | number
    course_fees?: NullableFloatFieldUpdateOperationsInput | number | null
    start_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    days_to_avoid?: CourseConfigUpdatedays_to_avoidInput | Enumerable<number>
    avoid_month_start?: BoolFieldUpdateOperationsInput | boolean
    avoid_month_end?: BoolFieldUpdateOperationsInput | boolean
    split?: CourseConfigUpdatesplitInput | Enumerable<number>
    trainers?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseSegmentUpsertWithWhereUniqueWithoutCourseRunInput = {
    where: CourseSegmentWhereUniqueInput
    update: XOR<CourseSegmentUpdateWithoutCourseRunInput, CourseSegmentUncheckedUpdateWithoutCourseRunInput>
    create: XOR<CourseSegmentCreateWithoutCourseRunInput, CourseSegmentUncheckedCreateWithoutCourseRunInput>
  }

  export type CourseSegmentUpdateWithWhereUniqueWithoutCourseRunInput = {
    where: CourseSegmentWhereUniqueInput
    data: XOR<CourseSegmentUpdateWithoutCourseRunInput, CourseSegmentUncheckedUpdateWithoutCourseRunInput>
  }

  export type CourseSegmentUpdateManyWithWhereWithoutCourseRunInput = {
    where: CourseSegmentScalarWhereInput
    data: XOR<CourseSegmentUpdateManyMutationInput, CourseSegmentUncheckedUpdateManyWithoutCourseSegmentInput>
  }

  export type CourseSegmentScalarWhereInput = {
    AND?: Enumerable<CourseSegmentScalarWhereInput>
    OR?: Enumerable<CourseSegmentScalarWhereInput>
    NOT?: Enumerable<CourseSegmentScalarWhereInput>
    segment?: IntFilter | number
    course_name?: StringFilter | string
    fy?: StringFilter | string
    run?: IntFilter | number
    dates?: DateTimeNullableListFilter
    status?: EnumStatusFilter | Status
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type CourseRunCreateWithoutCourseSegmentInput = {
    run: number
    createdAt?: Date | string
    updatedAt?: Date | string
    CourseConfig: CourseConfigCreateNestedOneWithoutCourseRunInput
  }

  export type CourseRunUncheckedCreateWithoutCourseSegmentInput = {
    run: number
    course_name: string
    fy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseRunCreateOrConnectWithoutCourseSegmentInput = {
    where: CourseRunWhereUniqueInput
    create: XOR<CourseRunCreateWithoutCourseSegmentInput, CourseRunUncheckedCreateWithoutCourseSegmentInput>
  }

  export type AssignmentCreateWithoutCourseSegmentInput = {
    assignment_status?: Status
    decline_reason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    User: UserCreateNestedOneWithoutAssignmentInput
    Notification?: NotificationCreateNestedManyWithoutAssignmentInput
  }

  export type AssignmentUncheckedCreateWithoutCourseSegmentInput = {
    user_name: string
    assignment_status?: Status
    decline_reason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Notification?: NotificationUncheckedCreateNestedManyWithoutAssignmentInput
  }

  export type AssignmentCreateOrConnectWithoutCourseSegmentInput = {
    where: AssignmentWhereUniqueInput
    create: XOR<AssignmentCreateWithoutCourseSegmentInput, AssignmentUncheckedCreateWithoutCourseSegmentInput>
  }

  export type AssignmentCreateManyCourseSegmentInputEnvelope = {
    data: Enumerable<AssignmentCreateManyCourseSegmentInput>
    skipDuplicates?: boolean
  }

  export type CourseRunUpsertWithoutCourseSegmentInput = {
    update: XOR<CourseRunUpdateWithoutCourseSegmentInput, CourseRunUncheckedUpdateWithoutCourseSegmentInput>
    create: XOR<CourseRunCreateWithoutCourseSegmentInput, CourseRunUncheckedCreateWithoutCourseSegmentInput>
  }

  export type CourseRunUpdateWithoutCourseSegmentInput = {
    run?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CourseConfig?: CourseConfigUpdateOneRequiredWithoutCourseRunInput
  }

  export type CourseRunUncheckedUpdateWithoutCourseSegmentInput = {
    run?: IntFieldUpdateOperationsInput | number
    course_name?: StringFieldUpdateOperationsInput | string
    fy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssignmentUpsertWithWhereUniqueWithoutCourseSegmentInput = {
    where: AssignmentWhereUniqueInput
    update: XOR<AssignmentUpdateWithoutCourseSegmentInput, AssignmentUncheckedUpdateWithoutCourseSegmentInput>
    create: XOR<AssignmentCreateWithoutCourseSegmentInput, AssignmentUncheckedCreateWithoutCourseSegmentInput>
  }

  export type AssignmentUpdateWithWhereUniqueWithoutCourseSegmentInput = {
    where: AssignmentWhereUniqueInput
    data: XOR<AssignmentUpdateWithoutCourseSegmentInput, AssignmentUncheckedUpdateWithoutCourseSegmentInput>
  }

  export type AssignmentUpdateManyWithWhereWithoutCourseSegmentInput = {
    where: AssignmentScalarWhereInput
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyWithoutAssignmentInput>
  }

  export type AssignmentScalarWhereInput = {
    AND?: Enumerable<AssignmentScalarWhereInput>
    OR?: Enumerable<AssignmentScalarWhereInput>
    NOT?: Enumerable<AssignmentScalarWhereInput>
    user_name?: StringFilter | string
    segment?: IntFilter | number
    course_name?: StringFilter | string
    fy?: StringFilter | string
    run?: IntFilter | number
    assignment_status?: EnumStatusFilter | Status
    decline_reason?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type AssignmentCreateWithoutUserInput = {
    assignment_status?: Status
    decline_reason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    CourseSegment: CourseSegmentCreateNestedOneWithoutAssignmentInput
    Notification?: NotificationCreateNestedManyWithoutAssignmentInput
  }

  export type AssignmentUncheckedCreateWithoutUserInput = {
    segment: number
    course_name: string
    fy: string
    run: number
    assignment_status?: Status
    decline_reason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Notification?: NotificationUncheckedCreateNestedManyWithoutAssignmentInput
  }

  export type AssignmentCreateOrConnectWithoutUserInput = {
    where: AssignmentWhereUniqueInput
    create: XOR<AssignmentCreateWithoutUserInput, AssignmentUncheckedCreateWithoutUserInput>
  }

  export type AssignmentCreateManyUserInputEnvelope = {
    data: Enumerable<AssignmentCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type AssignmentUpsertWithWhereUniqueWithoutUserInput = {
    where: AssignmentWhereUniqueInput
    update: XOR<AssignmentUpdateWithoutUserInput, AssignmentUncheckedUpdateWithoutUserInput>
    create: XOR<AssignmentCreateWithoutUserInput, AssignmentUncheckedCreateWithoutUserInput>
  }

  export type AssignmentUpdateWithWhereUniqueWithoutUserInput = {
    where: AssignmentWhereUniqueInput
    data: XOR<AssignmentUpdateWithoutUserInput, AssignmentUncheckedUpdateWithoutUserInput>
  }

  export type AssignmentUpdateManyWithWhereWithoutUserInput = {
    where: AssignmentScalarWhereInput
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyWithoutAssignmentInput>
  }

  export type UserCreateWithoutAssignmentInput = {
    user_name: string
    password: string
    email: string
    role?: Role
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutAssignmentInput = {
    user_name: string
    password: string
    email: string
    role?: Role
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutAssignmentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignmentInput, UserUncheckedCreateWithoutAssignmentInput>
  }

  export type CourseSegmentCreateWithoutAssignmentInput = {
    segment: number
    dates?: CourseSegmentCreatedatesInput | Enumerable<Date> | Enumerable<string>
    status?: Status
    createdAt?: Date | string
    updatedAt?: Date | string
    CourseRun: CourseRunCreateNestedOneWithoutCourseSegmentInput
  }

  export type CourseSegmentUncheckedCreateWithoutAssignmentInput = {
    segment: number
    course_name: string
    fy: string
    run: number
    dates?: CourseSegmentCreatedatesInput | Enumerable<Date> | Enumerable<string>
    status?: Status
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseSegmentCreateOrConnectWithoutAssignmentInput = {
    where: CourseSegmentWhereUniqueInput
    create: XOR<CourseSegmentCreateWithoutAssignmentInput, CourseSegmentUncheckedCreateWithoutAssignmentInput>
  }

  export type NotificationCreateWithoutAssignmentInput = {
    time_sent: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutAssignmentInput = {
    time_sent: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutAssignmentInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutAssignmentInput, NotificationUncheckedCreateWithoutAssignmentInput>
  }

  export type NotificationCreateManyAssignmentInputEnvelope = {
    data: Enumerable<NotificationCreateManyAssignmentInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutAssignmentInput = {
    update: XOR<UserUpdateWithoutAssignmentInput, UserUncheckedUpdateWithoutAssignmentInput>
    create: XOR<UserCreateWithoutAssignmentInput, UserUncheckedCreateWithoutAssignmentInput>
  }

  export type UserUpdateWithoutAssignmentInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutAssignmentInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseSegmentUpsertWithoutAssignmentInput = {
    update: XOR<CourseSegmentUpdateWithoutAssignmentInput, CourseSegmentUncheckedUpdateWithoutAssignmentInput>
    create: XOR<CourseSegmentCreateWithoutAssignmentInput, CourseSegmentUncheckedCreateWithoutAssignmentInput>
  }

  export type CourseSegmentUpdateWithoutAssignmentInput = {
    segment?: IntFieldUpdateOperationsInput | number
    dates?: CourseSegmentUpdatedatesInput | Enumerable<Date> | Enumerable<string>
    status?: EnumStatusFieldUpdateOperationsInput | Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CourseRun?: CourseRunUpdateOneRequiredWithoutCourseSegmentInput
  }

  export type CourseSegmentUncheckedUpdateWithoutAssignmentInput = {
    segment?: IntFieldUpdateOperationsInput | number
    course_name?: StringFieldUpdateOperationsInput | string
    fy?: StringFieldUpdateOperationsInput | string
    run?: IntFieldUpdateOperationsInput | number
    dates?: CourseSegmentUpdatedatesInput | Enumerable<Date> | Enumerable<string>
    status?: EnumStatusFieldUpdateOperationsInput | Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutAssignmentInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutAssignmentInput, NotificationUncheckedUpdateWithoutAssignmentInput>
    create: XOR<NotificationCreateWithoutAssignmentInput, NotificationUncheckedCreateWithoutAssignmentInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutAssignmentInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutAssignmentInput, NotificationUncheckedUpdateWithoutAssignmentInput>
  }

  export type NotificationUpdateManyWithWhereWithoutAssignmentInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutNotificationInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: Enumerable<NotificationScalarWhereInput>
    OR?: Enumerable<NotificationScalarWhereInput>
    NOT?: Enumerable<NotificationScalarWhereInput>
    time_sent?: DateTimeFilter | Date | string
    user_name?: StringFilter | string
    segment?: IntFilter | number
    course_name?: StringFilter | string
    fy?: StringFilter | string
    run?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type AssignmentCreateWithoutNotificationInput = {
    assignment_status?: Status
    decline_reason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    User: UserCreateNestedOneWithoutAssignmentInput
    CourseSegment: CourseSegmentCreateNestedOneWithoutAssignmentInput
  }

  export type AssignmentUncheckedCreateWithoutNotificationInput = {
    user_name: string
    segment: number
    course_name: string
    fy: string
    run: number
    assignment_status?: Status
    decline_reason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssignmentCreateOrConnectWithoutNotificationInput = {
    where: AssignmentWhereUniqueInput
    create: XOR<AssignmentCreateWithoutNotificationInput, AssignmentUncheckedCreateWithoutNotificationInput>
  }

  export type AssignmentUpsertWithoutNotificationInput = {
    update: XOR<AssignmentUpdateWithoutNotificationInput, AssignmentUncheckedUpdateWithoutNotificationInput>
    create: XOR<AssignmentCreateWithoutNotificationInput, AssignmentUncheckedCreateWithoutNotificationInput>
  }

  export type AssignmentUpdateWithoutNotificationInput = {
    assignment_status?: EnumStatusFieldUpdateOperationsInput | Status
    decline_reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutAssignmentInput
    CourseSegment?: CourseSegmentUpdateOneRequiredWithoutAssignmentInput
  }

  export type AssignmentUncheckedUpdateWithoutNotificationInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    segment?: IntFieldUpdateOperationsInput | number
    course_name?: StringFieldUpdateOperationsInput | string
    fy?: StringFieldUpdateOperationsInput | string
    run?: IntFieldUpdateOperationsInput | number
    assignment_status?: EnumStatusFieldUpdateOperationsInput | Status
    decline_reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseConfigCreateManyFiscalYearInput = {
    course_name: string
    days_per_run: number
    runs_per_year: number
    course_fees?: number | null
    start_time?: Date | string | null
    end_time?: Date | string | null
    days_to_avoid?: CourseConfigCreatedays_to_avoidInput | Enumerable<number>
    avoid_month_start: boolean
    avoid_month_end: boolean
    split?: CourseConfigCreatesplitInput | Enumerable<number>
    trainers: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseConfigUpdateWithoutFiscalYearInput = {
    days_per_run?: IntFieldUpdateOperationsInput | number
    runs_per_year?: IntFieldUpdateOperationsInput | number
    course_fees?: NullableFloatFieldUpdateOperationsInput | number | null
    start_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    days_to_avoid?: CourseConfigUpdatedays_to_avoidInput | Enumerable<number>
    avoid_month_start?: BoolFieldUpdateOperationsInput | boolean
    avoid_month_end?: BoolFieldUpdateOperationsInput | boolean
    split?: CourseConfigUpdatesplitInput | Enumerable<number>
    trainers?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Course?: CourseUpdateOneRequiredWithoutCourseConfigInput
    CourseRun?: CourseRunUpdateManyWithoutCourseConfigInput
  }

  export type CourseConfigUncheckedUpdateWithoutFiscalYearInput = {
    course_name?: StringFieldUpdateOperationsInput | string
    days_per_run?: IntFieldUpdateOperationsInput | number
    runs_per_year?: IntFieldUpdateOperationsInput | number
    course_fees?: NullableFloatFieldUpdateOperationsInput | number | null
    start_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    days_to_avoid?: CourseConfigUpdatedays_to_avoidInput | Enumerable<number>
    avoid_month_start?: BoolFieldUpdateOperationsInput | boolean
    avoid_month_end?: BoolFieldUpdateOperationsInput | boolean
    split?: CourseConfigUpdatesplitInput | Enumerable<number>
    trainers?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CourseRun?: CourseRunUncheckedUpdateManyWithoutCourseConfigInput
  }

  export type CourseConfigUncheckedUpdateManyWithoutCourseConfigInput = {
    course_name?: StringFieldUpdateOperationsInput | string
    days_per_run?: IntFieldUpdateOperationsInput | number
    runs_per_year?: IntFieldUpdateOperationsInput | number
    course_fees?: NullableFloatFieldUpdateOperationsInput | number | null
    start_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    days_to_avoid?: CourseConfigUpdatedays_to_avoidInput | Enumerable<number>
    avoid_month_start?: BoolFieldUpdateOperationsInput | boolean
    avoid_month_end?: BoolFieldUpdateOperationsInput | boolean
    split?: CourseConfigUpdatesplitInput | Enumerable<number>
    trainers?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseCreateManyProgrammeInput = {
    course_name: string
    course_code: string
    delivery_mode: DeliveryMode
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseUpdateWithoutProgrammeInput = {
    course_name?: StringFieldUpdateOperationsInput | string
    course_code?: StringFieldUpdateOperationsInput | string
    delivery_mode?: EnumDeliveryModeFieldUpdateOperationsInput | DeliveryMode
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CourseConfig?: CourseConfigUpdateManyWithoutCourseInput
  }

  export type CourseUncheckedUpdateWithoutProgrammeInput = {
    course_name?: StringFieldUpdateOperationsInput | string
    course_code?: StringFieldUpdateOperationsInput | string
    delivery_mode?: EnumDeliveryModeFieldUpdateOperationsInput | DeliveryMode
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CourseConfig?: CourseConfigUncheckedUpdateManyWithoutCourseInput
  }

  export type CourseUncheckedUpdateManyWithoutCourseInput = {
    course_name?: StringFieldUpdateOperationsInput | string
    course_code?: StringFieldUpdateOperationsInput | string
    delivery_mode?: EnumDeliveryModeFieldUpdateOperationsInput | DeliveryMode
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseConfigCreateManyCourseInput = {
    fy: string
    days_per_run: number
    runs_per_year: number
    course_fees?: number | null
    start_time?: Date | string | null
    end_time?: Date | string | null
    days_to_avoid?: CourseConfigCreatedays_to_avoidInput | Enumerable<number>
    avoid_month_start: boolean
    avoid_month_end: boolean
    split?: CourseConfigCreatesplitInput | Enumerable<number>
    trainers: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseConfigUpdateWithoutCourseInput = {
    days_per_run?: IntFieldUpdateOperationsInput | number
    runs_per_year?: IntFieldUpdateOperationsInput | number
    course_fees?: NullableFloatFieldUpdateOperationsInput | number | null
    start_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    days_to_avoid?: CourseConfigUpdatedays_to_avoidInput | Enumerable<number>
    avoid_month_start?: BoolFieldUpdateOperationsInput | boolean
    avoid_month_end?: BoolFieldUpdateOperationsInput | boolean
    split?: CourseConfigUpdatesplitInput | Enumerable<number>
    trainers?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    FiscalYear?: FiscalYearUpdateOneRequiredWithoutCourseConfigInput
    CourseRun?: CourseRunUpdateManyWithoutCourseConfigInput
  }

  export type CourseConfigUncheckedUpdateWithoutCourseInput = {
    fy?: StringFieldUpdateOperationsInput | string
    days_per_run?: IntFieldUpdateOperationsInput | number
    runs_per_year?: IntFieldUpdateOperationsInput | number
    course_fees?: NullableFloatFieldUpdateOperationsInput | number | null
    start_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    days_to_avoid?: CourseConfigUpdatedays_to_avoidInput | Enumerable<number>
    avoid_month_start?: BoolFieldUpdateOperationsInput | boolean
    avoid_month_end?: BoolFieldUpdateOperationsInput | boolean
    split?: CourseConfigUpdatesplitInput | Enumerable<number>
    trainers?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CourseRun?: CourseRunUncheckedUpdateManyWithoutCourseConfigInput
  }

  export type CourseRunCreateManyCourseConfigInput = {
    run: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseRunUpdateWithoutCourseConfigInput = {
    run?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CourseSegment?: CourseSegmentUpdateManyWithoutCourseRunInput
  }

  export type CourseRunUncheckedUpdateWithoutCourseConfigInput = {
    run?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CourseSegment?: CourseSegmentUncheckedUpdateManyWithoutCourseRunInput
  }

  export type CourseRunUncheckedUpdateManyWithoutCourseRunInput = {
    run?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseSegmentCreateManyCourseRunInput = {
    segment: number
    dates?: CourseSegmentCreatedatesInput | Enumerable<Date> | Enumerable<string>
    status?: Status
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseSegmentUpdateWithoutCourseRunInput = {
    segment?: IntFieldUpdateOperationsInput | number
    dates?: CourseSegmentUpdatedatesInput | Enumerable<Date> | Enumerable<string>
    status?: EnumStatusFieldUpdateOperationsInput | Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Assignment?: AssignmentUpdateManyWithoutCourseSegmentInput
  }

  export type CourseSegmentUncheckedUpdateWithoutCourseRunInput = {
    segment?: IntFieldUpdateOperationsInput | number
    dates?: CourseSegmentUpdatedatesInput | Enumerable<Date> | Enumerable<string>
    status?: EnumStatusFieldUpdateOperationsInput | Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Assignment?: AssignmentUncheckedUpdateManyWithoutCourseSegmentInput
  }

  export type CourseSegmentUncheckedUpdateManyWithoutCourseSegmentInput = {
    segment?: IntFieldUpdateOperationsInput | number
    dates?: CourseSegmentUpdatedatesInput | Enumerable<Date> | Enumerable<string>
    status?: EnumStatusFieldUpdateOperationsInput | Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssignmentCreateManyCourseSegmentInput = {
    user_name: string
    assignment_status?: Status
    decline_reason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssignmentUpdateWithoutCourseSegmentInput = {
    assignment_status?: EnumStatusFieldUpdateOperationsInput | Status
    decline_reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutAssignmentInput
    Notification?: NotificationUpdateManyWithoutAssignmentInput
  }

  export type AssignmentUncheckedUpdateWithoutCourseSegmentInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    assignment_status?: EnumStatusFieldUpdateOperationsInput | Status
    decline_reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Notification?: NotificationUncheckedUpdateManyWithoutAssignmentInput
  }

  export type AssignmentUncheckedUpdateManyWithoutAssignmentInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    assignment_status?: EnumStatusFieldUpdateOperationsInput | Status
    decline_reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssignmentCreateManyUserInput = {
    segment: number
    course_name: string
    fy: string
    run: number
    assignment_status?: Status
    decline_reason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssignmentUpdateWithoutUserInput = {
    assignment_status?: EnumStatusFieldUpdateOperationsInput | Status
    decline_reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CourseSegment?: CourseSegmentUpdateOneRequiredWithoutAssignmentInput
    Notification?: NotificationUpdateManyWithoutAssignmentInput
  }

  export type AssignmentUncheckedUpdateWithoutUserInput = {
    segment?: IntFieldUpdateOperationsInput | number
    course_name?: StringFieldUpdateOperationsInput | string
    fy?: StringFieldUpdateOperationsInput | string
    run?: IntFieldUpdateOperationsInput | number
    assignment_status?: EnumStatusFieldUpdateOperationsInput | Status
    decline_reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Notification?: NotificationUncheckedUpdateManyWithoutAssignmentInput
  }

  export type NotificationCreateManyAssignmentInput = {
    time_sent: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateWithoutAssignmentInput = {
    time_sent?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutAssignmentInput = {
    time_sent?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutNotificationInput = {
    time_sent?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}