
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.15.2
 * Query Engine version: 461d6a05159055555eb7dfb337c9fb271cbd4d7e
 */
Prisma.prismaVersion = {
  client: "3.15.2",
  engine: "461d6a05159055555eb7dfb337c9fb271cbd4d7e"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.FiscalYearScalarFieldEnum = makeEnum({
  fy: 'fy',
  revenue_target: 'revenue_target',
  day_limit: 'day_limit',
  blackout_dates: 'blackout_dates',
  low_manpower_dates: 'low_manpower_dates'
});

exports.Prisma.ProgrammeScalarFieldEnum = makeEnum({
  programme_name: 'programme_name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.CourseScalarFieldEnum = makeEnum({
  course_name: 'course_name',
  programme_name: 'programme_name',
  course_code: 'course_code',
  delivery_mode: 'delivery_mode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.CourseConfigScalarFieldEnum = makeEnum({
  course_name: 'course_name',
  fy: 'fy',
  days_per_run: 'days_per_run',
  runs_per_year: 'runs_per_year',
  course_fees: 'course_fees',
  start_time: 'start_time',
  end_time: 'end_time',
  days_to_avoid: 'days_to_avoid',
  avoid_month_start: 'avoid_month_start',
  avoid_month_end: 'avoid_month_end',
  split: 'split',
  trainers: 'trainers',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.CourseRunScalarFieldEnum = makeEnum({
  run: 'run',
  course_name: 'course_name',
  fy: 'fy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.CourseSegmentScalarFieldEnum = makeEnum({
  segment: 'segment',
  course_name: 'course_name',
  fy: 'fy',
  run: 'run',
  dates: 'dates',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  user_name: 'user_name',
  password: 'password',
  email: 'email',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.AssignmentScalarFieldEnum = makeEnum({
  user_name: 'user_name',
  segment: 'segment',
  course_name: 'course_name',
  fy: 'fy',
  run: 'run',
  assignment_status: 'assignment_status',
  decline_reason: 'decline_reason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.NotificationScalarFieldEnum = makeEnum({
  time_sent: 'time_sent',
  user_name: 'user_name',
  segment: 'segment',
  course_name: 'course_name',
  fy: 'fy',
  run: 'run',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.NullableJsonNullValueInput = makeEnum({
  DbNull: 'DbNull',
  JsonNull: 'JsonNull'
});

exports.Prisma.JsonNullValueInput = makeEnum({
  JsonNull: 'JsonNull'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.JsonNullValueFilter = makeEnum({
  DbNull: 'DbNull',
  JsonNull: 'JsonNull',
  AnyNull: 'AnyNull'
});
exports.DeliveryMode = makeEnum({
  F2F: 'F2F',
  ONLINE: 'ONLINE'
});

exports.Status = makeEnum({
  GENERATED: 'GENERATED',
  REVIEWED: 'REVIEWED',
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  DECLINED: 'DECLINED',
  CONFIRMED: 'CONFIRMED',
  CANCELLED: 'CANCELLED'
});

exports.Role = makeEnum({
  PM: 'PM',
  TRAINER: 'TRAINER'
});

exports.Prisma.ModelName = makeEnum({
  FiscalYear: 'FiscalYear',
  Programme: 'Programme',
  Course: 'Course',
  CourseConfig: 'CourseConfig',
  CourseRun: 'CourseRun',
  CourseSegment: 'CourseSegment',
  User: 'User',
  Assignment: 'Assignment',
  Notification: 'Notification'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
